
pressProj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003968  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08003a24  08003a24  00004a24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ab8  08003ab8  00005060  2**0
                  CONTENTS
  4 .ARM          00000000  08003ab8  08003ab8  00005060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003ab8  08003ab8  00005060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ab8  08003ab8  00004ab8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003abc  08003abc  00004abc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08003ac0  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c0  20000060  08003b20  00005060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000120  08003b20  00005120  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00005060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a527  00000000  00000000  00005088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b36  00000000  00000000  0000f5af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b10  00000000  00000000  000110e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000892  00000000  00000000  00011bf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017c24  00000000  00000000  0001248a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c826  00000000  00000000  0002a0ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009ac95  00000000  00000000  000368d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d1569  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002768  00000000  00000000  000d15ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  000d3d14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000060 	.word	0x20000060
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08003a0c 	.word	0x08003a0c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000064 	.word	0x20000064
 8000100:	08003a0c 	.word	0x08003a0c

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	@ 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			@ (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			@ (mov r8, r8)

0800021c <SevenSegment_Update>:
		{1, 1, 1, 1, 0, 0, 0},  // 7
		{0, 0, 0, 0, 0, 0, 0},  // 8
		{0, 0, 0, 1, 0, 0, 0}   // 9
};

void SevenSegment_Update(uint8_t number){
 800021c:	b580      	push	{r7, lr}
 800021e:	b082      	sub	sp, #8
 8000220:	af00      	add	r7, sp, #0
 8000222:	0002      	movs	r2, r0
 8000224:	1dfb      	adds	r3, r7, #7
 8000226:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(SevSegA_GPIO_Port, SevSegA_Pin, segmentNumber[number][6]);
 8000228:	1dfb      	adds	r3, r7, #7
 800022a:	781a      	ldrb	r2, [r3, #0]
 800022c:	4932      	ldr	r1, [pc, #200]	@ (80002f8 <SevenSegment_Update+0xdc>)
 800022e:	0013      	movs	r3, r2
 8000230:	00db      	lsls	r3, r3, #3
 8000232:	1a9b      	subs	r3, r3, r2
 8000234:	18cb      	adds	r3, r1, r3
 8000236:	3306      	adds	r3, #6
 8000238:	781b      	ldrb	r3, [r3, #0]
 800023a:	4830      	ldr	r0, [pc, #192]	@ (80002fc <SevenSegment_Update+0xe0>)
 800023c:	001a      	movs	r2, r3
 800023e:	2110      	movs	r1, #16
 8000240:	f001 f9c5 	bl	80015ce <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SevSegB_GPIO_Port, SevSegB_Pin, segmentNumber[number][5]);
 8000244:	1dfb      	adds	r3, r7, #7
 8000246:	781a      	ldrb	r2, [r3, #0]
 8000248:	492b      	ldr	r1, [pc, #172]	@ (80002f8 <SevenSegment_Update+0xdc>)
 800024a:	0013      	movs	r3, r2
 800024c:	00db      	lsls	r3, r3, #3
 800024e:	1a9b      	subs	r3, r3, r2
 8000250:	18cb      	adds	r3, r1, r3
 8000252:	3305      	adds	r3, #5
 8000254:	781b      	ldrb	r3, [r3, #0]
 8000256:	482a      	ldr	r0, [pc, #168]	@ (8000300 <SevenSegment_Update+0xe4>)
 8000258:	001a      	movs	r2, r3
 800025a:	2110      	movs	r1, #16
 800025c:	f001 f9b7 	bl	80015ce <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SevSegC_GPIO_Port, SevSegC_Pin, segmentNumber[number][4]);
 8000260:	1dfb      	adds	r3, r7, #7
 8000262:	781a      	ldrb	r2, [r3, #0]
 8000264:	4924      	ldr	r1, [pc, #144]	@ (80002f8 <SevenSegment_Update+0xdc>)
 8000266:	0013      	movs	r3, r2
 8000268:	00db      	lsls	r3, r3, #3
 800026a:	1a9b      	subs	r3, r3, r2
 800026c:	18cb      	adds	r3, r1, r3
 800026e:	3304      	adds	r3, #4
 8000270:	781b      	ldrb	r3, [r3, #0]
 8000272:	4823      	ldr	r0, [pc, #140]	@ (8000300 <SevenSegment_Update+0xe4>)
 8000274:	001a      	movs	r2, r3
 8000276:	2180      	movs	r1, #128	@ 0x80
 8000278:	f001 f9a9 	bl	80015ce <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SevSegD_GPIO_Port, SevSegD_Pin, segmentNumber[number][3]);
 800027c:	1dfb      	adds	r3, r7, #7
 800027e:	781a      	ldrb	r2, [r3, #0]
 8000280:	491d      	ldr	r1, [pc, #116]	@ (80002f8 <SevenSegment_Update+0xdc>)
 8000282:	0013      	movs	r3, r2
 8000284:	00db      	lsls	r3, r3, #3
 8000286:	1a9b      	subs	r3, r3, r2
 8000288:	18cb      	adds	r3, r1, r3
 800028a:	3303      	adds	r3, #3
 800028c:	781a      	ldrb	r2, [r3, #0]
 800028e:	23a0      	movs	r3, #160	@ 0xa0
 8000290:	05db      	lsls	r3, r3, #23
 8000292:	2180      	movs	r1, #128	@ 0x80
 8000294:	0018      	movs	r0, r3
 8000296:	f001 f99a 	bl	80015ce <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SevSegE_GPIO_Port, SevSegE_Pin, segmentNumber[number][2]);
 800029a:	1dfb      	adds	r3, r7, #7
 800029c:	781a      	ldrb	r2, [r3, #0]
 800029e:	4916      	ldr	r1, [pc, #88]	@ (80002f8 <SevenSegment_Update+0xdc>)
 80002a0:	0013      	movs	r3, r2
 80002a2:	00db      	lsls	r3, r3, #3
 80002a4:	1a9b      	subs	r3, r3, r2
 80002a6:	18cb      	adds	r3, r1, r3
 80002a8:	3302      	adds	r3, #2
 80002aa:	781a      	ldrb	r2, [r3, #0]
 80002ac:	23a0      	movs	r3, #160	@ 0xa0
 80002ae:	05db      	lsls	r3, r3, #23
 80002b0:	2140      	movs	r1, #64	@ 0x40
 80002b2:	0018      	movs	r0, r3
 80002b4:	f001 f98b 	bl	80015ce <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SevSegF_GPIO_Port, SevSegF_Pin, segmentNumber[number][1]);
 80002b8:	1dfb      	adds	r3, r7, #7
 80002ba:	781a      	ldrb	r2, [r3, #0]
 80002bc:	490e      	ldr	r1, [pc, #56]	@ (80002f8 <SevenSegment_Update+0xdc>)
 80002be:	0013      	movs	r3, r2
 80002c0:	00db      	lsls	r3, r3, #3
 80002c2:	1a9b      	subs	r3, r3, r2
 80002c4:	18cb      	adds	r3, r1, r3
 80002c6:	3301      	adds	r3, #1
 80002c8:	781b      	ldrb	r3, [r3, #0]
 80002ca:	480c      	ldr	r0, [pc, #48]	@ (80002fc <SevenSegment_Update+0xe0>)
 80002cc:	001a      	movs	r2, r3
 80002ce:	2120      	movs	r1, #32
 80002d0:	f001 f97d 	bl	80015ce <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SevSegG_GPIO_Port, SevSegG_Pin, segmentNumber[number][0]);
 80002d4:	1dfb      	adds	r3, r7, #7
 80002d6:	781a      	ldrb	r2, [r3, #0]
 80002d8:	4907      	ldr	r1, [pc, #28]	@ (80002f8 <SevenSegment_Update+0xdc>)
 80002da:	0013      	movs	r3, r2
 80002dc:	00db      	lsls	r3, r3, #3
 80002de:	1a9b      	subs	r3, r3, r2
 80002e0:	5c5a      	ldrb	r2, [r3, r1]
 80002e2:	2380      	movs	r3, #128	@ 0x80
 80002e4:	0099      	lsls	r1, r3, #2
 80002e6:	23a0      	movs	r3, #160	@ 0xa0
 80002e8:	05db      	lsls	r3, r3, #23
 80002ea:	0018      	movs	r0, r3
 80002ec:	f001 f96f 	bl	80015ce <HAL_GPIO_WritePin>
}
 80002f0:	46c0      	nop			@ (mov r8, r8)
 80002f2:	46bd      	mov	sp, r7
 80002f4:	b002      	add	sp, #8
 80002f6:	bd80      	pop	{r7, pc}
 80002f8:	2000000c 	.word	0x2000000c
 80002fc:	50000400 	.word	0x50000400
 8000300:	50000800 	.word	0x50000800

08000304 <ProgramEnd>:

void ProgramEnd(){
 8000304:	b580      	push	{r7, lr}
 8000306:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LD10_GPIO_Port, LD10_Pin, 1);
 8000308:	2380      	movs	r3, #128	@ 0x80
 800030a:	019b      	lsls	r3, r3, #6
 800030c:	481e      	ldr	r0, [pc, #120]	@ (8000388 <ProgramEnd+0x84>)
 800030e:	2201      	movs	r2, #1
 8000310:	0019      	movs	r1, r3
 8000312:	f001 f95c 	bl	80015ce <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 1);
 8000316:	4b1d      	ldr	r3, [pc, #116]	@ (800038c <ProgramEnd+0x88>)
 8000318:	2201      	movs	r2, #1
 800031a:	2120      	movs	r1, #32
 800031c:	0018      	movs	r0, r3
 800031e:	f001 f956 	bl	80015ce <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 8000322:	23fa      	movs	r3, #250	@ 0xfa
 8000324:	009b      	lsls	r3, r3, #2
 8000326:	0018      	movs	r0, r3
 8000328:	f000 fece 	bl	80010c8 <HAL_Delay>
    HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 0);
 800032c:	4b17      	ldr	r3, [pc, #92]	@ (800038c <ProgramEnd+0x88>)
 800032e:	2200      	movs	r2, #0
 8000330:	2120      	movs	r1, #32
 8000332:	0018      	movs	r0, r3
 8000334:	f001 f94b 	bl	80015ce <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LD10_GPIO_Port, LD10_Pin, 0);
 8000338:	2380      	movs	r3, #128	@ 0x80
 800033a:	019b      	lsls	r3, r3, #6
 800033c:	4812      	ldr	r0, [pc, #72]	@ (8000388 <ProgramEnd+0x84>)
 800033e:	2200      	movs	r2, #0
 8000340:	0019      	movs	r1, r3
 8000342:	f001 f944 	bl	80015ce <HAL_GPIO_WritePin>
    HAL_Delay(50);
 8000346:	2032      	movs	r0, #50	@ 0x32
 8000348:	f000 febe 	bl	80010c8 <HAL_Delay>
    state = 0;
 800034c:	4b10      	ldr	r3, [pc, #64]	@ (8000390 <ProgramEnd+0x8c>)
 800034e:	2200      	movs	r2, #0
 8000350:	701a      	strb	r2, [r3, #0]
    program = 0;
 8000352:	4b10      	ldr	r3, [pc, #64]	@ (8000394 <ProgramEnd+0x90>)
 8000354:	2200      	movs	r2, #0
 8000356:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, 1);
 8000358:	2380      	movs	r3, #128	@ 0x80
 800035a:	009b      	lsls	r3, r3, #2
 800035c:	480e      	ldr	r0, [pc, #56]	@ (8000398 <ProgramEnd+0x94>)
 800035e:	2201      	movs	r2, #1
 8000360:	0019      	movs	r1, r3
 8000362:	f001 f934 	bl	80015ce <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 1);
 8000366:	2380      	movs	r3, #128	@ 0x80
 8000368:	00db      	lsls	r3, r3, #3
 800036a:	4807      	ldr	r0, [pc, #28]	@ (8000388 <ProgramEnd+0x84>)
 800036c:	2201      	movs	r2, #1
 800036e:	0019      	movs	r1, r3
 8000370:	f001 f92d 	bl	80015ce <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8000374:	4b04      	ldr	r3, [pc, #16]	@ (8000388 <ProgramEnd+0x84>)
 8000376:	2201      	movs	r2, #1
 8000378:	2140      	movs	r1, #64	@ 0x40
 800037a:	0018      	movs	r0, r3
 800037c:	f001 f927 	bl	80015ce <HAL_GPIO_WritePin>
}
 8000380:	46c0      	nop			@ (mov r8, r8)
 8000382:	46bd      	mov	sp, r7
 8000384:	bd80      	pop	{r7, pc}
 8000386:	46c0      	nop			@ (mov r8, r8)
 8000388:	50000400 	.word	0x50000400
 800038c:	50000800 	.word	0x50000800
 8000390:	20000114 	.word	0x20000114
 8000394:	20000116 	.word	0x20000116
 8000398:	50000c00 	.word	0x50000c00

0800039c <First_program>:


void First_program(){
 800039c:	b580      	push	{r7, lr}
 800039e:	af00      	add	r7, sp, #0
	if ((interruptFlag == 1) || (counter <= 0)){
 80003a0:	4b0b      	ldr	r3, [pc, #44]	@ (80003d0 <First_program+0x34>)
 80003a2:	781b      	ldrb	r3, [r3, #0]
 80003a4:	2b01      	cmp	r3, #1
 80003a6:	d003      	beq.n	80003b0 <First_program+0x14>
 80003a8:	4b0a      	ldr	r3, [pc, #40]	@ (80003d4 <First_program+0x38>)
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d10c      	bne.n	80003ca <First_program+0x2e>
	    HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, 0);
 80003b0:	2380      	movs	r3, #128	@ 0x80
 80003b2:	009b      	lsls	r3, r3, #2
 80003b4:	4808      	ldr	r0, [pc, #32]	@ (80003d8 <First_program+0x3c>)
 80003b6:	2200      	movs	r2, #0
 80003b8:	0019      	movs	r1, r3
 80003ba:	f001 f908 	bl	80015ce <HAL_GPIO_WritePin>
	    HAL_TIM_Base_Stop_IT(&htim3);
 80003be:	4b07      	ldr	r3, [pc, #28]	@ (80003dc <First_program+0x40>)
 80003c0:	0018      	movs	r0, r3
 80003c2:	f002 f8c1 	bl	8002548 <HAL_TIM_Base_Stop_IT>
	    ProgramEnd();
 80003c6:	f7ff ff9d 	bl	8000304 <ProgramEnd>
	}
}
 80003ca:	46c0      	nop			@ (mov r8, r8)
 80003cc:	46bd      	mov	sp, r7
 80003ce:	bd80      	pop	{r7, pc}
 80003d0:	20000115 	.word	0x20000115
 80003d4:	20000000 	.word	0x20000000
 80003d8:	50000c00 	.word	0x50000c00
 80003dc:	200000c8 	.word	0x200000c8

080003e0 <Second_program>:

void Second_program(){
 80003e0:	b580      	push	{r7, lr}
 80003e2:	af00      	add	r7, sp, #0
    if ((interruptFlag == 1) || (counter <= 0)){
 80003e4:	4b4d      	ldr	r3, [pc, #308]	@ (800051c <Second_program+0x13c>)
 80003e6:	781b      	ldrb	r3, [r3, #0]
 80003e8:	2b01      	cmp	r3, #1
 80003ea:	d003      	beq.n	80003f4 <Second_program+0x14>
 80003ec:	4b4c      	ldr	r3, [pc, #304]	@ (8000520 <Second_program+0x140>)
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d117      	bne.n	8000424 <Second_program+0x44>
	    HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 0);
 80003f4:	2380      	movs	r3, #128	@ 0x80
 80003f6:	00db      	lsls	r3, r3, #3
 80003f8:	484a      	ldr	r0, [pc, #296]	@ (8000524 <Second_program+0x144>)
 80003fa:	2200      	movs	r2, #0
 80003fc:	0019      	movs	r1, r3
 80003fe:	f001 f8e6 	bl	80015ce <HAL_GPIO_WritePin>
	    HAL_TIM_Base_Stop_IT(&htim3);
 8000402:	4b49      	ldr	r3, [pc, #292]	@ (8000528 <Second_program+0x148>)
 8000404:	0018      	movs	r0, r3
 8000406:	f002 f89f 	bl	8002548 <HAL_TIM_Base_Stop_IT>
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 800040a:	4b48      	ldr	r3, [pc, #288]	@ (800052c <Second_program+0x14c>)
 800040c:	2108      	movs	r1, #8
 800040e:	0018      	movs	r0, r3
 8000410:	f002 fa12 	bl	8002838 <HAL_TIM_PWM_Stop>
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_4);
 8000414:	4b45      	ldr	r3, [pc, #276]	@ (800052c <Second_program+0x14c>)
 8000416:	210c      	movs	r1, #12
 8000418:	0018      	movs	r0, r3
 800041a:	f002 fa0d 	bl	8002838 <HAL_TIM_PWM_Stop>
	    ProgramEnd();
 800041e:	f7ff ff71 	bl	8000304 <ProgramEnd>
 8000422:	e077      	b.n	8000514 <Second_program+0x134>
    }
    else {
    	temp1 = counter/1000;
 8000424:	4b3e      	ldr	r3, [pc, #248]	@ (8000520 <Second_program+0x140>)
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	22fa      	movs	r2, #250	@ 0xfa
 800042a:	0091      	lsls	r1, r2, #2
 800042c:	0018      	movs	r0, r3
 800042e:	f7ff fe69 	bl	8000104 <__udivsi3>
 8000432:	0003      	movs	r3, r0
 8000434:	b2da      	uxtb	r2, r3
 8000436:	4b3e      	ldr	r3, [pc, #248]	@ (8000530 <Second_program+0x150>)
 8000438:	701a      	strb	r2, [r3, #0]
    	temp2 = ((counter/100)%10);
 800043a:	4b39      	ldr	r3, [pc, #228]	@ (8000520 <Second_program+0x140>)
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	2164      	movs	r1, #100	@ 0x64
 8000440:	0018      	movs	r0, r3
 8000442:	f7ff fe5f 	bl	8000104 <__udivsi3>
 8000446:	0003      	movs	r3, r0
 8000448:	210a      	movs	r1, #10
 800044a:	0018      	movs	r0, r3
 800044c:	f7ff fee0 	bl	8000210 <__aeabi_uidivmod>
 8000450:	000b      	movs	r3, r1
 8000452:	b2da      	uxtb	r2, r3
 8000454:	4b37      	ldr	r3, [pc, #220]	@ (8000534 <Second_program+0x154>)
 8000456:	701a      	strb	r2, [r3, #0]
    	temp3 = ((counter/10)%10);
 8000458:	4b31      	ldr	r3, [pc, #196]	@ (8000520 <Second_program+0x140>)
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	210a      	movs	r1, #10
 800045e:	0018      	movs	r0, r3
 8000460:	f7ff fe50 	bl	8000104 <__udivsi3>
 8000464:	0003      	movs	r3, r0
 8000466:	210a      	movs	r1, #10
 8000468:	0018      	movs	r0, r3
 800046a:	f7ff fed1 	bl	8000210 <__aeabi_uidivmod>
 800046e:	000b      	movs	r3, r1
 8000470:	b2da      	uxtb	r2, r3
 8000472:	4b31      	ldr	r3, [pc, #196]	@ (8000538 <Second_program+0x158>)
 8000474:	701a      	strb	r2, [r3, #0]
    	temp4 = (counter%10);
 8000476:	4b2a      	ldr	r3, [pc, #168]	@ (8000520 <Second_program+0x140>)
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	210a      	movs	r1, #10
 800047c:	0018      	movs	r0, r3
 800047e:	f7ff fec7 	bl	8000210 <__aeabi_uidivmod>
 8000482:	000b      	movs	r3, r1
 8000484:	b2da      	uxtb	r2, r3
 8000486:	4b2d      	ldr	r3, [pc, #180]	@ (800053c <Second_program+0x15c>)
 8000488:	701a      	strb	r2, [r3, #0]
    	SevenSegment_Update(temp2);
 800048a:	4b2a      	ldr	r3, [pc, #168]	@ (8000534 <Second_program+0x154>)
 800048c:	781b      	ldrb	r3, [r3, #0]
 800048e:	0018      	movs	r0, r3
 8000490:	f7ff fec4 	bl	800021c <SevenSegment_Update>
    	HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, GPIO_PIN_SET);
 8000494:	4b23      	ldr	r3, [pc, #140]	@ (8000524 <Second_program+0x144>)
 8000496:	2201      	movs	r2, #1
 8000498:	2108      	movs	r1, #8
 800049a:	0018      	movs	r0, r3
 800049c:	f001 f897 	bl	80015ce <HAL_GPIO_WritePin>
    	HAL_Delay(5);
 80004a0:	2005      	movs	r0, #5
 80004a2:	f000 fe11 	bl	80010c8 <HAL_Delay>
    	HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, GPIO_PIN_RESET);
 80004a6:	4b1f      	ldr	r3, [pc, #124]	@ (8000524 <Second_program+0x144>)
 80004a8:	2200      	movs	r2, #0
 80004aa:	2108      	movs	r1, #8
 80004ac:	0018      	movs	r0, r3
 80004ae:	f001 f88e 	bl	80015ce <HAL_GPIO_WritePin>

    	SevenSegment_Update(temp3);
 80004b2:	4b21      	ldr	r3, [pc, #132]	@ (8000538 <Second_program+0x158>)
 80004b4:	781b      	ldrb	r3, [r3, #0]
 80004b6:	0018      	movs	r0, r3
 80004b8:	f7ff feb0 	bl	800021c <SevenSegment_Update>
    	HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, GPIO_PIN_SET);
 80004bc:	2380      	movs	r3, #128	@ 0x80
 80004be:	00d9      	lsls	r1, r3, #3
 80004c0:	23a0      	movs	r3, #160	@ 0xa0
 80004c2:	05db      	lsls	r3, r3, #23
 80004c4:	2201      	movs	r2, #1
 80004c6:	0018      	movs	r0, r3
 80004c8:	f001 f881 	bl	80015ce <HAL_GPIO_WritePin>
    	HAL_Delay(5);
 80004cc:	2005      	movs	r0, #5
 80004ce:	f000 fdfb 	bl	80010c8 <HAL_Delay>
    	HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, GPIO_PIN_RESET);
 80004d2:	2380      	movs	r3, #128	@ 0x80
 80004d4:	00d9      	lsls	r1, r3, #3
 80004d6:	23a0      	movs	r3, #160	@ 0xa0
 80004d8:	05db      	lsls	r3, r3, #23
 80004da:	2200      	movs	r2, #0
 80004dc:	0018      	movs	r0, r3
 80004de:	f001 f876 	bl	80015ce <HAL_GPIO_WritePin>

    	SevenSegment_Update(temp4);
 80004e2:	4b16      	ldr	r3, [pc, #88]	@ (800053c <Second_program+0x15c>)
 80004e4:	781b      	ldrb	r3, [r3, #0]
 80004e6:	0018      	movs	r0, r3
 80004e8:	f7ff fe98 	bl	800021c <SevenSegment_Update>
    	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, GPIO_PIN_SET);
 80004ec:	2380      	movs	r3, #128	@ 0x80
 80004ee:	0059      	lsls	r1, r3, #1
 80004f0:	23a0      	movs	r3, #160	@ 0xa0
 80004f2:	05db      	lsls	r3, r3, #23
 80004f4:	2201      	movs	r2, #1
 80004f6:	0018      	movs	r0, r3
 80004f8:	f001 f869 	bl	80015ce <HAL_GPIO_WritePin>
    	HAL_Delay(5);
 80004fc:	2005      	movs	r0, #5
 80004fe:	f000 fde3 	bl	80010c8 <HAL_Delay>
    	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, GPIO_PIN_RESET);}
 8000502:	2380      	movs	r3, #128	@ 0x80
 8000504:	0059      	lsls	r1, r3, #1
 8000506:	23a0      	movs	r3, #160	@ 0xa0
 8000508:	05db      	lsls	r3, r3, #23
 800050a:	2200      	movs	r2, #0
 800050c:	0018      	movs	r0, r3
 800050e:	f001 f85e 	bl	80015ce <HAL_GPIO_WritePin>
}
 8000512:	46c0      	nop			@ (mov r8, r8)
 8000514:	46c0      	nop			@ (mov r8, r8)
 8000516:	46bd      	mov	sp, r7
 8000518:	bd80      	pop	{r7, pc}
 800051a:	46c0      	nop			@ (mov r8, r8)
 800051c:	20000115 	.word	0x20000115
 8000520:	20000000 	.word	0x20000000
 8000524:	50000400 	.word	0x50000400
 8000528:	200000c8 	.word	0x200000c8
 800052c:	2000007c 	.word	0x2000007c
 8000530:	20000117 	.word	0x20000117
 8000534:	20000118 	.word	0x20000118
 8000538:	20000119 	.word	0x20000119
 800053c:	2000011a 	.word	0x2000011a

08000540 <Third_program>:

void Third_program(){
 8000540:	b580      	push	{r7, lr}
 8000542:	af00      	add	r7, sp, #0
	if ((interruptFlag == 1) || (counter <= 0)){
 8000544:	4b0b      	ldr	r3, [pc, #44]	@ (8000574 <Third_program+0x34>)
 8000546:	781b      	ldrb	r3, [r3, #0]
 8000548:	2b01      	cmp	r3, #1
 800054a:	d003      	beq.n	8000554 <Third_program+0x14>
 800054c:	4b0a      	ldr	r3, [pc, #40]	@ (8000578 <Third_program+0x38>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	2b00      	cmp	r3, #0
 8000552:	d10b      	bne.n	800056c <Third_program+0x2c>
	    HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8000554:	4b09      	ldr	r3, [pc, #36]	@ (800057c <Third_program+0x3c>)
 8000556:	2200      	movs	r2, #0
 8000558:	2140      	movs	r1, #64	@ 0x40
 800055a:	0018      	movs	r0, r3
 800055c:	f001 f837 	bl	80015ce <HAL_GPIO_WritePin>
	    HAL_TIM_Base_Stop_IT(&htim3);
 8000560:	4b07      	ldr	r3, [pc, #28]	@ (8000580 <Third_program+0x40>)
 8000562:	0018      	movs	r0, r3
 8000564:	f001 fff0 	bl	8002548 <HAL_TIM_Base_Stop_IT>
	    ProgramEnd();
 8000568:	f7ff fecc 	bl	8000304 <ProgramEnd>
	}
}
 800056c:	46c0      	nop			@ (mov r8, r8)
 800056e:	46bd      	mov	sp, r7
 8000570:	bd80      	pop	{r7, pc}
 8000572:	46c0      	nop			@ (mov r8, r8)
 8000574:	20000115 	.word	0x20000115
 8000578:	20000000 	.word	0x20000000
 800057c:	50000400 	.word	0x50000400
 8000580:	200000c8 	.word	0x200000c8

08000584 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3){
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	4a05      	ldr	r2, [pc, #20]	@ (80005a8 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000592:	4293      	cmp	r3, r2
 8000594:	d104      	bne.n	80005a0 <HAL_TIM_PeriodElapsedCallback+0x1c>
			counter--;}
 8000596:	4b05      	ldr	r3, [pc, #20]	@ (80005ac <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	1e5a      	subs	r2, r3, #1
 800059c:	4b03      	ldr	r3, [pc, #12]	@ (80005ac <HAL_TIM_PeriodElapsedCallback+0x28>)
 800059e:	601a      	str	r2, [r3, #0]
}
 80005a0:	46c0      	nop			@ (mov r8, r8)
 80005a2:	46bd      	mov	sp, r7
 80005a4:	b002      	add	sp, #8
 80005a6:	bd80      	pop	{r7, pc}
 80005a8:	40000400 	.word	0x40000400
 80005ac:	20000000 	.word	0x20000000

080005b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b4:	f000 fd02 	bl	8000fbc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b8:	f000 f8f0 	bl	800079c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005bc:	f000 fa52 	bl	8000a64 <MX_GPIO_Init>
  MX_TIM1_Init();
 80005c0:	f000 f934 	bl	800082c <MX_TIM1_Init>
  MX_TIM3_Init();
 80005c4:	f000 f9f8 	bl	80009b8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  // kod do sprawdzania czy wszystko działa
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, 1);
 80005c8:	2380      	movs	r3, #128	@ 0x80
 80005ca:	009b      	lsls	r3, r3, #2
 80005cc:	4868      	ldr	r0, [pc, #416]	@ (8000770 <main+0x1c0>)
 80005ce:	2201      	movs	r2, #1
 80005d0:	0019      	movs	r1, r3
 80005d2:	f000 fffc 	bl	80015ce <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 1);
 80005d6:	2380      	movs	r3, #128	@ 0x80
 80005d8:	00db      	lsls	r3, r3, #3
 80005da:	4866      	ldr	r0, [pc, #408]	@ (8000774 <main+0x1c4>)
 80005dc:	2201      	movs	r2, #1
 80005de:	0019      	movs	r1, r3
 80005e0:	f000 fff5 	bl	80015ce <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 80005e4:	4b63      	ldr	r3, [pc, #396]	@ (8000774 <main+0x1c4>)
 80005e6:	2201      	movs	r2, #1
 80005e8:	2140      	movs	r1, #64	@ 0x40
 80005ea:	0018      	movs	r0, r3
 80005ec:	f000 ffef 	bl	80015ce <HAL_GPIO_WritePin>
  TIM1->CCR3 = pumpPower;
 80005f0:	4b61      	ldr	r3, [pc, #388]	@ (8000778 <main+0x1c8>)
 80005f2:	781a      	ldrb	r2, [r3, #0]
 80005f4:	4b61      	ldr	r3, [pc, #388]	@ (800077c <main+0x1cc>)
 80005f6:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM1->CCR4 = 0;
 80005f8:	4b60      	ldr	r3, [pc, #384]	@ (800077c <main+0x1cc>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // przycisk do programu 1
	  if ((HAL_GPIO_ReadPin(USER_BUTTON_1_GPIO_Port, USER_BUTTON_1_Pin) == GPIO_PIN_RESET)&&(state == 0)) {
 80005fe:	2380      	movs	r3, #128	@ 0x80
 8000600:	005b      	lsls	r3, r3, #1
 8000602:	4a5b      	ldr	r2, [pc, #364]	@ (8000770 <main+0x1c0>)
 8000604:	0019      	movs	r1, r3
 8000606:	0010      	movs	r0, r2
 8000608:	f000 ffc4 	bl	8001594 <HAL_GPIO_ReadPin>
 800060c:	1e03      	subs	r3, r0, #0
 800060e:	d129      	bne.n	8000664 <main+0xb4>
 8000610:	4b5b      	ldr	r3, [pc, #364]	@ (8000780 <main+0x1d0>)
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	2b00      	cmp	r3, #0
 8000616:	d125      	bne.n	8000664 <main+0xb4>
		  counter = progLength[0];
 8000618:	4b5a      	ldr	r3, [pc, #360]	@ (8000784 <main+0x1d4>)
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	001a      	movs	r2, r3
 800061e:	4b5a      	ldr	r3, [pc, #360]	@ (8000788 <main+0x1d8>)
 8000620:	601a      	str	r2, [r3, #0]
		  program = 1;
 8000622:	4b5a      	ldr	r3, [pc, #360]	@ (800078c <main+0x1dc>)
 8000624:	2201      	movs	r2, #1
 8000626:	701a      	strb	r2, [r3, #0]
		  state = 1;
 8000628:	4b55      	ldr	r3, [pc, #340]	@ (8000780 <main+0x1d0>)
 800062a:	2201      	movs	r2, #1
 800062c:	701a      	strb	r2, [r3, #0]
		  interruptFlag = 0;
 800062e:	4b58      	ldr	r3, [pc, #352]	@ (8000790 <main+0x1e0>)
 8000630:	2200      	movs	r2, #0
 8000632:	701a      	strb	r2, [r3, #0]
		  HAL_TIM_Base_Start_IT(&htim3);
 8000634:	4b57      	ldr	r3, [pc, #348]	@ (8000794 <main+0x1e4>)
 8000636:	0018      	movs	r0, r3
 8000638:	f001 ff2a 	bl	8002490 <HAL_TIM_Base_Start_IT>
		  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 0);
 800063c:	2380      	movs	r3, #128	@ 0x80
 800063e:	00db      	lsls	r3, r3, #3
 8000640:	484c      	ldr	r0, [pc, #304]	@ (8000774 <main+0x1c4>)
 8000642:	2200      	movs	r2, #0
 8000644:	0019      	movs	r1, r3
 8000646:	f000 ffc2 	bl	80015ce <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 800064a:	4b4a      	ldr	r3, [pc, #296]	@ (8000774 <main+0x1c4>)
 800064c:	2200      	movs	r2, #0
 800064e:	2140      	movs	r1, #64	@ 0x40
 8000650:	0018      	movs	r0, r3
 8000652:	f000 ffbc 	bl	80015ce <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LD10_GPIO_Port, LD10_Pin, 0);
 8000656:	2380      	movs	r3, #128	@ 0x80
 8000658:	019b      	lsls	r3, r3, #6
 800065a:	4846      	ldr	r0, [pc, #280]	@ (8000774 <main+0x1c4>)
 800065c:	2200      	movs	r2, #0
 800065e:	0019      	movs	r1, r3
 8000660:	f000 ffb5 	bl	80015ce <HAL_GPIO_WritePin>
	  }
	  // przycisk do programu 2
	  if ((HAL_GPIO_ReadPin(USER_BUTTON_2_GPIO_Port, USER_BUTTON_2_Pin) == GPIO_PIN_RESET)&&(state == 0)) {
 8000664:	2380      	movs	r3, #128	@ 0x80
 8000666:	021b      	lsls	r3, r3, #8
 8000668:	4a42      	ldr	r2, [pc, #264]	@ (8000774 <main+0x1c4>)
 800066a:	0019      	movs	r1, r3
 800066c:	0010      	movs	r0, r2
 800066e:	f000 ff91 	bl	8001594 <HAL_GPIO_ReadPin>
 8000672:	1e03      	subs	r3, r0, #0
 8000674:	d133      	bne.n	80006de <main+0x12e>
 8000676:	4b42      	ldr	r3, [pc, #264]	@ (8000780 <main+0x1d0>)
 8000678:	781b      	ldrb	r3, [r3, #0]
 800067a:	2b00      	cmp	r3, #0
 800067c:	d12f      	bne.n	80006de <main+0x12e>
		  counter = progLength[1];
 800067e:	4b41      	ldr	r3, [pc, #260]	@ (8000784 <main+0x1d4>)
 8000680:	785b      	ldrb	r3, [r3, #1]
 8000682:	001a      	movs	r2, r3
 8000684:	4b40      	ldr	r3, [pc, #256]	@ (8000788 <main+0x1d8>)
 8000686:	601a      	str	r2, [r3, #0]
		  program = 2;
 8000688:	4b40      	ldr	r3, [pc, #256]	@ (800078c <main+0x1dc>)
 800068a:	2202      	movs	r2, #2
 800068c:	701a      	strb	r2, [r3, #0]
		  state = 1;
 800068e:	4b3c      	ldr	r3, [pc, #240]	@ (8000780 <main+0x1d0>)
 8000690:	2201      	movs	r2, #1
 8000692:	701a      	strb	r2, [r3, #0]
		  interruptFlag = 0;
 8000694:	4b3e      	ldr	r3, [pc, #248]	@ (8000790 <main+0x1e0>)
 8000696:	2200      	movs	r2, #0
 8000698:	701a      	strb	r2, [r3, #0]
		  HAL_TIM_Base_Start_IT(&htim3);
 800069a:	4b3e      	ldr	r3, [pc, #248]	@ (8000794 <main+0x1e4>)
 800069c:	0018      	movs	r0, r3
 800069e:	f001 fef7 	bl	8002490 <HAL_TIM_Base_Start_IT>
		  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, 0);
 80006a2:	2380      	movs	r3, #128	@ 0x80
 80006a4:	009b      	lsls	r3, r3, #2
 80006a6:	4832      	ldr	r0, [pc, #200]	@ (8000770 <main+0x1c0>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	0019      	movs	r1, r3
 80006ac:	f000 ff8f 	bl	80015ce <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 80006b0:	4b30      	ldr	r3, [pc, #192]	@ (8000774 <main+0x1c4>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	2140      	movs	r1, #64	@ 0x40
 80006b6:	0018      	movs	r0, r3
 80006b8:	f000 ff89 	bl	80015ce <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LD10_GPIO_Port, LD10_Pin, 0);
 80006bc:	2380      	movs	r3, #128	@ 0x80
 80006be:	019b      	lsls	r3, r3, #6
 80006c0:	482c      	ldr	r0, [pc, #176]	@ (8000774 <main+0x1c4>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	0019      	movs	r1, r3
 80006c6:	f000 ff82 	bl	80015ce <HAL_GPIO_WritePin>
		  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80006ca:	4b33      	ldr	r3, [pc, #204]	@ (8000798 <main+0x1e8>)
 80006cc:	2108      	movs	r1, #8
 80006ce:	0018      	movs	r0, r3
 80006d0:	f001 ffc8 	bl	8002664 <HAL_TIM_PWM_Start>
		  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80006d4:	4b30      	ldr	r3, [pc, #192]	@ (8000798 <main+0x1e8>)
 80006d6:	210c      	movs	r1, #12
 80006d8:	0018      	movs	r0, r3
 80006da:	f001 ffc3 	bl	8002664 <HAL_TIM_PWM_Start>
	  }
	  // przycisk do programu 3
	  if ((HAL_GPIO_ReadPin(USER_BUTTON_3_GPIO_Port, USER_BUTTON_3_Pin) == GPIO_PIN_RESET)&&(state == 0)) {
 80006de:	4b25      	ldr	r3, [pc, #148]	@ (8000774 <main+0x1c4>)
 80006e0:	2104      	movs	r1, #4
 80006e2:	0018      	movs	r0, r3
 80006e4:	f000 ff56 	bl	8001594 <HAL_GPIO_ReadPin>
 80006e8:	1e03      	subs	r3, r0, #0
 80006ea:	d12a      	bne.n	8000742 <main+0x192>
 80006ec:	4b24      	ldr	r3, [pc, #144]	@ (8000780 <main+0x1d0>)
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d126      	bne.n	8000742 <main+0x192>
		  counter = progLength[2];
 80006f4:	4b23      	ldr	r3, [pc, #140]	@ (8000784 <main+0x1d4>)
 80006f6:	789b      	ldrb	r3, [r3, #2]
 80006f8:	001a      	movs	r2, r3
 80006fa:	4b23      	ldr	r3, [pc, #140]	@ (8000788 <main+0x1d8>)
 80006fc:	601a      	str	r2, [r3, #0]
		  program = 3;
 80006fe:	4b23      	ldr	r3, [pc, #140]	@ (800078c <main+0x1dc>)
 8000700:	2203      	movs	r2, #3
 8000702:	701a      	strb	r2, [r3, #0]
		  state = 1;
 8000704:	4b1e      	ldr	r3, [pc, #120]	@ (8000780 <main+0x1d0>)
 8000706:	2201      	movs	r2, #1
 8000708:	701a      	strb	r2, [r3, #0]
		  interruptFlag = 0;
 800070a:	4b21      	ldr	r3, [pc, #132]	@ (8000790 <main+0x1e0>)
 800070c:	2200      	movs	r2, #0
 800070e:	701a      	strb	r2, [r3, #0]
		  HAL_TIM_Base_Start_IT(&htim3);
 8000710:	4b20      	ldr	r3, [pc, #128]	@ (8000794 <main+0x1e4>)
 8000712:	0018      	movs	r0, r3
 8000714:	f001 febc 	bl	8002490 <HAL_TIM_Base_Start_IT>
		  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 0);
 8000718:	2380      	movs	r3, #128	@ 0x80
 800071a:	00db      	lsls	r3, r3, #3
 800071c:	4815      	ldr	r0, [pc, #84]	@ (8000774 <main+0x1c4>)
 800071e:	2200      	movs	r2, #0
 8000720:	0019      	movs	r1, r3
 8000722:	f000 ff54 	bl	80015ce <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, 0);
 8000726:	2380      	movs	r3, #128	@ 0x80
 8000728:	009b      	lsls	r3, r3, #2
 800072a:	4811      	ldr	r0, [pc, #68]	@ (8000770 <main+0x1c0>)
 800072c:	2200      	movs	r2, #0
 800072e:	0019      	movs	r1, r3
 8000730:	f000 ff4d 	bl	80015ce <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LD10_GPIO_Port, LD10_Pin, 0);
 8000734:	2380      	movs	r3, #128	@ 0x80
 8000736:	019b      	lsls	r3, r3, #6
 8000738:	480e      	ldr	r0, [pc, #56]	@ (8000774 <main+0x1c4>)
 800073a:	2200      	movs	r2, #0
 800073c:	0019      	movs	r1, r3
 800073e:	f000 ff46 	bl	80015ce <HAL_GPIO_WritePin>
	  }

	  	/*const char message[] = "Hello world!\r\n";
	    HAL_UART_Transmit(&huart2, (uint8_t*)message, strlen(message), HAL_MAX_DELAY);*/
	  switch (program){
 8000742:	4b12      	ldr	r3, [pc, #72]	@ (800078c <main+0x1dc>)
 8000744:	781b      	ldrb	r3, [r3, #0]
 8000746:	2b03      	cmp	r3, #3
 8000748:	d00b      	beq.n	8000762 <main+0x1b2>
 800074a:	dc0d      	bgt.n	8000768 <main+0x1b8>
 800074c:	2b01      	cmp	r3, #1
 800074e:	d002      	beq.n	8000756 <main+0x1a6>
 8000750:	2b02      	cmp	r3, #2
 8000752:	d003      	beq.n	800075c <main+0x1ac>
 8000754:	e008      	b.n	8000768 <main+0x1b8>
	  case 1: First_program(); 		//egzekucja pierwszego programu
 8000756:	f7ff fe21 	bl	800039c <First_program>
	  break;
 800075a:	e008      	b.n	800076e <main+0x1be>
	  case 2: Second_program();		//egzekucja drugiego programu
 800075c:	f7ff fe40 	bl	80003e0 <Second_program>
	  break;
 8000760:	e005      	b.n	800076e <main+0x1be>
	  case 3: Third_program();		//egzekucja trzeciego programu
 8000762:	f7ff feed 	bl	8000540 <Third_program>
	  break;
 8000766:	e002      	b.n	800076e <main+0x1be>
	  default:
		  HAL_Delay(50);
 8000768:	2032      	movs	r0, #50	@ 0x32
 800076a:	f000 fcad 	bl	80010c8 <HAL_Delay>
	  if ((HAL_GPIO_ReadPin(USER_BUTTON_1_GPIO_Port, USER_BUTTON_1_Pin) == GPIO_PIN_RESET)&&(state == 0)) {
 800076e:	e746      	b.n	80005fe <main+0x4e>
 8000770:	50000c00 	.word	0x50000c00
 8000774:	50000400 	.word	0x50000400
 8000778:	20000004 	.word	0x20000004
 800077c:	40012c00 	.word	0x40012c00
 8000780:	20000114 	.word	0x20000114
 8000784:	20000008 	.word	0x20000008
 8000788:	20000000 	.word	0x20000000
 800078c:	20000116 	.word	0x20000116
 8000790:	20000115 	.word	0x20000115
 8000794:	200000c8 	.word	0x200000c8
 8000798:	2000007c 	.word	0x2000007c

0800079c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800079c:	b590      	push	{r4, r7, lr}
 800079e:	b093      	sub	sp, #76	@ 0x4c
 80007a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007a2:	2410      	movs	r4, #16
 80007a4:	193b      	adds	r3, r7, r4
 80007a6:	0018      	movs	r0, r3
 80007a8:	2338      	movs	r3, #56	@ 0x38
 80007aa:	001a      	movs	r2, r3
 80007ac:	2100      	movs	r1, #0
 80007ae:	f003 f901 	bl	80039b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007b2:	003b      	movs	r3, r7
 80007b4:	0018      	movs	r0, r3
 80007b6:	2310      	movs	r3, #16
 80007b8:	001a      	movs	r2, r3
 80007ba:	2100      	movs	r1, #0
 80007bc:	f003 f8fa 	bl	80039b4 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007c0:	2380      	movs	r3, #128	@ 0x80
 80007c2:	009b      	lsls	r3, r3, #2
 80007c4:	0018      	movs	r0, r3
 80007c6:	f000 ff6f 	bl	80016a8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007ca:	193b      	adds	r3, r7, r4
 80007cc:	2202      	movs	r2, #2
 80007ce:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007d0:	193b      	adds	r3, r7, r4
 80007d2:	2280      	movs	r2, #128	@ 0x80
 80007d4:	0052      	lsls	r2, r2, #1
 80007d6:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80007d8:	193b      	adds	r3, r7, r4
 80007da:	2200      	movs	r2, #0
 80007dc:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007de:	193b      	adds	r3, r7, r4
 80007e0:	2240      	movs	r2, #64	@ 0x40
 80007e2:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80007e4:	193b      	adds	r3, r7, r4
 80007e6:	2200      	movs	r2, #0
 80007e8:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ea:	193b      	adds	r3, r7, r4
 80007ec:	0018      	movs	r0, r3
 80007ee:	f000 ff9b 	bl	8001728 <HAL_RCC_OscConfig>
 80007f2:	1e03      	subs	r3, r0, #0
 80007f4:	d001      	beq.n	80007fa <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80007f6:	f000 fa4f 	bl	8000c98 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007fa:	003b      	movs	r3, r7
 80007fc:	2207      	movs	r2, #7
 80007fe:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000800:	003b      	movs	r3, r7
 8000802:	2200      	movs	r2, #0
 8000804:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000806:	003b      	movs	r3, r7
 8000808:	2200      	movs	r2, #0
 800080a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800080c:	003b      	movs	r3, r7
 800080e:	2200      	movs	r2, #0
 8000810:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000812:	003b      	movs	r3, r7
 8000814:	2100      	movs	r1, #0
 8000816:	0018      	movs	r0, r3
 8000818:	f001 faa0 	bl	8001d5c <HAL_RCC_ClockConfig>
 800081c:	1e03      	subs	r3, r0, #0
 800081e:	d001      	beq.n	8000824 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000820:	f000 fa3a 	bl	8000c98 <Error_Handler>
  }
}
 8000824:	46c0      	nop			@ (mov r8, r8)
 8000826:	46bd      	mov	sp, r7
 8000828:	b013      	add	sp, #76	@ 0x4c
 800082a:	bd90      	pop	{r4, r7, pc}

0800082c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b09c      	sub	sp, #112	@ 0x70
 8000830:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000832:	2360      	movs	r3, #96	@ 0x60
 8000834:	18fb      	adds	r3, r7, r3
 8000836:	0018      	movs	r0, r3
 8000838:	2310      	movs	r3, #16
 800083a:	001a      	movs	r2, r3
 800083c:	2100      	movs	r1, #0
 800083e:	f003 f8b9 	bl	80039b4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000842:	2354      	movs	r3, #84	@ 0x54
 8000844:	18fb      	adds	r3, r7, r3
 8000846:	0018      	movs	r0, r3
 8000848:	230c      	movs	r3, #12
 800084a:	001a      	movs	r2, r3
 800084c:	2100      	movs	r1, #0
 800084e:	f003 f8b1 	bl	80039b4 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000852:	2338      	movs	r3, #56	@ 0x38
 8000854:	18fb      	adds	r3, r7, r3
 8000856:	0018      	movs	r0, r3
 8000858:	231c      	movs	r3, #28
 800085a:	001a      	movs	r2, r3
 800085c:	2100      	movs	r1, #0
 800085e:	f003 f8a9 	bl	80039b4 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000862:	1d3b      	adds	r3, r7, #4
 8000864:	0018      	movs	r0, r3
 8000866:	2334      	movs	r3, #52	@ 0x34
 8000868:	001a      	movs	r2, r3
 800086a:	2100      	movs	r1, #0
 800086c:	f003 f8a2 	bl	80039b4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000870:	4b4f      	ldr	r3, [pc, #316]	@ (80009b0 <MX_TIM1_Init+0x184>)
 8000872:	4a50      	ldr	r2, [pc, #320]	@ (80009b4 <MX_TIM1_Init+0x188>)
 8000874:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16-1;
 8000876:	4b4e      	ldr	r3, [pc, #312]	@ (80009b0 <MX_TIM1_Init+0x184>)
 8000878:	220f      	movs	r2, #15
 800087a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800087c:	4b4c      	ldr	r3, [pc, #304]	@ (80009b0 <MX_TIM1_Init+0x184>)
 800087e:	2200      	movs	r2, #0
 8000880:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8000882:	4b4b      	ldr	r3, [pc, #300]	@ (80009b0 <MX_TIM1_Init+0x184>)
 8000884:	2263      	movs	r2, #99	@ 0x63
 8000886:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000888:	4b49      	ldr	r3, [pc, #292]	@ (80009b0 <MX_TIM1_Init+0x184>)
 800088a:	2200      	movs	r2, #0
 800088c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800088e:	4b48      	ldr	r3, [pc, #288]	@ (80009b0 <MX_TIM1_Init+0x184>)
 8000890:	2200      	movs	r2, #0
 8000892:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000894:	4b46      	ldr	r3, [pc, #280]	@ (80009b0 <MX_TIM1_Init+0x184>)
 8000896:	2200      	movs	r2, #0
 8000898:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800089a:	4b45      	ldr	r3, [pc, #276]	@ (80009b0 <MX_TIM1_Init+0x184>)
 800089c:	0018      	movs	r0, r3
 800089e:	f001 fd9f 	bl	80023e0 <HAL_TIM_Base_Init>
 80008a2:	1e03      	subs	r3, r0, #0
 80008a4:	d001      	beq.n	80008aa <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 80008a6:	f000 f9f7 	bl	8000c98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008aa:	2160      	movs	r1, #96	@ 0x60
 80008ac:	187b      	adds	r3, r7, r1
 80008ae:	2280      	movs	r2, #128	@ 0x80
 80008b0:	0152      	lsls	r2, r2, #5
 80008b2:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80008b4:	187a      	adds	r2, r7, r1
 80008b6:	4b3e      	ldr	r3, [pc, #248]	@ (80009b0 <MX_TIM1_Init+0x184>)
 80008b8:	0011      	movs	r1, r2
 80008ba:	0018      	movs	r0, r3
 80008bc:	f002 fa50 	bl	8002d60 <HAL_TIM_ConfigClockSource>
 80008c0:	1e03      	subs	r3, r0, #0
 80008c2:	d001      	beq.n	80008c8 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 80008c4:	f000 f9e8 	bl	8000c98 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80008c8:	4b39      	ldr	r3, [pc, #228]	@ (80009b0 <MX_TIM1_Init+0x184>)
 80008ca:	0018      	movs	r0, r3
 80008cc:	f001 fe6a 	bl	80025a4 <HAL_TIM_PWM_Init>
 80008d0:	1e03      	subs	r3, r0, #0
 80008d2:	d001      	beq.n	80008d8 <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 80008d4:	f000 f9e0 	bl	8000c98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008d8:	2154      	movs	r1, #84	@ 0x54
 80008da:	187b      	adds	r3, r7, r1
 80008dc:	2200      	movs	r2, #0
 80008de:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80008e0:	187b      	adds	r3, r7, r1
 80008e2:	2200      	movs	r2, #0
 80008e4:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008e6:	187b      	adds	r3, r7, r1
 80008e8:	2200      	movs	r2, #0
 80008ea:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80008ec:	187a      	adds	r2, r7, r1
 80008ee:	4b30      	ldr	r3, [pc, #192]	@ (80009b0 <MX_TIM1_Init+0x184>)
 80008f0:	0011      	movs	r1, r2
 80008f2:	0018      	movs	r0, r3
 80008f4:	f002 ff3c 	bl	8003770 <HAL_TIMEx_MasterConfigSynchronization>
 80008f8:	1e03      	subs	r3, r0, #0
 80008fa:	d001      	beq.n	8000900 <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 80008fc:	f000 f9cc 	bl	8000c98 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000900:	2138      	movs	r1, #56	@ 0x38
 8000902:	187b      	adds	r3, r7, r1
 8000904:	2260      	movs	r2, #96	@ 0x60
 8000906:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000908:	187b      	adds	r3, r7, r1
 800090a:	2200      	movs	r2, #0
 800090c:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800090e:	187b      	adds	r3, r7, r1
 8000910:	2200      	movs	r2, #0
 8000912:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000914:	187b      	adds	r3, r7, r1
 8000916:	2200      	movs	r2, #0
 8000918:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800091a:	187b      	adds	r3, r7, r1
 800091c:	2200      	movs	r2, #0
 800091e:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000920:	187b      	adds	r3, r7, r1
 8000922:	2200      	movs	r2, #0
 8000924:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000926:	1879      	adds	r1, r7, r1
 8000928:	4b21      	ldr	r3, [pc, #132]	@ (80009b0 <MX_TIM1_Init+0x184>)
 800092a:	220c      	movs	r2, #12
 800092c:	0018      	movs	r0, r3
 800092e:	f002 f917 	bl	8002b60 <HAL_TIM_PWM_ConfigChannel>
 8000932:	1e03      	subs	r3, r0, #0
 8000934:	d001      	beq.n	800093a <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 8000936:	f000 f9af 	bl	8000c98 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800093a:	1d3b      	adds	r3, r7, #4
 800093c:	2200      	movs	r2, #0
 800093e:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000940:	1d3b      	adds	r3, r7, #4
 8000942:	2200      	movs	r2, #0
 8000944:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000946:	1d3b      	adds	r3, r7, #4
 8000948:	2200      	movs	r2, #0
 800094a:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800094c:	1d3b      	adds	r3, r7, #4
 800094e:	2200      	movs	r2, #0
 8000950:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000952:	1d3b      	adds	r3, r7, #4
 8000954:	2200      	movs	r2, #0
 8000956:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000958:	1d3b      	adds	r3, r7, #4
 800095a:	2280      	movs	r2, #128	@ 0x80
 800095c:	0192      	lsls	r2, r2, #6
 800095e:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000960:	1d3b      	adds	r3, r7, #4
 8000962:	2200      	movs	r2, #0
 8000964:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000966:	1d3b      	adds	r3, r7, #4
 8000968:	2200      	movs	r2, #0
 800096a:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800096c:	1d3b      	adds	r3, r7, #4
 800096e:	2200      	movs	r2, #0
 8000970:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000972:	1d3b      	adds	r3, r7, #4
 8000974:	2280      	movs	r2, #128	@ 0x80
 8000976:	0492      	lsls	r2, r2, #18
 8000978:	625a      	str	r2, [r3, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800097a:	1d3b      	adds	r3, r7, #4
 800097c:	2200      	movs	r2, #0
 800097e:	629a      	str	r2, [r3, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000980:	1d3b      	adds	r3, r7, #4
 8000982:	2200      	movs	r2, #0
 8000984:	62da      	str	r2, [r3, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000986:	1d3b      	adds	r3, r7, #4
 8000988:	2200      	movs	r2, #0
 800098a:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800098c:	1d3a      	adds	r2, r7, #4
 800098e:	4b08      	ldr	r3, [pc, #32]	@ (80009b0 <MX_TIM1_Init+0x184>)
 8000990:	0011      	movs	r1, r2
 8000992:	0018      	movs	r0, r3
 8000994:	f002 ff5a 	bl	800384c <HAL_TIMEx_ConfigBreakDeadTime>
 8000998:	1e03      	subs	r3, r0, #0
 800099a:	d001      	beq.n	80009a0 <MX_TIM1_Init+0x174>
  {
    Error_Handler();
 800099c:	f000 f97c 	bl	8000c98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80009a0:	4b03      	ldr	r3, [pc, #12]	@ (80009b0 <MX_TIM1_Init+0x184>)
 80009a2:	0018      	movs	r0, r3
 80009a4:	f000 fa62 	bl	8000e6c <HAL_TIM_MspPostInit>

}
 80009a8:	46c0      	nop			@ (mov r8, r8)
 80009aa:	46bd      	mov	sp, r7
 80009ac:	b01c      	add	sp, #112	@ 0x70
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	2000007c 	.word	0x2000007c
 80009b4:	40012c00 	.word	0x40012c00

080009b8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b088      	sub	sp, #32
 80009bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009be:	2310      	movs	r3, #16
 80009c0:	18fb      	adds	r3, r7, r3
 80009c2:	0018      	movs	r0, r3
 80009c4:	2310      	movs	r3, #16
 80009c6:	001a      	movs	r2, r3
 80009c8:	2100      	movs	r1, #0
 80009ca:	f002 fff3 	bl	80039b4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009ce:	1d3b      	adds	r3, r7, #4
 80009d0:	0018      	movs	r0, r3
 80009d2:	230c      	movs	r3, #12
 80009d4:	001a      	movs	r2, r3
 80009d6:	2100      	movs	r1, #0
 80009d8:	f002 ffec 	bl	80039b4 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80009dc:	4b1e      	ldr	r3, [pc, #120]	@ (8000a58 <MX_TIM3_Init+0xa0>)
 80009de:	4a1f      	ldr	r2, [pc, #124]	@ (8000a5c <MX_TIM3_Init+0xa4>)
 80009e0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 4000-1;
 80009e2:	4b1d      	ldr	r3, [pc, #116]	@ (8000a58 <MX_TIM3_Init+0xa0>)
 80009e4:	4a1e      	ldr	r2, [pc, #120]	@ (8000a60 <MX_TIM3_Init+0xa8>)
 80009e6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009e8:	4b1b      	ldr	r3, [pc, #108]	@ (8000a58 <MX_TIM3_Init+0xa0>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4000-1;
 80009ee:	4b1a      	ldr	r3, [pc, #104]	@ (8000a58 <MX_TIM3_Init+0xa0>)
 80009f0:	4a1b      	ldr	r2, [pc, #108]	@ (8000a60 <MX_TIM3_Init+0xa8>)
 80009f2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009f4:	4b18      	ldr	r3, [pc, #96]	@ (8000a58 <MX_TIM3_Init+0xa0>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009fa:	4b17      	ldr	r3, [pc, #92]	@ (8000a58 <MX_TIM3_Init+0xa0>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000a00:	4b15      	ldr	r3, [pc, #84]	@ (8000a58 <MX_TIM3_Init+0xa0>)
 8000a02:	0018      	movs	r0, r3
 8000a04:	f001 fcec 	bl	80023e0 <HAL_TIM_Base_Init>
 8000a08:	1e03      	subs	r3, r0, #0
 8000a0a:	d001      	beq.n	8000a10 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000a0c:	f000 f944 	bl	8000c98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a10:	2110      	movs	r1, #16
 8000a12:	187b      	adds	r3, r7, r1
 8000a14:	2280      	movs	r2, #128	@ 0x80
 8000a16:	0152      	lsls	r2, r2, #5
 8000a18:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000a1a:	187a      	adds	r2, r7, r1
 8000a1c:	4b0e      	ldr	r3, [pc, #56]	@ (8000a58 <MX_TIM3_Init+0xa0>)
 8000a1e:	0011      	movs	r1, r2
 8000a20:	0018      	movs	r0, r3
 8000a22:	f002 f99d 	bl	8002d60 <HAL_TIM_ConfigClockSource>
 8000a26:	1e03      	subs	r3, r0, #0
 8000a28:	d001      	beq.n	8000a2e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000a2a:	f000 f935 	bl	8000c98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a2e:	1d3b      	adds	r3, r7, #4
 8000a30:	2200      	movs	r2, #0
 8000a32:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a34:	1d3b      	adds	r3, r7, #4
 8000a36:	2200      	movs	r2, #0
 8000a38:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a3a:	1d3a      	adds	r2, r7, #4
 8000a3c:	4b06      	ldr	r3, [pc, #24]	@ (8000a58 <MX_TIM3_Init+0xa0>)
 8000a3e:	0011      	movs	r1, r2
 8000a40:	0018      	movs	r0, r3
 8000a42:	f002 fe95 	bl	8003770 <HAL_TIMEx_MasterConfigSynchronization>
 8000a46:	1e03      	subs	r3, r0, #0
 8000a48:	d001      	beq.n	8000a4e <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000a4a:	f000 f925 	bl	8000c98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000a4e:	46c0      	nop			@ (mov r8, r8)
 8000a50:	46bd      	mov	sp, r7
 8000a52:	b008      	add	sp, #32
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	46c0      	nop			@ (mov r8, r8)
 8000a58:	200000c8 	.word	0x200000c8
 8000a5c:	40000400 	.word	0x40000400
 8000a60:	00000f9f 	.word	0x00000f9f

08000a64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a64:	b590      	push	{r4, r7, lr}
 8000a66:	b08b      	sub	sp, #44	@ 0x2c
 8000a68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a6a:	2414      	movs	r4, #20
 8000a6c:	193b      	adds	r3, r7, r4
 8000a6e:	0018      	movs	r0, r3
 8000a70:	2314      	movs	r3, #20
 8000a72:	001a      	movs	r2, r3
 8000a74:	2100      	movs	r1, #0
 8000a76:	f002 ff9d 	bl	80039b4 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a7a:	4b74      	ldr	r3, [pc, #464]	@ (8000c4c <MX_GPIO_Init+0x1e8>)
 8000a7c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000a7e:	4b73      	ldr	r3, [pc, #460]	@ (8000c4c <MX_GPIO_Init+0x1e8>)
 8000a80:	2104      	movs	r1, #4
 8000a82:	430a      	orrs	r2, r1
 8000a84:	635a      	str	r2, [r3, #52]	@ 0x34
 8000a86:	4b71      	ldr	r3, [pc, #452]	@ (8000c4c <MX_GPIO_Init+0x1e8>)
 8000a88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000a8a:	2204      	movs	r2, #4
 8000a8c:	4013      	ands	r3, r2
 8000a8e:	613b      	str	r3, [r7, #16]
 8000a90:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a92:	4b6e      	ldr	r3, [pc, #440]	@ (8000c4c <MX_GPIO_Init+0x1e8>)
 8000a94:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000a96:	4b6d      	ldr	r3, [pc, #436]	@ (8000c4c <MX_GPIO_Init+0x1e8>)
 8000a98:	2101      	movs	r1, #1
 8000a9a:	430a      	orrs	r2, r1
 8000a9c:	635a      	str	r2, [r3, #52]	@ 0x34
 8000a9e:	4b6b      	ldr	r3, [pc, #428]	@ (8000c4c <MX_GPIO_Init+0x1e8>)
 8000aa0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	4013      	ands	r3, r2
 8000aa6:	60fb      	str	r3, [r7, #12]
 8000aa8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aaa:	4b68      	ldr	r3, [pc, #416]	@ (8000c4c <MX_GPIO_Init+0x1e8>)
 8000aac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000aae:	4b67      	ldr	r3, [pc, #412]	@ (8000c4c <MX_GPIO_Init+0x1e8>)
 8000ab0:	2102      	movs	r1, #2
 8000ab2:	430a      	orrs	r2, r1
 8000ab4:	635a      	str	r2, [r3, #52]	@ 0x34
 8000ab6:	4b65      	ldr	r3, [pc, #404]	@ (8000c4c <MX_GPIO_Init+0x1e8>)
 8000ab8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000aba:	2202      	movs	r2, #2
 8000abc:	4013      	ands	r3, r2
 8000abe:	60bb      	str	r3, [r7, #8]
 8000ac0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ac2:	4b62      	ldr	r3, [pc, #392]	@ (8000c4c <MX_GPIO_Init+0x1e8>)
 8000ac4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000ac6:	4b61      	ldr	r3, [pc, #388]	@ (8000c4c <MX_GPIO_Init+0x1e8>)
 8000ac8:	2108      	movs	r1, #8
 8000aca:	430a      	orrs	r2, r1
 8000acc:	635a      	str	r2, [r3, #52]	@ 0x34
 8000ace:	4b5f      	ldr	r3, [pc, #380]	@ (8000c4c <MX_GPIO_Init+0x1e8>)
 8000ad0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000ad2:	2208      	movs	r2, #8
 8000ad4:	4013      	ands	r3, r2
 8000ad6:	607b      	str	r3, [r7, #4]
 8000ad8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|SevSegE_Pin|SevSegD_Pin|D4_Pin
 8000ada:	23fc      	movs	r3, #252	@ 0xfc
 8000adc:	00d9      	lsls	r1, r3, #3
 8000ade:	23a0      	movs	r3, #160	@ 0xa0
 8000ae0:	05db      	lsls	r3, r3, #23
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	0018      	movs	r0, r3
 8000ae6:	f000 fd72 	bl	80015ce <HAL_GPIO_WritePin>
                          |SevSegG_Pin|D3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SevSegB_Pin|BUZZER_Pin|SevSegC_Pin, GPIO_PIN_RESET);
 8000aea:	4b59      	ldr	r3, [pc, #356]	@ (8000c50 <MX_GPIO_Init+0x1ec>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	21b0      	movs	r1, #176	@ 0xb0
 8000af0:	0018      	movs	r0, r3
 8000af2:	f000 fd6c 	bl	80015ce <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD10_Pin|D1_Pin|D2_Pin
 8000af6:	4957      	ldr	r1, [pc, #348]	@ (8000c54 <MX_GPIO_Init+0x1f0>)
 8000af8:	4b57      	ldr	r3, [pc, #348]	@ (8000c58 <MX_GPIO_Init+0x1f4>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	0018      	movs	r0, r3
 8000afe:	f000 fd66 	bl	80015ce <HAL_GPIO_WritePin>
                          |SevSegA_Pin|SevSegF_Pin|LD3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8000b02:	2380      	movs	r3, #128	@ 0x80
 8000b04:	009b      	lsls	r3, r3, #2
 8000b06:	4855      	ldr	r0, [pc, #340]	@ (8000c5c <MX_GPIO_Init+0x1f8>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	0019      	movs	r1, r3
 8000b0c:	f000 fd5f 	bl	80015ce <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8000b10:	193b      	adds	r3, r7, r4
 8000b12:	2280      	movs	r2, #128	@ 0x80
 8000b14:	0192      	lsls	r2, r2, #6
 8000b16:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b18:	193b      	adds	r3, r7, r4
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b1e:	193b      	adds	r3, r7, r4
 8000b20:	2201      	movs	r2, #1
 8000b22:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000b24:	193b      	adds	r3, r7, r4
 8000b26:	4a4a      	ldr	r2, [pc, #296]	@ (8000c50 <MX_GPIO_Init+0x1ec>)
 8000b28:	0019      	movs	r1, r3
 8000b2a:	0010      	movs	r0, r2
 8000b2c:	f000 fbce 	bl	80012cc <HAL_GPIO_Init>

  /*Configure GPIO pin : RESET_BUTTON_Pin */
  GPIO_InitStruct.Pin = RESET_BUTTON_Pin;
 8000b30:	0021      	movs	r1, r4
 8000b32:	187b      	adds	r3, r7, r1
 8000b34:	2201      	movs	r2, #1
 8000b36:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b38:	187b      	adds	r3, r7, r1
 8000b3a:	2288      	movs	r2, #136	@ 0x88
 8000b3c:	0352      	lsls	r2, r2, #13
 8000b3e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b40:	187b      	adds	r3, r7, r1
 8000b42:	2201      	movs	r2, #1
 8000b44:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(RESET_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000b46:	000c      	movs	r4, r1
 8000b48:	187b      	adds	r3, r7, r1
 8000b4a:	4a41      	ldr	r2, [pc, #260]	@ (8000c50 <MX_GPIO_Init+0x1ec>)
 8000b4c:	0019      	movs	r1, r3
 8000b4e:	0010      	movs	r0, r2
 8000b50:	f000 fbbc 	bl	80012cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 SevSegE_Pin SevSegD_Pin D4_Pin
                           SevSegG_Pin D3_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_5|SevSegE_Pin|SevSegD_Pin|D4_Pin
 8000b54:	0021      	movs	r1, r4
 8000b56:	187b      	adds	r3, r7, r1
 8000b58:	22fc      	movs	r2, #252	@ 0xfc
 8000b5a:	00d2      	lsls	r2, r2, #3
 8000b5c:	601a      	str	r2, [r3, #0]
                          |SevSegG_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b5e:	000c      	movs	r4, r1
 8000b60:	193b      	adds	r3, r7, r4
 8000b62:	2201      	movs	r2, #1
 8000b64:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b66:	193b      	adds	r3, r7, r4
 8000b68:	2200      	movs	r2, #0
 8000b6a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b6c:	193b      	adds	r3, r7, r4
 8000b6e:	2200      	movs	r2, #0
 8000b70:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b72:	193a      	adds	r2, r7, r4
 8000b74:	23a0      	movs	r3, #160	@ 0xa0
 8000b76:	05db      	lsls	r3, r3, #23
 8000b78:	0011      	movs	r1, r2
 8000b7a:	0018      	movs	r0, r3
 8000b7c:	f000 fba6 	bl	80012cc <HAL_GPIO_Init>

  /*Configure GPIO pins : SevSegB_Pin BUZZER_Pin SevSegC_Pin */
  GPIO_InitStruct.Pin = SevSegB_Pin|BUZZER_Pin|SevSegC_Pin;
 8000b80:	193b      	adds	r3, r7, r4
 8000b82:	22b0      	movs	r2, #176	@ 0xb0
 8000b84:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b86:	193b      	adds	r3, r7, r4
 8000b88:	2201      	movs	r2, #1
 8000b8a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8c:	193b      	adds	r3, r7, r4
 8000b8e:	2200      	movs	r2, #0
 8000b90:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b92:	193b      	adds	r3, r7, r4
 8000b94:	2200      	movs	r2, #0
 8000b96:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b98:	193b      	adds	r3, r7, r4
 8000b9a:	4a2d      	ldr	r2, [pc, #180]	@ (8000c50 <MX_GPIO_Init+0x1ec>)
 8000b9c:	0019      	movs	r1, r3
 8000b9e:	0010      	movs	r0, r2
 8000ba0:	f000 fb94 	bl	80012cc <HAL_GPIO_Init>

  /*Configure GPIO pins : USER_BUTTON_3_Pin USER_BUTTON_2_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_3_Pin|USER_BUTTON_2_Pin;
 8000ba4:	193b      	adds	r3, r7, r4
 8000ba6:	4a2e      	ldr	r2, [pc, #184]	@ (8000c60 <MX_GPIO_Init+0x1fc>)
 8000ba8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000baa:	193b      	adds	r3, r7, r4
 8000bac:	2200      	movs	r2, #0
 8000bae:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bb0:	193b      	adds	r3, r7, r4
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bb6:	193b      	adds	r3, r7, r4
 8000bb8:	4a27      	ldr	r2, [pc, #156]	@ (8000c58 <MX_GPIO_Init+0x1f4>)
 8000bba:	0019      	movs	r1, r3
 8000bbc:	0010      	movs	r0, r2
 8000bbe:	f000 fb85 	bl	80012cc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD10_Pin D1_Pin D2_Pin
                           SevSegA_Pin SevSegF_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD10_Pin|D1_Pin|D2_Pin
 8000bc2:	193b      	adds	r3, r7, r4
 8000bc4:	4a23      	ldr	r2, [pc, #140]	@ (8000c54 <MX_GPIO_Init+0x1f0>)
 8000bc6:	601a      	str	r2, [r3, #0]
                          |SevSegA_Pin|SevSegF_Pin|LD3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bc8:	193b      	adds	r3, r7, r4
 8000bca:	2201      	movs	r2, #1
 8000bcc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bce:	193b      	adds	r3, r7, r4
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd4:	193b      	adds	r3, r7, r4
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bda:	193b      	adds	r3, r7, r4
 8000bdc:	4a1e      	ldr	r2, [pc, #120]	@ (8000c58 <MX_GPIO_Init+0x1f4>)
 8000bde:	0019      	movs	r1, r3
 8000be0:	0010      	movs	r0, r2
 8000be2:	f000 fb73 	bl	80012cc <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_BUTTON_1_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_1_Pin;
 8000be6:	0021      	movs	r1, r4
 8000be8:	187b      	adds	r3, r7, r1
 8000bea:	2280      	movs	r2, #128	@ 0x80
 8000bec:	0052      	lsls	r2, r2, #1
 8000bee:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bf0:	000c      	movs	r4, r1
 8000bf2:	193b      	adds	r3, r7, r4
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bf8:	193b      	adds	r3, r7, r4
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(USER_BUTTON_1_GPIO_Port, &GPIO_InitStruct);
 8000bfe:	193b      	adds	r3, r7, r4
 8000c00:	4a16      	ldr	r2, [pc, #88]	@ (8000c5c <MX_GPIO_Init+0x1f8>)
 8000c02:	0019      	movs	r1, r3
 8000c04:	0010      	movs	r0, r2
 8000c06:	f000 fb61 	bl	80012cc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD1_Pin */
  GPIO_InitStruct.Pin = LD1_Pin;
 8000c0a:	0021      	movs	r1, r4
 8000c0c:	187b      	adds	r3, r7, r1
 8000c0e:	2280      	movs	r2, #128	@ 0x80
 8000c10:	0092      	lsls	r2, r2, #2
 8000c12:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c14:	187b      	adds	r3, r7, r1
 8000c16:	2201      	movs	r2, #1
 8000c18:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1a:	187b      	adds	r3, r7, r1
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c20:	187b      	adds	r3, r7, r1
 8000c22:	2200      	movs	r2, #0
 8000c24:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 8000c26:	187b      	adds	r3, r7, r1
 8000c28:	4a0c      	ldr	r2, [pc, #48]	@ (8000c5c <MX_GPIO_Init+0x1f8>)
 8000c2a:	0019      	movs	r1, r3
 8000c2c:	0010      	movs	r0, r2
 8000c2e:	f000 fb4d 	bl	80012cc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8000c32:	2200      	movs	r2, #0
 8000c34:	2100      	movs	r1, #0
 8000c36:	2005      	movs	r0, #5
 8000c38:	f000 fb16 	bl	8001268 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8000c3c:	2005      	movs	r0, #5
 8000c3e:	f000 fb28 	bl	8001292 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c42:	46c0      	nop			@ (mov r8, r8)
 8000c44:	46bd      	mov	sp, r7
 8000c46:	b00b      	add	sp, #44	@ 0x2c
 8000c48:	bd90      	pop	{r4, r7, pc}
 8000c4a:	46c0      	nop			@ (mov r8, r8)
 8000c4c:	40021000 	.word	0x40021000
 8000c50:	50000800 	.word	0x50000800
 8000c54:	00006478 	.word	0x00006478
 8000c58:	50000400 	.word	0x50000400
 8000c5c:	50000c00 	.word	0x50000c00
 8000c60:	00008004 	.word	0x00008004

08000c64 <HAL_GPIO_EXTI_Rising_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b082      	sub	sp, #8
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	0002      	movs	r2, r0
 8000c6c:	1dbb      	adds	r3, r7, #6
 8000c6e:	801a      	strh	r2, [r3, #0]
	if (GPIO_Pin == GPIO_PIN_0) {
 8000c70:	1dbb      	adds	r3, r7, #6
 8000c72:	881b      	ldrh	r3, [r3, #0]
 8000c74:	2b01      	cmp	r3, #1
 8000c76:	d108      	bne.n	8000c8a <HAL_GPIO_EXTI_Rising_Callback+0x26>
		interruptFlag = 1;
 8000c78:	4b06      	ldr	r3, [pc, #24]	@ (8000c94 <HAL_GPIO_EXTI_Rising_Callback+0x30>)
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000c7e:	23a0      	movs	r3, #160	@ 0xa0
 8000c80:	05db      	lsls	r3, r3, #23
 8000c82:	2120      	movs	r1, #32
 8000c84:	0018      	movs	r0, r3
 8000c86:	f000 fcbf 	bl	8001608 <HAL_GPIO_TogglePin>
	  }
}
 8000c8a:	46c0      	nop			@ (mov r8, r8)
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	b002      	add	sp, #8
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	46c0      	nop			@ (mov r8, r8)
 8000c94:	20000115 	.word	0x20000115

08000c98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c9c:	b672      	cpsid	i
}
 8000c9e:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, 0);
 8000ca0:	2380      	movs	r3, #128	@ 0x80
 8000ca2:	009b      	lsls	r3, r3, #2
 8000ca4:	4819      	ldr	r0, [pc, #100]	@ (8000d0c <Error_Handler+0x74>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	0019      	movs	r1, r3
 8000caa:	f000 fc90 	bl	80015ce <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8000cae:	4b18      	ldr	r3, [pc, #96]	@ (8000d10 <Error_Handler+0x78>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	2140      	movs	r1, #64	@ 0x40
 8000cb4:	0018      	movs	r0, r3
 8000cb6:	f000 fc8a 	bl	80015ce <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LD10_GPIO_Port, LD10_Pin, 1);
 8000cba:	2380      	movs	r3, #128	@ 0x80
 8000cbc:	019b      	lsls	r3, r3, #6
 8000cbe:	4814      	ldr	r0, [pc, #80]	@ (8000d10 <Error_Handler+0x78>)
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	0019      	movs	r1, r3
 8000cc4:	f000 fc83 	bl	80015ce <HAL_GPIO_WritePin>
  SevenSegment_Update(6);
 8000cc8:	2006      	movs	r0, #6
 8000cca:	f7ff faa7 	bl	800021c <SevenSegment_Update>
  HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, GPIO_PIN_SET);
 8000cce:	4b10      	ldr	r3, [pc, #64]	@ (8000d10 <Error_Handler+0x78>)
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	2108      	movs	r1, #8
 8000cd4:	0018      	movs	r0, r3
 8000cd6:	f000 fc7a 	bl	80015ce <HAL_GPIO_WritePin>
  SevenSegment_Update(6);
 8000cda:	2006      	movs	r0, #6
 8000cdc:	f7ff fa9e 	bl	800021c <SevenSegment_Update>
  HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, GPIO_PIN_SET);
 8000ce0:	2380      	movs	r3, #128	@ 0x80
 8000ce2:	00d9      	lsls	r1, r3, #3
 8000ce4:	23a0      	movs	r3, #160	@ 0xa0
 8000ce6:	05db      	lsls	r3, r3, #23
 8000ce8:	2201      	movs	r2, #1
 8000cea:	0018      	movs	r0, r3
 8000cec:	f000 fc6f 	bl	80015ce <HAL_GPIO_WritePin>
  SevenSegment_Update(6);
 8000cf0:	2006      	movs	r0, #6
 8000cf2:	f7ff fa93 	bl	800021c <SevenSegment_Update>
  HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, GPIO_PIN_SET);
 8000cf6:	2380      	movs	r3, #128	@ 0x80
 8000cf8:	0059      	lsls	r1, r3, #1
 8000cfa:	23a0      	movs	r3, #160	@ 0xa0
 8000cfc:	05db      	lsls	r3, r3, #23
 8000cfe:	2201      	movs	r2, #1
 8000d00:	0018      	movs	r0, r3
 8000d02:	f000 fc64 	bl	80015ce <HAL_GPIO_WritePin>
  while (1){}
 8000d06:	46c0      	nop			@ (mov r8, r8)
 8000d08:	e7fd      	b.n	8000d06 <Error_Handler+0x6e>
 8000d0a:	46c0      	nop			@ (mov r8, r8)
 8000d0c:	50000c00 	.word	0x50000c00
 8000d10:	50000400 	.word	0x50000400

08000d14 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d1a:	4b0f      	ldr	r3, [pc, #60]	@ (8000d58 <HAL_MspInit+0x44>)
 8000d1c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000d1e:	4b0e      	ldr	r3, [pc, #56]	@ (8000d58 <HAL_MspInit+0x44>)
 8000d20:	2101      	movs	r1, #1
 8000d22:	430a      	orrs	r2, r1
 8000d24:	641a      	str	r2, [r3, #64]	@ 0x40
 8000d26:	4b0c      	ldr	r3, [pc, #48]	@ (8000d58 <HAL_MspInit+0x44>)
 8000d28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	4013      	ands	r3, r2
 8000d2e:	607b      	str	r3, [r7, #4]
 8000d30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d32:	4b09      	ldr	r3, [pc, #36]	@ (8000d58 <HAL_MspInit+0x44>)
 8000d34:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000d36:	4b08      	ldr	r3, [pc, #32]	@ (8000d58 <HAL_MspInit+0x44>)
 8000d38:	2180      	movs	r1, #128	@ 0x80
 8000d3a:	0549      	lsls	r1, r1, #21
 8000d3c:	430a      	orrs	r2, r1
 8000d3e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000d40:	4b05      	ldr	r3, [pc, #20]	@ (8000d58 <HAL_MspInit+0x44>)
 8000d42:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000d44:	2380      	movs	r3, #128	@ 0x80
 8000d46:	055b      	lsls	r3, r3, #21
 8000d48:	4013      	ands	r3, r2
 8000d4a:	603b      	str	r3, [r7, #0]
 8000d4c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d4e:	46c0      	nop			@ (mov r8, r8)
 8000d50:	46bd      	mov	sp, r7
 8000d52:	b002      	add	sp, #8
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	46c0      	nop			@ (mov r8, r8)
 8000d58:	40021000 	.word	0x40021000

08000d5c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d5c:	b590      	push	{r4, r7, lr}
 8000d5e:	b099      	sub	sp, #100	@ 0x64
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d64:	234c      	movs	r3, #76	@ 0x4c
 8000d66:	18fb      	adds	r3, r7, r3
 8000d68:	0018      	movs	r0, r3
 8000d6a:	2314      	movs	r3, #20
 8000d6c:	001a      	movs	r2, r3
 8000d6e:	2100      	movs	r1, #0
 8000d70:	f002 fe20 	bl	80039b4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d74:	2418      	movs	r4, #24
 8000d76:	193b      	adds	r3, r7, r4
 8000d78:	0018      	movs	r0, r3
 8000d7a:	2334      	movs	r3, #52	@ 0x34
 8000d7c:	001a      	movs	r2, r3
 8000d7e:	2100      	movs	r1, #0
 8000d80:	f002 fe18 	bl	80039b4 <memset>
  if(htim_base->Instance==TIM1)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a34      	ldr	r2, [pc, #208]	@ (8000e5c <HAL_TIM_Base_MspInit+0x100>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d148      	bne.n	8000e20 <HAL_TIM_Base_MspInit+0xc4>

  /* USER CODE END TIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8000d8e:	193b      	adds	r3, r7, r4
 8000d90:	2280      	movs	r2, #128	@ 0x80
 8000d92:	0392      	lsls	r2, r2, #14
 8000d94:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 8000d96:	193b      	adds	r3, r7, r4
 8000d98:	2200      	movs	r2, #0
 8000d9a:	629a      	str	r2, [r3, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d9c:	193b      	adds	r3, r7, r4
 8000d9e:	0018      	movs	r0, r3
 8000da0:	f001 f966 	bl	8002070 <HAL_RCCEx_PeriphCLKConfig>
 8000da4:	1e03      	subs	r3, r0, #0
 8000da6:	d001      	beq.n	8000dac <HAL_TIM_Base_MspInit+0x50>
    {
      Error_Handler();
 8000da8:	f7ff ff76 	bl	8000c98 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000dac:	4b2c      	ldr	r3, [pc, #176]	@ (8000e60 <HAL_TIM_Base_MspInit+0x104>)
 8000dae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000db0:	4b2b      	ldr	r3, [pc, #172]	@ (8000e60 <HAL_TIM_Base_MspInit+0x104>)
 8000db2:	2180      	movs	r1, #128	@ 0x80
 8000db4:	0109      	lsls	r1, r1, #4
 8000db6:	430a      	orrs	r2, r1
 8000db8:	641a      	str	r2, [r3, #64]	@ 0x40
 8000dba:	4b29      	ldr	r3, [pc, #164]	@ (8000e60 <HAL_TIM_Base_MspInit+0x104>)
 8000dbc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000dbe:	2380      	movs	r3, #128	@ 0x80
 8000dc0:	011b      	lsls	r3, r3, #4
 8000dc2:	4013      	ands	r3, r2
 8000dc4:	617b      	str	r3, [r7, #20]
 8000dc6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dc8:	4b25      	ldr	r3, [pc, #148]	@ (8000e60 <HAL_TIM_Base_MspInit+0x104>)
 8000dca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000dcc:	4b24      	ldr	r3, [pc, #144]	@ (8000e60 <HAL_TIM_Base_MspInit+0x104>)
 8000dce:	2104      	movs	r1, #4
 8000dd0:	430a      	orrs	r2, r1
 8000dd2:	635a      	str	r2, [r3, #52]	@ 0x34
 8000dd4:	4b22      	ldr	r3, [pc, #136]	@ (8000e60 <HAL_TIM_Base_MspInit+0x104>)
 8000dd6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000dd8:	2204      	movs	r2, #4
 8000dda:	4013      	ands	r3, r2
 8000ddc:	613b      	str	r3, [r7, #16]
 8000dde:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PC10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000de0:	214c      	movs	r1, #76	@ 0x4c
 8000de2:	187b      	adds	r3, r7, r1
 8000de4:	2280      	movs	r2, #128	@ 0x80
 8000de6:	00d2      	lsls	r2, r2, #3
 8000de8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dea:	187b      	adds	r3, r7, r1
 8000dec:	2202      	movs	r2, #2
 8000dee:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df0:	187b      	adds	r3, r7, r1
 8000df2:	2200      	movs	r2, #0
 8000df4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df6:	187b      	adds	r3, r7, r1
 8000df8:	2200      	movs	r2, #0
 8000dfa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000dfc:	187b      	adds	r3, r7, r1
 8000dfe:	2202      	movs	r2, #2
 8000e00:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e02:	187b      	adds	r3, r7, r1
 8000e04:	4a17      	ldr	r2, [pc, #92]	@ (8000e64 <HAL_TIM_Base_MspInit+0x108>)
 8000e06:	0019      	movs	r1, r3
 8000e08:	0010      	movs	r0, r2
 8000e0a:	f000 fa5f 	bl	80012cc <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 8000e0e:	2200      	movs	r2, #0
 8000e10:	2100      	movs	r1, #0
 8000e12:	200d      	movs	r0, #13
 8000e14:	f000 fa28 	bl	8001268 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8000e18:	200d      	movs	r0, #13
 8000e1a:	f000 fa3a 	bl	8001292 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000e1e:	e018      	b.n	8000e52 <HAL_TIM_Base_MspInit+0xf6>
  else if(htim_base->Instance==TIM3)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a10      	ldr	r2, [pc, #64]	@ (8000e68 <HAL_TIM_Base_MspInit+0x10c>)
 8000e26:	4293      	cmp	r3, r2
 8000e28:	d113      	bne.n	8000e52 <HAL_TIM_Base_MspInit+0xf6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000e2a:	4b0d      	ldr	r3, [pc, #52]	@ (8000e60 <HAL_TIM_Base_MspInit+0x104>)
 8000e2c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000e2e:	4b0c      	ldr	r3, [pc, #48]	@ (8000e60 <HAL_TIM_Base_MspInit+0x104>)
 8000e30:	2102      	movs	r1, #2
 8000e32:	430a      	orrs	r2, r1
 8000e34:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000e36:	4b0a      	ldr	r3, [pc, #40]	@ (8000e60 <HAL_TIM_Base_MspInit+0x104>)
 8000e38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000e3a:	2202      	movs	r2, #2
 8000e3c:	4013      	ands	r3, r2
 8000e3e:	60fb      	str	r3, [r7, #12]
 8000e40:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000e42:	2200      	movs	r2, #0
 8000e44:	2100      	movs	r1, #0
 8000e46:	2010      	movs	r0, #16
 8000e48:	f000 fa0e 	bl	8001268 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000e4c:	2010      	movs	r0, #16
 8000e4e:	f000 fa20 	bl	8001292 <HAL_NVIC_EnableIRQ>
}
 8000e52:	46c0      	nop			@ (mov r8, r8)
 8000e54:	46bd      	mov	sp, r7
 8000e56:	b019      	add	sp, #100	@ 0x64
 8000e58:	bd90      	pop	{r4, r7, pc}
 8000e5a:	46c0      	nop			@ (mov r8, r8)
 8000e5c:	40012c00 	.word	0x40012c00
 8000e60:	40021000 	.word	0x40021000
 8000e64:	50000800 	.word	0x50000800
 8000e68:	40000400 	.word	0x40000400

08000e6c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000e6c:	b590      	push	{r4, r7, lr}
 8000e6e:	b089      	sub	sp, #36	@ 0x24
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e74:	240c      	movs	r4, #12
 8000e76:	193b      	adds	r3, r7, r4
 8000e78:	0018      	movs	r0, r3
 8000e7a:	2314      	movs	r3, #20
 8000e7c:	001a      	movs	r2, r3
 8000e7e:	2100      	movs	r1, #0
 8000e80:	f002 fd98 	bl	80039b4 <memset>
  if(htim->Instance==TIM1)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a14      	ldr	r2, [pc, #80]	@ (8000edc <HAL_TIM_MspPostInit+0x70>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d122      	bne.n	8000ed4 <HAL_TIM_MspPostInit+0x68>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e8e:	4b14      	ldr	r3, [pc, #80]	@ (8000ee0 <HAL_TIM_MspPostInit+0x74>)
 8000e90:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000e92:	4b13      	ldr	r3, [pc, #76]	@ (8000ee0 <HAL_TIM_MspPostInit+0x74>)
 8000e94:	2104      	movs	r1, #4
 8000e96:	430a      	orrs	r2, r1
 8000e98:	635a      	str	r2, [r3, #52]	@ 0x34
 8000e9a:	4b11      	ldr	r3, [pc, #68]	@ (8000ee0 <HAL_TIM_MspPostInit+0x74>)
 8000e9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000e9e:	2204      	movs	r2, #4
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	60bb      	str	r3, [r7, #8]
 8000ea4:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PC11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000ea6:	193b      	adds	r3, r7, r4
 8000ea8:	2280      	movs	r2, #128	@ 0x80
 8000eaa:	0112      	lsls	r2, r2, #4
 8000eac:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eae:	0021      	movs	r1, r4
 8000eb0:	187b      	adds	r3, r7, r1
 8000eb2:	2202      	movs	r2, #2
 8000eb4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb6:	187b      	adds	r3, r7, r1
 8000eb8:	2200      	movs	r2, #0
 8000eba:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ebc:	187b      	adds	r3, r7, r1
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000ec2:	187b      	adds	r3, r7, r1
 8000ec4:	2202      	movs	r2, #2
 8000ec6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ec8:	187b      	adds	r3, r7, r1
 8000eca:	4a06      	ldr	r2, [pc, #24]	@ (8000ee4 <HAL_TIM_MspPostInit+0x78>)
 8000ecc:	0019      	movs	r1, r3
 8000ece:	0010      	movs	r0, r2
 8000ed0:	f000 f9fc 	bl	80012cc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000ed4:	46c0      	nop			@ (mov r8, r8)
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	b009      	add	sp, #36	@ 0x24
 8000eda:	bd90      	pop	{r4, r7, pc}
 8000edc:	40012c00 	.word	0x40012c00
 8000ee0:	40021000 	.word	0x40021000
 8000ee4:	50000800 	.word	0x50000800

08000ee8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000eec:	46c0      	nop			@ (mov r8, r8)
 8000eee:	e7fd      	b.n	8000eec <NMI_Handler+0x4>

08000ef0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ef4:	46c0      	nop			@ (mov r8, r8)
 8000ef6:	e7fd      	b.n	8000ef4 <HardFault_Handler+0x4>

08000ef8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000efc:	46c0      	nop			@ (mov r8, r8)
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}

08000f02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f02:	b580      	push	{r7, lr}
 8000f04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f06:	46c0      	nop			@ (mov r8, r8)
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}

08000f0c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f10:	f000 f8be 	bl	8001090 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f14:	46c0      	nop			@ (mov r8, r8)
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}

08000f1a <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8000f1a:	b580      	push	{r7, lr}
 8000f1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RESET_BUTTON_Pin);
 8000f1e:	2001      	movs	r0, #1
 8000f20:	f000 fb8e 	bl	8001640 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8000f24:	46c0      	nop			@ (mov r8, r8)
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
	...

08000f2c <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000f30:	4b03      	ldr	r3, [pc, #12]	@ (8000f40 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 8000f32:	0018      	movs	r0, r3
 8000f34:	f001 fd0c 	bl	8002950 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8000f38:	46c0      	nop			@ (mov r8, r8)
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	46c0      	nop			@ (mov r8, r8)
 8000f40:	2000007c 	.word	0x2000007c

08000f44 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000f48:	4b03      	ldr	r3, [pc, #12]	@ (8000f58 <TIM3_IRQHandler+0x14>)
 8000f4a:	0018      	movs	r0, r3
 8000f4c:	f001 fd00 	bl	8002950 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000f50:	46c0      	nop			@ (mov r8, r8)
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	46c0      	nop			@ (mov r8, r8)
 8000f58:	200000c8 	.word	0x200000c8

08000f5c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f60:	46c0      	nop			@ (mov r8, r8)
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
	...

08000f68 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f68:	480d      	ldr	r0, [pc, #52]	@ (8000fa0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f6a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f6c:	f7ff fff6 	bl	8000f5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f70:	480c      	ldr	r0, [pc, #48]	@ (8000fa4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f72:	490d      	ldr	r1, [pc, #52]	@ (8000fa8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f74:	4a0d      	ldr	r2, [pc, #52]	@ (8000fac <LoopForever+0xe>)
  movs r3, #0
 8000f76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f78:	e002      	b.n	8000f80 <LoopCopyDataInit>

08000f7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f7e:	3304      	adds	r3, #4

08000f80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f84:	d3f9      	bcc.n	8000f7a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f86:	4a0a      	ldr	r2, [pc, #40]	@ (8000fb0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f88:	4c0a      	ldr	r4, [pc, #40]	@ (8000fb4 <LoopForever+0x16>)
  movs r3, #0
 8000f8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f8c:	e001      	b.n	8000f92 <LoopFillZerobss>

08000f8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f90:	3204      	adds	r2, #4

08000f92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f94:	d3fb      	bcc.n	8000f8e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000f96:	f002 fd15 	bl	80039c4 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000f9a:	f7ff fb09 	bl	80005b0 <main>

08000f9e <LoopForever>:

LoopForever:
  b LoopForever
 8000f9e:	e7fe      	b.n	8000f9e <LoopForever>
  ldr   r0, =_estack
 8000fa0:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000fa4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fa8:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000fac:	08003ac0 	.word	0x08003ac0
  ldr r2, =_sbss
 8000fb0:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000fb4:	20000120 	.word	0x20000120

08000fb8 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000fb8:	e7fe      	b.n	8000fb8 <ADC1_COMP_IRQHandler>
	...

08000fbc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000fc2:	1dfb      	adds	r3, r7, #7
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fc8:	4b0b      	ldr	r3, [pc, #44]	@ (8000ff8 <HAL_Init+0x3c>)
 8000fca:	681a      	ldr	r2, [r3, #0]
 8000fcc:	4b0a      	ldr	r3, [pc, #40]	@ (8000ff8 <HAL_Init+0x3c>)
 8000fce:	2180      	movs	r1, #128	@ 0x80
 8000fd0:	0049      	lsls	r1, r1, #1
 8000fd2:	430a      	orrs	r2, r1
 8000fd4:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fd6:	2003      	movs	r0, #3
 8000fd8:	f000 f810 	bl	8000ffc <HAL_InitTick>
 8000fdc:	1e03      	subs	r3, r0, #0
 8000fde:	d003      	beq.n	8000fe8 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000fe0:	1dfb      	adds	r3, r7, #7
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	701a      	strb	r2, [r3, #0]
 8000fe6:	e001      	b.n	8000fec <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000fe8:	f7ff fe94 	bl	8000d14 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000fec:	1dfb      	adds	r3, r7, #7
 8000fee:	781b      	ldrb	r3, [r3, #0]
}
 8000ff0:	0018      	movs	r0, r3
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	b002      	add	sp, #8
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	40022000 	.word	0x40022000

08000ffc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ffc:	b590      	push	{r4, r7, lr}
 8000ffe:	b085      	sub	sp, #20
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001004:	230f      	movs	r3, #15
 8001006:	18fb      	adds	r3, r7, r3
 8001008:	2200      	movs	r2, #0
 800100a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 800100c:	4b1d      	ldr	r3, [pc, #116]	@ (8001084 <HAL_InitTick+0x88>)
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d02b      	beq.n	800106c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001014:	4b1c      	ldr	r3, [pc, #112]	@ (8001088 <HAL_InitTick+0x8c>)
 8001016:	681c      	ldr	r4, [r3, #0]
 8001018:	4b1a      	ldr	r3, [pc, #104]	@ (8001084 <HAL_InitTick+0x88>)
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	0019      	movs	r1, r3
 800101e:	23fa      	movs	r3, #250	@ 0xfa
 8001020:	0098      	lsls	r0, r3, #2
 8001022:	f7ff f86f 	bl	8000104 <__udivsi3>
 8001026:	0003      	movs	r3, r0
 8001028:	0019      	movs	r1, r3
 800102a:	0020      	movs	r0, r4
 800102c:	f7ff f86a 	bl	8000104 <__udivsi3>
 8001030:	0003      	movs	r3, r0
 8001032:	0018      	movs	r0, r3
 8001034:	f000 f93d 	bl	80012b2 <HAL_SYSTICK_Config>
 8001038:	1e03      	subs	r3, r0, #0
 800103a:	d112      	bne.n	8001062 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2b03      	cmp	r3, #3
 8001040:	d80a      	bhi.n	8001058 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001042:	6879      	ldr	r1, [r7, #4]
 8001044:	2301      	movs	r3, #1
 8001046:	425b      	negs	r3, r3
 8001048:	2200      	movs	r2, #0
 800104a:	0018      	movs	r0, r3
 800104c:	f000 f90c 	bl	8001268 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001050:	4b0e      	ldr	r3, [pc, #56]	@ (800108c <HAL_InitTick+0x90>)
 8001052:	687a      	ldr	r2, [r7, #4]
 8001054:	601a      	str	r2, [r3, #0]
 8001056:	e00d      	b.n	8001074 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001058:	230f      	movs	r3, #15
 800105a:	18fb      	adds	r3, r7, r3
 800105c:	2201      	movs	r2, #1
 800105e:	701a      	strb	r2, [r3, #0]
 8001060:	e008      	b.n	8001074 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001062:	230f      	movs	r3, #15
 8001064:	18fb      	adds	r3, r7, r3
 8001066:	2201      	movs	r2, #1
 8001068:	701a      	strb	r2, [r3, #0]
 800106a:	e003      	b.n	8001074 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 800106c:	230f      	movs	r3, #15
 800106e:	18fb      	adds	r3, r7, r3
 8001070:	2201      	movs	r2, #1
 8001072:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001074:	230f      	movs	r3, #15
 8001076:	18fb      	adds	r3, r7, r3
 8001078:	781b      	ldrb	r3, [r3, #0]
}
 800107a:	0018      	movs	r0, r3
 800107c:	46bd      	mov	sp, r7
 800107e:	b005      	add	sp, #20
 8001080:	bd90      	pop	{r4, r7, pc}
 8001082:	46c0      	nop			@ (mov r8, r8)
 8001084:	2000005c 	.word	0x2000005c
 8001088:	20000054 	.word	0x20000054
 800108c:	20000058 	.word	0x20000058

08001090 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001094:	4b05      	ldr	r3, [pc, #20]	@ (80010ac <HAL_IncTick+0x1c>)
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	001a      	movs	r2, r3
 800109a:	4b05      	ldr	r3, [pc, #20]	@ (80010b0 <HAL_IncTick+0x20>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	18d2      	adds	r2, r2, r3
 80010a0:	4b03      	ldr	r3, [pc, #12]	@ (80010b0 <HAL_IncTick+0x20>)
 80010a2:	601a      	str	r2, [r3, #0]
}
 80010a4:	46c0      	nop			@ (mov r8, r8)
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	46c0      	nop			@ (mov r8, r8)
 80010ac:	2000005c 	.word	0x2000005c
 80010b0:	2000011c 	.word	0x2000011c

080010b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
  return uwTick;
 80010b8:	4b02      	ldr	r3, [pc, #8]	@ (80010c4 <HAL_GetTick+0x10>)
 80010ba:	681b      	ldr	r3, [r3, #0]
}
 80010bc:	0018      	movs	r0, r3
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	46c0      	nop			@ (mov r8, r8)
 80010c4:	2000011c 	.word	0x2000011c

080010c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b084      	sub	sp, #16
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010d0:	f7ff fff0 	bl	80010b4 <HAL_GetTick>
 80010d4:	0003      	movs	r3, r0
 80010d6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	3301      	adds	r3, #1
 80010e0:	d005      	beq.n	80010ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010e2:	4b0a      	ldr	r3, [pc, #40]	@ (800110c <HAL_Delay+0x44>)
 80010e4:	781b      	ldrb	r3, [r3, #0]
 80010e6:	001a      	movs	r2, r3
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	189b      	adds	r3, r3, r2
 80010ec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010ee:	46c0      	nop			@ (mov r8, r8)
 80010f0:	f7ff ffe0 	bl	80010b4 <HAL_GetTick>
 80010f4:	0002      	movs	r2, r0
 80010f6:	68bb      	ldr	r3, [r7, #8]
 80010f8:	1ad3      	subs	r3, r2, r3
 80010fa:	68fa      	ldr	r2, [r7, #12]
 80010fc:	429a      	cmp	r2, r3
 80010fe:	d8f7      	bhi.n	80010f0 <HAL_Delay+0x28>
  {
  }
}
 8001100:	46c0      	nop			@ (mov r8, r8)
 8001102:	46c0      	nop			@ (mov r8, r8)
 8001104:	46bd      	mov	sp, r7
 8001106:	b004      	add	sp, #16
 8001108:	bd80      	pop	{r7, pc}
 800110a:	46c0      	nop			@ (mov r8, r8)
 800110c:	2000005c 	.word	0x2000005c

08001110 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	0002      	movs	r2, r0
 8001118:	1dfb      	adds	r3, r7, #7
 800111a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800111c:	1dfb      	adds	r3, r7, #7
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	2b7f      	cmp	r3, #127	@ 0x7f
 8001122:	d809      	bhi.n	8001138 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001124:	1dfb      	adds	r3, r7, #7
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	001a      	movs	r2, r3
 800112a:	231f      	movs	r3, #31
 800112c:	401a      	ands	r2, r3
 800112e:	4b04      	ldr	r3, [pc, #16]	@ (8001140 <__NVIC_EnableIRQ+0x30>)
 8001130:	2101      	movs	r1, #1
 8001132:	4091      	lsls	r1, r2
 8001134:	000a      	movs	r2, r1
 8001136:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001138:	46c0      	nop			@ (mov r8, r8)
 800113a:	46bd      	mov	sp, r7
 800113c:	b002      	add	sp, #8
 800113e:	bd80      	pop	{r7, pc}
 8001140:	e000e100 	.word	0xe000e100

08001144 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001144:	b590      	push	{r4, r7, lr}
 8001146:	b083      	sub	sp, #12
 8001148:	af00      	add	r7, sp, #0
 800114a:	0002      	movs	r2, r0
 800114c:	6039      	str	r1, [r7, #0]
 800114e:	1dfb      	adds	r3, r7, #7
 8001150:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001152:	1dfb      	adds	r3, r7, #7
 8001154:	781b      	ldrb	r3, [r3, #0]
 8001156:	2b7f      	cmp	r3, #127	@ 0x7f
 8001158:	d828      	bhi.n	80011ac <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800115a:	4a2f      	ldr	r2, [pc, #188]	@ (8001218 <__NVIC_SetPriority+0xd4>)
 800115c:	1dfb      	adds	r3, r7, #7
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	b25b      	sxtb	r3, r3
 8001162:	089b      	lsrs	r3, r3, #2
 8001164:	33c0      	adds	r3, #192	@ 0xc0
 8001166:	009b      	lsls	r3, r3, #2
 8001168:	589b      	ldr	r3, [r3, r2]
 800116a:	1dfa      	adds	r2, r7, #7
 800116c:	7812      	ldrb	r2, [r2, #0]
 800116e:	0011      	movs	r1, r2
 8001170:	2203      	movs	r2, #3
 8001172:	400a      	ands	r2, r1
 8001174:	00d2      	lsls	r2, r2, #3
 8001176:	21ff      	movs	r1, #255	@ 0xff
 8001178:	4091      	lsls	r1, r2
 800117a:	000a      	movs	r2, r1
 800117c:	43d2      	mvns	r2, r2
 800117e:	401a      	ands	r2, r3
 8001180:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	019b      	lsls	r3, r3, #6
 8001186:	22ff      	movs	r2, #255	@ 0xff
 8001188:	401a      	ands	r2, r3
 800118a:	1dfb      	adds	r3, r7, #7
 800118c:	781b      	ldrb	r3, [r3, #0]
 800118e:	0018      	movs	r0, r3
 8001190:	2303      	movs	r3, #3
 8001192:	4003      	ands	r3, r0
 8001194:	00db      	lsls	r3, r3, #3
 8001196:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001198:	481f      	ldr	r0, [pc, #124]	@ (8001218 <__NVIC_SetPriority+0xd4>)
 800119a:	1dfb      	adds	r3, r7, #7
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	b25b      	sxtb	r3, r3
 80011a0:	089b      	lsrs	r3, r3, #2
 80011a2:	430a      	orrs	r2, r1
 80011a4:	33c0      	adds	r3, #192	@ 0xc0
 80011a6:	009b      	lsls	r3, r3, #2
 80011a8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80011aa:	e031      	b.n	8001210 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80011ac:	4a1b      	ldr	r2, [pc, #108]	@ (800121c <__NVIC_SetPriority+0xd8>)
 80011ae:	1dfb      	adds	r3, r7, #7
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	0019      	movs	r1, r3
 80011b4:	230f      	movs	r3, #15
 80011b6:	400b      	ands	r3, r1
 80011b8:	3b08      	subs	r3, #8
 80011ba:	089b      	lsrs	r3, r3, #2
 80011bc:	3306      	adds	r3, #6
 80011be:	009b      	lsls	r3, r3, #2
 80011c0:	18d3      	adds	r3, r2, r3
 80011c2:	3304      	adds	r3, #4
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	1dfa      	adds	r2, r7, #7
 80011c8:	7812      	ldrb	r2, [r2, #0]
 80011ca:	0011      	movs	r1, r2
 80011cc:	2203      	movs	r2, #3
 80011ce:	400a      	ands	r2, r1
 80011d0:	00d2      	lsls	r2, r2, #3
 80011d2:	21ff      	movs	r1, #255	@ 0xff
 80011d4:	4091      	lsls	r1, r2
 80011d6:	000a      	movs	r2, r1
 80011d8:	43d2      	mvns	r2, r2
 80011da:	401a      	ands	r2, r3
 80011dc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	019b      	lsls	r3, r3, #6
 80011e2:	22ff      	movs	r2, #255	@ 0xff
 80011e4:	401a      	ands	r2, r3
 80011e6:	1dfb      	adds	r3, r7, #7
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	0018      	movs	r0, r3
 80011ec:	2303      	movs	r3, #3
 80011ee:	4003      	ands	r3, r0
 80011f0:	00db      	lsls	r3, r3, #3
 80011f2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80011f4:	4809      	ldr	r0, [pc, #36]	@ (800121c <__NVIC_SetPriority+0xd8>)
 80011f6:	1dfb      	adds	r3, r7, #7
 80011f8:	781b      	ldrb	r3, [r3, #0]
 80011fa:	001c      	movs	r4, r3
 80011fc:	230f      	movs	r3, #15
 80011fe:	4023      	ands	r3, r4
 8001200:	3b08      	subs	r3, #8
 8001202:	089b      	lsrs	r3, r3, #2
 8001204:	430a      	orrs	r2, r1
 8001206:	3306      	adds	r3, #6
 8001208:	009b      	lsls	r3, r3, #2
 800120a:	18c3      	adds	r3, r0, r3
 800120c:	3304      	adds	r3, #4
 800120e:	601a      	str	r2, [r3, #0]
}
 8001210:	46c0      	nop			@ (mov r8, r8)
 8001212:	46bd      	mov	sp, r7
 8001214:	b003      	add	sp, #12
 8001216:	bd90      	pop	{r4, r7, pc}
 8001218:	e000e100 	.word	0xe000e100
 800121c:	e000ed00 	.word	0xe000ed00

08001220 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	1e5a      	subs	r2, r3, #1
 800122c:	2380      	movs	r3, #128	@ 0x80
 800122e:	045b      	lsls	r3, r3, #17
 8001230:	429a      	cmp	r2, r3
 8001232:	d301      	bcc.n	8001238 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001234:	2301      	movs	r3, #1
 8001236:	e010      	b.n	800125a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001238:	4b0a      	ldr	r3, [pc, #40]	@ (8001264 <SysTick_Config+0x44>)
 800123a:	687a      	ldr	r2, [r7, #4]
 800123c:	3a01      	subs	r2, #1
 800123e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001240:	2301      	movs	r3, #1
 8001242:	425b      	negs	r3, r3
 8001244:	2103      	movs	r1, #3
 8001246:	0018      	movs	r0, r3
 8001248:	f7ff ff7c 	bl	8001144 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800124c:	4b05      	ldr	r3, [pc, #20]	@ (8001264 <SysTick_Config+0x44>)
 800124e:	2200      	movs	r2, #0
 8001250:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001252:	4b04      	ldr	r3, [pc, #16]	@ (8001264 <SysTick_Config+0x44>)
 8001254:	2207      	movs	r2, #7
 8001256:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001258:	2300      	movs	r3, #0
}
 800125a:	0018      	movs	r0, r3
 800125c:	46bd      	mov	sp, r7
 800125e:	b002      	add	sp, #8
 8001260:	bd80      	pop	{r7, pc}
 8001262:	46c0      	nop			@ (mov r8, r8)
 8001264:	e000e010 	.word	0xe000e010

08001268 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b084      	sub	sp, #16
 800126c:	af00      	add	r7, sp, #0
 800126e:	60b9      	str	r1, [r7, #8]
 8001270:	607a      	str	r2, [r7, #4]
 8001272:	210f      	movs	r1, #15
 8001274:	187b      	adds	r3, r7, r1
 8001276:	1c02      	adds	r2, r0, #0
 8001278:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800127a:	68ba      	ldr	r2, [r7, #8]
 800127c:	187b      	adds	r3, r7, r1
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	b25b      	sxtb	r3, r3
 8001282:	0011      	movs	r1, r2
 8001284:	0018      	movs	r0, r3
 8001286:	f7ff ff5d 	bl	8001144 <__NVIC_SetPriority>
}
 800128a:	46c0      	nop			@ (mov r8, r8)
 800128c:	46bd      	mov	sp, r7
 800128e:	b004      	add	sp, #16
 8001290:	bd80      	pop	{r7, pc}

08001292 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001292:	b580      	push	{r7, lr}
 8001294:	b082      	sub	sp, #8
 8001296:	af00      	add	r7, sp, #0
 8001298:	0002      	movs	r2, r0
 800129a:	1dfb      	adds	r3, r7, #7
 800129c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800129e:	1dfb      	adds	r3, r7, #7
 80012a0:	781b      	ldrb	r3, [r3, #0]
 80012a2:	b25b      	sxtb	r3, r3
 80012a4:	0018      	movs	r0, r3
 80012a6:	f7ff ff33 	bl	8001110 <__NVIC_EnableIRQ>
}
 80012aa:	46c0      	nop			@ (mov r8, r8)
 80012ac:	46bd      	mov	sp, r7
 80012ae:	b002      	add	sp, #8
 80012b0:	bd80      	pop	{r7, pc}

080012b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012b2:	b580      	push	{r7, lr}
 80012b4:	b082      	sub	sp, #8
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	0018      	movs	r0, r3
 80012be:	f7ff ffaf 	bl	8001220 <SysTick_Config>
 80012c2:	0003      	movs	r3, r0
}
 80012c4:	0018      	movs	r0, r3
 80012c6:	46bd      	mov	sp, r7
 80012c8:	b002      	add	sp, #8
 80012ca:	bd80      	pop	{r7, pc}

080012cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b086      	sub	sp, #24
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
 80012d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80012d6:	2300      	movs	r3, #0
 80012d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012da:	e147      	b.n	800156c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	2101      	movs	r1, #1
 80012e2:	697a      	ldr	r2, [r7, #20]
 80012e4:	4091      	lsls	r1, r2
 80012e6:	000a      	movs	r2, r1
 80012e8:	4013      	ands	r3, r2
 80012ea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d100      	bne.n	80012f4 <HAL_GPIO_Init+0x28>
 80012f2:	e138      	b.n	8001566 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	2203      	movs	r2, #3
 80012fa:	4013      	ands	r3, r2
 80012fc:	2b01      	cmp	r3, #1
 80012fe:	d005      	beq.n	800130c <HAL_GPIO_Init+0x40>
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	2203      	movs	r2, #3
 8001306:	4013      	ands	r3, r2
 8001308:	2b02      	cmp	r3, #2
 800130a:	d130      	bne.n	800136e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	689b      	ldr	r3, [r3, #8]
 8001310:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001312:	697b      	ldr	r3, [r7, #20]
 8001314:	005b      	lsls	r3, r3, #1
 8001316:	2203      	movs	r2, #3
 8001318:	409a      	lsls	r2, r3
 800131a:	0013      	movs	r3, r2
 800131c:	43da      	mvns	r2, r3
 800131e:	693b      	ldr	r3, [r7, #16]
 8001320:	4013      	ands	r3, r2
 8001322:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	68da      	ldr	r2, [r3, #12]
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	005b      	lsls	r3, r3, #1
 800132c:	409a      	lsls	r2, r3
 800132e:	0013      	movs	r3, r2
 8001330:	693a      	ldr	r2, [r7, #16]
 8001332:	4313      	orrs	r3, r2
 8001334:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	693a      	ldr	r2, [r7, #16]
 800133a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001342:	2201      	movs	r2, #1
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	409a      	lsls	r2, r3
 8001348:	0013      	movs	r3, r2
 800134a:	43da      	mvns	r2, r3
 800134c:	693b      	ldr	r3, [r7, #16]
 800134e:	4013      	ands	r3, r2
 8001350:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	091b      	lsrs	r3, r3, #4
 8001358:	2201      	movs	r2, #1
 800135a:	401a      	ands	r2, r3
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	409a      	lsls	r2, r3
 8001360:	0013      	movs	r3, r2
 8001362:	693a      	ldr	r2, [r7, #16]
 8001364:	4313      	orrs	r3, r2
 8001366:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	693a      	ldr	r2, [r7, #16]
 800136c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	2203      	movs	r2, #3
 8001374:	4013      	ands	r3, r2
 8001376:	2b03      	cmp	r3, #3
 8001378:	d017      	beq.n	80013aa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	68db      	ldr	r3, [r3, #12]
 800137e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	005b      	lsls	r3, r3, #1
 8001384:	2203      	movs	r2, #3
 8001386:	409a      	lsls	r2, r3
 8001388:	0013      	movs	r3, r2
 800138a:	43da      	mvns	r2, r3
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	4013      	ands	r3, r2
 8001390:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	689a      	ldr	r2, [r3, #8]
 8001396:	697b      	ldr	r3, [r7, #20]
 8001398:	005b      	lsls	r3, r3, #1
 800139a:	409a      	lsls	r2, r3
 800139c:	0013      	movs	r3, r2
 800139e:	693a      	ldr	r2, [r7, #16]
 80013a0:	4313      	orrs	r3, r2
 80013a2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	693a      	ldr	r2, [r7, #16]
 80013a8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	2203      	movs	r2, #3
 80013b0:	4013      	ands	r3, r2
 80013b2:	2b02      	cmp	r3, #2
 80013b4:	d123      	bne.n	80013fe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	08da      	lsrs	r2, r3, #3
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	3208      	adds	r2, #8
 80013be:	0092      	lsls	r2, r2, #2
 80013c0:	58d3      	ldr	r3, [r2, r3]
 80013c2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	2207      	movs	r2, #7
 80013c8:	4013      	ands	r3, r2
 80013ca:	009b      	lsls	r3, r3, #2
 80013cc:	220f      	movs	r2, #15
 80013ce:	409a      	lsls	r2, r3
 80013d0:	0013      	movs	r3, r2
 80013d2:	43da      	mvns	r2, r3
 80013d4:	693b      	ldr	r3, [r7, #16]
 80013d6:	4013      	ands	r3, r2
 80013d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	691a      	ldr	r2, [r3, #16]
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	2107      	movs	r1, #7
 80013e2:	400b      	ands	r3, r1
 80013e4:	009b      	lsls	r3, r3, #2
 80013e6:	409a      	lsls	r2, r3
 80013e8:	0013      	movs	r3, r2
 80013ea:	693a      	ldr	r2, [r7, #16]
 80013ec:	4313      	orrs	r3, r2
 80013ee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	08da      	lsrs	r2, r3, #3
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	3208      	adds	r2, #8
 80013f8:	0092      	lsls	r2, r2, #2
 80013fa:	6939      	ldr	r1, [r7, #16]
 80013fc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	005b      	lsls	r3, r3, #1
 8001408:	2203      	movs	r2, #3
 800140a:	409a      	lsls	r2, r3
 800140c:	0013      	movs	r3, r2
 800140e:	43da      	mvns	r2, r3
 8001410:	693b      	ldr	r3, [r7, #16]
 8001412:	4013      	ands	r3, r2
 8001414:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	2203      	movs	r2, #3
 800141c:	401a      	ands	r2, r3
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	005b      	lsls	r3, r3, #1
 8001422:	409a      	lsls	r2, r3
 8001424:	0013      	movs	r3, r2
 8001426:	693a      	ldr	r2, [r7, #16]
 8001428:	4313      	orrs	r3, r2
 800142a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	693a      	ldr	r2, [r7, #16]
 8001430:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	685a      	ldr	r2, [r3, #4]
 8001436:	23c0      	movs	r3, #192	@ 0xc0
 8001438:	029b      	lsls	r3, r3, #10
 800143a:	4013      	ands	r3, r2
 800143c:	d100      	bne.n	8001440 <HAL_GPIO_Init+0x174>
 800143e:	e092      	b.n	8001566 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001440:	4a50      	ldr	r2, [pc, #320]	@ (8001584 <HAL_GPIO_Init+0x2b8>)
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	089b      	lsrs	r3, r3, #2
 8001446:	3318      	adds	r3, #24
 8001448:	009b      	lsls	r3, r3, #2
 800144a:	589b      	ldr	r3, [r3, r2]
 800144c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800144e:	697b      	ldr	r3, [r7, #20]
 8001450:	2203      	movs	r2, #3
 8001452:	4013      	ands	r3, r2
 8001454:	00db      	lsls	r3, r3, #3
 8001456:	220f      	movs	r2, #15
 8001458:	409a      	lsls	r2, r3
 800145a:	0013      	movs	r3, r2
 800145c:	43da      	mvns	r2, r3
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	4013      	ands	r3, r2
 8001462:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001464:	687a      	ldr	r2, [r7, #4]
 8001466:	23a0      	movs	r3, #160	@ 0xa0
 8001468:	05db      	lsls	r3, r3, #23
 800146a:	429a      	cmp	r2, r3
 800146c:	d013      	beq.n	8001496 <HAL_GPIO_Init+0x1ca>
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	4a45      	ldr	r2, [pc, #276]	@ (8001588 <HAL_GPIO_Init+0x2bc>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d00d      	beq.n	8001492 <HAL_GPIO_Init+0x1c6>
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	4a44      	ldr	r2, [pc, #272]	@ (800158c <HAL_GPIO_Init+0x2c0>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d007      	beq.n	800148e <HAL_GPIO_Init+0x1c2>
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	4a43      	ldr	r2, [pc, #268]	@ (8001590 <HAL_GPIO_Init+0x2c4>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d101      	bne.n	800148a <HAL_GPIO_Init+0x1be>
 8001486:	2303      	movs	r3, #3
 8001488:	e006      	b.n	8001498 <HAL_GPIO_Init+0x1cc>
 800148a:	2305      	movs	r3, #5
 800148c:	e004      	b.n	8001498 <HAL_GPIO_Init+0x1cc>
 800148e:	2302      	movs	r3, #2
 8001490:	e002      	b.n	8001498 <HAL_GPIO_Init+0x1cc>
 8001492:	2301      	movs	r3, #1
 8001494:	e000      	b.n	8001498 <HAL_GPIO_Init+0x1cc>
 8001496:	2300      	movs	r3, #0
 8001498:	697a      	ldr	r2, [r7, #20]
 800149a:	2103      	movs	r1, #3
 800149c:	400a      	ands	r2, r1
 800149e:	00d2      	lsls	r2, r2, #3
 80014a0:	4093      	lsls	r3, r2
 80014a2:	693a      	ldr	r2, [r7, #16]
 80014a4:	4313      	orrs	r3, r2
 80014a6:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80014a8:	4936      	ldr	r1, [pc, #216]	@ (8001584 <HAL_GPIO_Init+0x2b8>)
 80014aa:	697b      	ldr	r3, [r7, #20]
 80014ac:	089b      	lsrs	r3, r3, #2
 80014ae:	3318      	adds	r3, #24
 80014b0:	009b      	lsls	r3, r3, #2
 80014b2:	693a      	ldr	r2, [r7, #16]
 80014b4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80014b6:	4b33      	ldr	r3, [pc, #204]	@ (8001584 <HAL_GPIO_Init+0x2b8>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	43da      	mvns	r2, r3
 80014c0:	693b      	ldr	r3, [r7, #16]
 80014c2:	4013      	ands	r3, r2
 80014c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	685a      	ldr	r2, [r3, #4]
 80014ca:	2380      	movs	r3, #128	@ 0x80
 80014cc:	035b      	lsls	r3, r3, #13
 80014ce:	4013      	ands	r3, r2
 80014d0:	d003      	beq.n	80014da <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80014d2:	693a      	ldr	r2, [r7, #16]
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	4313      	orrs	r3, r2
 80014d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80014da:	4b2a      	ldr	r3, [pc, #168]	@ (8001584 <HAL_GPIO_Init+0x2b8>)
 80014dc:	693a      	ldr	r2, [r7, #16]
 80014de:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80014e0:	4b28      	ldr	r3, [pc, #160]	@ (8001584 <HAL_GPIO_Init+0x2b8>)
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	43da      	mvns	r2, r3
 80014ea:	693b      	ldr	r3, [r7, #16]
 80014ec:	4013      	ands	r3, r2
 80014ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	685a      	ldr	r2, [r3, #4]
 80014f4:	2380      	movs	r3, #128	@ 0x80
 80014f6:	039b      	lsls	r3, r3, #14
 80014f8:	4013      	ands	r3, r2
 80014fa:	d003      	beq.n	8001504 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80014fc:	693a      	ldr	r2, [r7, #16]
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	4313      	orrs	r3, r2
 8001502:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001504:	4b1f      	ldr	r3, [pc, #124]	@ (8001584 <HAL_GPIO_Init+0x2b8>)
 8001506:	693a      	ldr	r2, [r7, #16]
 8001508:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800150a:	4a1e      	ldr	r2, [pc, #120]	@ (8001584 <HAL_GPIO_Init+0x2b8>)
 800150c:	2384      	movs	r3, #132	@ 0x84
 800150e:	58d3      	ldr	r3, [r2, r3]
 8001510:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	43da      	mvns	r2, r3
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	4013      	ands	r3, r2
 800151a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	685a      	ldr	r2, [r3, #4]
 8001520:	2380      	movs	r3, #128	@ 0x80
 8001522:	029b      	lsls	r3, r3, #10
 8001524:	4013      	ands	r3, r2
 8001526:	d003      	beq.n	8001530 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001528:	693a      	ldr	r2, [r7, #16]
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	4313      	orrs	r3, r2
 800152e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001530:	4914      	ldr	r1, [pc, #80]	@ (8001584 <HAL_GPIO_Init+0x2b8>)
 8001532:	2284      	movs	r2, #132	@ 0x84
 8001534:	693b      	ldr	r3, [r7, #16]
 8001536:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001538:	4a12      	ldr	r2, [pc, #72]	@ (8001584 <HAL_GPIO_Init+0x2b8>)
 800153a:	2380      	movs	r3, #128	@ 0x80
 800153c:	58d3      	ldr	r3, [r2, r3]
 800153e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	43da      	mvns	r2, r3
 8001544:	693b      	ldr	r3, [r7, #16]
 8001546:	4013      	ands	r3, r2
 8001548:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	685a      	ldr	r2, [r3, #4]
 800154e:	2380      	movs	r3, #128	@ 0x80
 8001550:	025b      	lsls	r3, r3, #9
 8001552:	4013      	ands	r3, r2
 8001554:	d003      	beq.n	800155e <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8001556:	693a      	ldr	r2, [r7, #16]
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	4313      	orrs	r3, r2
 800155c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800155e:	4909      	ldr	r1, [pc, #36]	@ (8001584 <HAL_GPIO_Init+0x2b8>)
 8001560:	2280      	movs	r2, #128	@ 0x80
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8001566:	697b      	ldr	r3, [r7, #20]
 8001568:	3301      	adds	r3, #1
 800156a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	681a      	ldr	r2, [r3, #0]
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	40da      	lsrs	r2, r3
 8001574:	1e13      	subs	r3, r2, #0
 8001576:	d000      	beq.n	800157a <HAL_GPIO_Init+0x2ae>
 8001578:	e6b0      	b.n	80012dc <HAL_GPIO_Init+0x10>
  }
}
 800157a:	46c0      	nop			@ (mov r8, r8)
 800157c:	46c0      	nop			@ (mov r8, r8)
 800157e:	46bd      	mov	sp, r7
 8001580:	b006      	add	sp, #24
 8001582:	bd80      	pop	{r7, pc}
 8001584:	40021800 	.word	0x40021800
 8001588:	50000400 	.word	0x50000400
 800158c:	50000800 	.word	0x50000800
 8001590:	50000c00 	.word	0x50000c00

08001594 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b084      	sub	sp, #16
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
 800159c:	000a      	movs	r2, r1
 800159e:	1cbb      	adds	r3, r7, #2
 80015a0:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	691b      	ldr	r3, [r3, #16]
 80015a6:	1cba      	adds	r2, r7, #2
 80015a8:	8812      	ldrh	r2, [r2, #0]
 80015aa:	4013      	ands	r3, r2
 80015ac:	d004      	beq.n	80015b8 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80015ae:	230f      	movs	r3, #15
 80015b0:	18fb      	adds	r3, r7, r3
 80015b2:	2201      	movs	r2, #1
 80015b4:	701a      	strb	r2, [r3, #0]
 80015b6:	e003      	b.n	80015c0 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80015b8:	230f      	movs	r3, #15
 80015ba:	18fb      	adds	r3, r7, r3
 80015bc:	2200      	movs	r2, #0
 80015be:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80015c0:	230f      	movs	r3, #15
 80015c2:	18fb      	adds	r3, r7, r3
 80015c4:	781b      	ldrb	r3, [r3, #0]
}
 80015c6:	0018      	movs	r0, r3
 80015c8:	46bd      	mov	sp, r7
 80015ca:	b004      	add	sp, #16
 80015cc:	bd80      	pop	{r7, pc}

080015ce <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015ce:	b580      	push	{r7, lr}
 80015d0:	b082      	sub	sp, #8
 80015d2:	af00      	add	r7, sp, #0
 80015d4:	6078      	str	r0, [r7, #4]
 80015d6:	0008      	movs	r0, r1
 80015d8:	0011      	movs	r1, r2
 80015da:	1cbb      	adds	r3, r7, #2
 80015dc:	1c02      	adds	r2, r0, #0
 80015de:	801a      	strh	r2, [r3, #0]
 80015e0:	1c7b      	adds	r3, r7, #1
 80015e2:	1c0a      	adds	r2, r1, #0
 80015e4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80015e6:	1c7b      	adds	r3, r7, #1
 80015e8:	781b      	ldrb	r3, [r3, #0]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d004      	beq.n	80015f8 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80015ee:	1cbb      	adds	r3, r7, #2
 80015f0:	881a      	ldrh	r2, [r3, #0]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80015f6:	e003      	b.n	8001600 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80015f8:	1cbb      	adds	r3, r7, #2
 80015fa:	881a      	ldrh	r2, [r3, #0]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001600:	46c0      	nop			@ (mov r8, r8)
 8001602:	46bd      	mov	sp, r7
 8001604:	b002      	add	sp, #8
 8001606:	bd80      	pop	{r7, pc}

08001608 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b084      	sub	sp, #16
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
 8001610:	000a      	movs	r2, r1
 8001612:	1cbb      	adds	r3, r7, #2
 8001614:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	695b      	ldr	r3, [r3, #20]
 800161a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800161c:	1cbb      	adds	r3, r7, #2
 800161e:	881b      	ldrh	r3, [r3, #0]
 8001620:	68fa      	ldr	r2, [r7, #12]
 8001622:	4013      	ands	r3, r2
 8001624:	041a      	lsls	r2, r3, #16
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	43db      	mvns	r3, r3
 800162a:	1cb9      	adds	r1, r7, #2
 800162c:	8809      	ldrh	r1, [r1, #0]
 800162e:	400b      	ands	r3, r1
 8001630:	431a      	orrs	r2, r3
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	619a      	str	r2, [r3, #24]
}
 8001636:	46c0      	nop			@ (mov r8, r8)
 8001638:	46bd      	mov	sp, r7
 800163a:	b004      	add	sp, #16
 800163c:	bd80      	pop	{r7, pc}
	...

08001640 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
 8001646:	0002      	movs	r2, r0
 8001648:	1dbb      	adds	r3, r7, #6
 800164a:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 800164c:	4b10      	ldr	r3, [pc, #64]	@ (8001690 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800164e:	68db      	ldr	r3, [r3, #12]
 8001650:	1dba      	adds	r2, r7, #6
 8001652:	8812      	ldrh	r2, [r2, #0]
 8001654:	4013      	ands	r3, r2
 8001656:	d008      	beq.n	800166a <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8001658:	4b0d      	ldr	r3, [pc, #52]	@ (8001690 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800165a:	1dba      	adds	r2, r7, #6
 800165c:	8812      	ldrh	r2, [r2, #0]
 800165e:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8001660:	1dbb      	adds	r3, r7, #6
 8001662:	881b      	ldrh	r3, [r3, #0]
 8001664:	0018      	movs	r0, r3
 8001666:	f7ff fafd 	bl	8000c64 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 800166a:	4b09      	ldr	r3, [pc, #36]	@ (8001690 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800166c:	691b      	ldr	r3, [r3, #16]
 800166e:	1dba      	adds	r2, r7, #6
 8001670:	8812      	ldrh	r2, [r2, #0]
 8001672:	4013      	ands	r3, r2
 8001674:	d008      	beq.n	8001688 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8001676:	4b06      	ldr	r3, [pc, #24]	@ (8001690 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8001678:	1dba      	adds	r2, r7, #6
 800167a:	8812      	ldrh	r2, [r2, #0]
 800167c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 800167e:	1dbb      	adds	r3, r7, #6
 8001680:	881b      	ldrh	r3, [r3, #0]
 8001682:	0018      	movs	r0, r3
 8001684:	f000 f806 	bl	8001694 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8001688:	46c0      	nop			@ (mov r8, r8)
 800168a:	46bd      	mov	sp, r7
 800168c:	b002      	add	sp, #8
 800168e:	bd80      	pop	{r7, pc}
 8001690:	40021800 	.word	0x40021800

08001694 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0
 800169a:	0002      	movs	r2, r0
 800169c:	1dbb      	adds	r3, r7, #6
 800169e:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 80016a0:	46c0      	nop			@ (mov r8, r8)
 80016a2:	46bd      	mov	sp, r7
 80016a4:	b002      	add	sp, #8
 80016a6:	bd80      	pop	{r7, pc}

080016a8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b084      	sub	sp, #16
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80016b0:	4b19      	ldr	r3, [pc, #100]	@ (8001718 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a19      	ldr	r2, [pc, #100]	@ (800171c <HAL_PWREx_ControlVoltageScaling+0x74>)
 80016b6:	4013      	ands	r3, r2
 80016b8:	0019      	movs	r1, r3
 80016ba:	4b17      	ldr	r3, [pc, #92]	@ (8001718 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80016bc:	687a      	ldr	r2, [r7, #4]
 80016be:	430a      	orrs	r2, r1
 80016c0:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80016c2:	687a      	ldr	r2, [r7, #4]
 80016c4:	2380      	movs	r3, #128	@ 0x80
 80016c6:	009b      	lsls	r3, r3, #2
 80016c8:	429a      	cmp	r2, r3
 80016ca:	d11f      	bne.n	800170c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80016cc:	4b14      	ldr	r3, [pc, #80]	@ (8001720 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80016ce:	681a      	ldr	r2, [r3, #0]
 80016d0:	0013      	movs	r3, r2
 80016d2:	005b      	lsls	r3, r3, #1
 80016d4:	189b      	adds	r3, r3, r2
 80016d6:	005b      	lsls	r3, r3, #1
 80016d8:	4912      	ldr	r1, [pc, #72]	@ (8001724 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80016da:	0018      	movs	r0, r3
 80016dc:	f7fe fd12 	bl	8000104 <__udivsi3>
 80016e0:	0003      	movs	r3, r0
 80016e2:	3301      	adds	r3, #1
 80016e4:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80016e6:	e008      	b.n	80016fa <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d003      	beq.n	80016f6 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	3b01      	subs	r3, #1
 80016f2:	60fb      	str	r3, [r7, #12]
 80016f4:	e001      	b.n	80016fa <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80016f6:	2303      	movs	r3, #3
 80016f8:	e009      	b.n	800170e <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80016fa:	4b07      	ldr	r3, [pc, #28]	@ (8001718 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80016fc:	695a      	ldr	r2, [r3, #20]
 80016fe:	2380      	movs	r3, #128	@ 0x80
 8001700:	00db      	lsls	r3, r3, #3
 8001702:	401a      	ands	r2, r3
 8001704:	2380      	movs	r3, #128	@ 0x80
 8001706:	00db      	lsls	r3, r3, #3
 8001708:	429a      	cmp	r2, r3
 800170a:	d0ed      	beq.n	80016e8 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 800170c:	2300      	movs	r3, #0
}
 800170e:	0018      	movs	r0, r3
 8001710:	46bd      	mov	sp, r7
 8001712:	b004      	add	sp, #16
 8001714:	bd80      	pop	{r7, pc}
 8001716:	46c0      	nop			@ (mov r8, r8)
 8001718:	40007000 	.word	0x40007000
 800171c:	fffff9ff 	.word	0xfffff9ff
 8001720:	20000054 	.word	0x20000054
 8001724:	000f4240 	.word	0x000f4240

08001728 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b088      	sub	sp, #32
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d101      	bne.n	800173a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001736:	2301      	movs	r3, #1
 8001738:	e2fe      	b.n	8001d38 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	2201      	movs	r2, #1
 8001740:	4013      	ands	r3, r2
 8001742:	d100      	bne.n	8001746 <HAL_RCC_OscConfig+0x1e>
 8001744:	e07c      	b.n	8001840 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001746:	4bc3      	ldr	r3, [pc, #780]	@ (8001a54 <HAL_RCC_OscConfig+0x32c>)
 8001748:	689b      	ldr	r3, [r3, #8]
 800174a:	2238      	movs	r2, #56	@ 0x38
 800174c:	4013      	ands	r3, r2
 800174e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001750:	4bc0      	ldr	r3, [pc, #768]	@ (8001a54 <HAL_RCC_OscConfig+0x32c>)
 8001752:	68db      	ldr	r3, [r3, #12]
 8001754:	2203      	movs	r2, #3
 8001756:	4013      	ands	r3, r2
 8001758:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800175a:	69bb      	ldr	r3, [r7, #24]
 800175c:	2b10      	cmp	r3, #16
 800175e:	d102      	bne.n	8001766 <HAL_RCC_OscConfig+0x3e>
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	2b03      	cmp	r3, #3
 8001764:	d002      	beq.n	800176c <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001766:	69bb      	ldr	r3, [r7, #24]
 8001768:	2b08      	cmp	r3, #8
 800176a:	d10b      	bne.n	8001784 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800176c:	4bb9      	ldr	r3, [pc, #740]	@ (8001a54 <HAL_RCC_OscConfig+0x32c>)
 800176e:	681a      	ldr	r2, [r3, #0]
 8001770:	2380      	movs	r3, #128	@ 0x80
 8001772:	029b      	lsls	r3, r3, #10
 8001774:	4013      	ands	r3, r2
 8001776:	d062      	beq.n	800183e <HAL_RCC_OscConfig+0x116>
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d15e      	bne.n	800183e <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001780:	2301      	movs	r3, #1
 8001782:	e2d9      	b.n	8001d38 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	685a      	ldr	r2, [r3, #4]
 8001788:	2380      	movs	r3, #128	@ 0x80
 800178a:	025b      	lsls	r3, r3, #9
 800178c:	429a      	cmp	r2, r3
 800178e:	d107      	bne.n	80017a0 <HAL_RCC_OscConfig+0x78>
 8001790:	4bb0      	ldr	r3, [pc, #704]	@ (8001a54 <HAL_RCC_OscConfig+0x32c>)
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	4baf      	ldr	r3, [pc, #700]	@ (8001a54 <HAL_RCC_OscConfig+0x32c>)
 8001796:	2180      	movs	r1, #128	@ 0x80
 8001798:	0249      	lsls	r1, r1, #9
 800179a:	430a      	orrs	r2, r1
 800179c:	601a      	str	r2, [r3, #0]
 800179e:	e020      	b.n	80017e2 <HAL_RCC_OscConfig+0xba>
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	685a      	ldr	r2, [r3, #4]
 80017a4:	23a0      	movs	r3, #160	@ 0xa0
 80017a6:	02db      	lsls	r3, r3, #11
 80017a8:	429a      	cmp	r2, r3
 80017aa:	d10e      	bne.n	80017ca <HAL_RCC_OscConfig+0xa2>
 80017ac:	4ba9      	ldr	r3, [pc, #676]	@ (8001a54 <HAL_RCC_OscConfig+0x32c>)
 80017ae:	681a      	ldr	r2, [r3, #0]
 80017b0:	4ba8      	ldr	r3, [pc, #672]	@ (8001a54 <HAL_RCC_OscConfig+0x32c>)
 80017b2:	2180      	movs	r1, #128	@ 0x80
 80017b4:	02c9      	lsls	r1, r1, #11
 80017b6:	430a      	orrs	r2, r1
 80017b8:	601a      	str	r2, [r3, #0]
 80017ba:	4ba6      	ldr	r3, [pc, #664]	@ (8001a54 <HAL_RCC_OscConfig+0x32c>)
 80017bc:	681a      	ldr	r2, [r3, #0]
 80017be:	4ba5      	ldr	r3, [pc, #660]	@ (8001a54 <HAL_RCC_OscConfig+0x32c>)
 80017c0:	2180      	movs	r1, #128	@ 0x80
 80017c2:	0249      	lsls	r1, r1, #9
 80017c4:	430a      	orrs	r2, r1
 80017c6:	601a      	str	r2, [r3, #0]
 80017c8:	e00b      	b.n	80017e2 <HAL_RCC_OscConfig+0xba>
 80017ca:	4ba2      	ldr	r3, [pc, #648]	@ (8001a54 <HAL_RCC_OscConfig+0x32c>)
 80017cc:	681a      	ldr	r2, [r3, #0]
 80017ce:	4ba1      	ldr	r3, [pc, #644]	@ (8001a54 <HAL_RCC_OscConfig+0x32c>)
 80017d0:	49a1      	ldr	r1, [pc, #644]	@ (8001a58 <HAL_RCC_OscConfig+0x330>)
 80017d2:	400a      	ands	r2, r1
 80017d4:	601a      	str	r2, [r3, #0]
 80017d6:	4b9f      	ldr	r3, [pc, #636]	@ (8001a54 <HAL_RCC_OscConfig+0x32c>)
 80017d8:	681a      	ldr	r2, [r3, #0]
 80017da:	4b9e      	ldr	r3, [pc, #632]	@ (8001a54 <HAL_RCC_OscConfig+0x32c>)
 80017dc:	499f      	ldr	r1, [pc, #636]	@ (8001a5c <HAL_RCC_OscConfig+0x334>)
 80017de:	400a      	ands	r2, r1
 80017e0:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d014      	beq.n	8001814 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017ea:	f7ff fc63 	bl	80010b4 <HAL_GetTick>
 80017ee:	0003      	movs	r3, r0
 80017f0:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017f2:	e008      	b.n	8001806 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017f4:	f7ff fc5e 	bl	80010b4 <HAL_GetTick>
 80017f8:	0002      	movs	r2, r0
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	2b64      	cmp	r3, #100	@ 0x64
 8001800:	d901      	bls.n	8001806 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001802:	2303      	movs	r3, #3
 8001804:	e298      	b.n	8001d38 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001806:	4b93      	ldr	r3, [pc, #588]	@ (8001a54 <HAL_RCC_OscConfig+0x32c>)
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	2380      	movs	r3, #128	@ 0x80
 800180c:	029b      	lsls	r3, r3, #10
 800180e:	4013      	ands	r3, r2
 8001810:	d0f0      	beq.n	80017f4 <HAL_RCC_OscConfig+0xcc>
 8001812:	e015      	b.n	8001840 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001814:	f7ff fc4e 	bl	80010b4 <HAL_GetTick>
 8001818:	0003      	movs	r3, r0
 800181a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800181c:	e008      	b.n	8001830 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800181e:	f7ff fc49 	bl	80010b4 <HAL_GetTick>
 8001822:	0002      	movs	r2, r0
 8001824:	693b      	ldr	r3, [r7, #16]
 8001826:	1ad3      	subs	r3, r2, r3
 8001828:	2b64      	cmp	r3, #100	@ 0x64
 800182a:	d901      	bls.n	8001830 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 800182c:	2303      	movs	r3, #3
 800182e:	e283      	b.n	8001d38 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001830:	4b88      	ldr	r3, [pc, #544]	@ (8001a54 <HAL_RCC_OscConfig+0x32c>)
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	2380      	movs	r3, #128	@ 0x80
 8001836:	029b      	lsls	r3, r3, #10
 8001838:	4013      	ands	r3, r2
 800183a:	d1f0      	bne.n	800181e <HAL_RCC_OscConfig+0xf6>
 800183c:	e000      	b.n	8001840 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800183e:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	2202      	movs	r2, #2
 8001846:	4013      	ands	r3, r2
 8001848:	d100      	bne.n	800184c <HAL_RCC_OscConfig+0x124>
 800184a:	e099      	b.n	8001980 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800184c:	4b81      	ldr	r3, [pc, #516]	@ (8001a54 <HAL_RCC_OscConfig+0x32c>)
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	2238      	movs	r2, #56	@ 0x38
 8001852:	4013      	ands	r3, r2
 8001854:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001856:	4b7f      	ldr	r3, [pc, #508]	@ (8001a54 <HAL_RCC_OscConfig+0x32c>)
 8001858:	68db      	ldr	r3, [r3, #12]
 800185a:	2203      	movs	r2, #3
 800185c:	4013      	ands	r3, r2
 800185e:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001860:	69bb      	ldr	r3, [r7, #24]
 8001862:	2b10      	cmp	r3, #16
 8001864:	d102      	bne.n	800186c <HAL_RCC_OscConfig+0x144>
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	2b02      	cmp	r3, #2
 800186a:	d002      	beq.n	8001872 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800186c:	69bb      	ldr	r3, [r7, #24]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d135      	bne.n	80018de <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001872:	4b78      	ldr	r3, [pc, #480]	@ (8001a54 <HAL_RCC_OscConfig+0x32c>)
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	2380      	movs	r3, #128	@ 0x80
 8001878:	00db      	lsls	r3, r3, #3
 800187a:	4013      	ands	r3, r2
 800187c:	d005      	beq.n	800188a <HAL_RCC_OscConfig+0x162>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	68db      	ldr	r3, [r3, #12]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d101      	bne.n	800188a <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	e256      	b.n	8001d38 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800188a:	4b72      	ldr	r3, [pc, #456]	@ (8001a54 <HAL_RCC_OscConfig+0x32c>)
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	4a74      	ldr	r2, [pc, #464]	@ (8001a60 <HAL_RCC_OscConfig+0x338>)
 8001890:	4013      	ands	r3, r2
 8001892:	0019      	movs	r1, r3
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	695b      	ldr	r3, [r3, #20]
 8001898:	021a      	lsls	r2, r3, #8
 800189a:	4b6e      	ldr	r3, [pc, #440]	@ (8001a54 <HAL_RCC_OscConfig+0x32c>)
 800189c:	430a      	orrs	r2, r1
 800189e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80018a0:	69bb      	ldr	r3, [r7, #24]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d112      	bne.n	80018cc <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80018a6:	4b6b      	ldr	r3, [pc, #428]	@ (8001a54 <HAL_RCC_OscConfig+0x32c>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a6e      	ldr	r2, [pc, #440]	@ (8001a64 <HAL_RCC_OscConfig+0x33c>)
 80018ac:	4013      	ands	r3, r2
 80018ae:	0019      	movs	r1, r3
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	691a      	ldr	r2, [r3, #16]
 80018b4:	4b67      	ldr	r3, [pc, #412]	@ (8001a54 <HAL_RCC_OscConfig+0x32c>)
 80018b6:	430a      	orrs	r2, r1
 80018b8:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80018ba:	4b66      	ldr	r3, [pc, #408]	@ (8001a54 <HAL_RCC_OscConfig+0x32c>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	0adb      	lsrs	r3, r3, #11
 80018c0:	2207      	movs	r2, #7
 80018c2:	4013      	ands	r3, r2
 80018c4:	4a68      	ldr	r2, [pc, #416]	@ (8001a68 <HAL_RCC_OscConfig+0x340>)
 80018c6:	40da      	lsrs	r2, r3
 80018c8:	4b68      	ldr	r3, [pc, #416]	@ (8001a6c <HAL_RCC_OscConfig+0x344>)
 80018ca:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80018cc:	4b68      	ldr	r3, [pc, #416]	@ (8001a70 <HAL_RCC_OscConfig+0x348>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	0018      	movs	r0, r3
 80018d2:	f7ff fb93 	bl	8000ffc <HAL_InitTick>
 80018d6:	1e03      	subs	r3, r0, #0
 80018d8:	d051      	beq.n	800197e <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80018da:	2301      	movs	r3, #1
 80018dc:	e22c      	b.n	8001d38 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	68db      	ldr	r3, [r3, #12]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d030      	beq.n	8001948 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80018e6:	4b5b      	ldr	r3, [pc, #364]	@ (8001a54 <HAL_RCC_OscConfig+0x32c>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4a5e      	ldr	r2, [pc, #376]	@ (8001a64 <HAL_RCC_OscConfig+0x33c>)
 80018ec:	4013      	ands	r3, r2
 80018ee:	0019      	movs	r1, r3
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	691a      	ldr	r2, [r3, #16]
 80018f4:	4b57      	ldr	r3, [pc, #348]	@ (8001a54 <HAL_RCC_OscConfig+0x32c>)
 80018f6:	430a      	orrs	r2, r1
 80018f8:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80018fa:	4b56      	ldr	r3, [pc, #344]	@ (8001a54 <HAL_RCC_OscConfig+0x32c>)
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	4b55      	ldr	r3, [pc, #340]	@ (8001a54 <HAL_RCC_OscConfig+0x32c>)
 8001900:	2180      	movs	r1, #128	@ 0x80
 8001902:	0049      	lsls	r1, r1, #1
 8001904:	430a      	orrs	r2, r1
 8001906:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001908:	f7ff fbd4 	bl	80010b4 <HAL_GetTick>
 800190c:	0003      	movs	r3, r0
 800190e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001910:	e008      	b.n	8001924 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001912:	f7ff fbcf 	bl	80010b4 <HAL_GetTick>
 8001916:	0002      	movs	r2, r0
 8001918:	693b      	ldr	r3, [r7, #16]
 800191a:	1ad3      	subs	r3, r2, r3
 800191c:	2b02      	cmp	r3, #2
 800191e:	d901      	bls.n	8001924 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001920:	2303      	movs	r3, #3
 8001922:	e209      	b.n	8001d38 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001924:	4b4b      	ldr	r3, [pc, #300]	@ (8001a54 <HAL_RCC_OscConfig+0x32c>)
 8001926:	681a      	ldr	r2, [r3, #0]
 8001928:	2380      	movs	r3, #128	@ 0x80
 800192a:	00db      	lsls	r3, r3, #3
 800192c:	4013      	ands	r3, r2
 800192e:	d0f0      	beq.n	8001912 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001930:	4b48      	ldr	r3, [pc, #288]	@ (8001a54 <HAL_RCC_OscConfig+0x32c>)
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	4a4a      	ldr	r2, [pc, #296]	@ (8001a60 <HAL_RCC_OscConfig+0x338>)
 8001936:	4013      	ands	r3, r2
 8001938:	0019      	movs	r1, r3
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	695b      	ldr	r3, [r3, #20]
 800193e:	021a      	lsls	r2, r3, #8
 8001940:	4b44      	ldr	r3, [pc, #272]	@ (8001a54 <HAL_RCC_OscConfig+0x32c>)
 8001942:	430a      	orrs	r2, r1
 8001944:	605a      	str	r2, [r3, #4]
 8001946:	e01b      	b.n	8001980 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001948:	4b42      	ldr	r3, [pc, #264]	@ (8001a54 <HAL_RCC_OscConfig+0x32c>)
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	4b41      	ldr	r3, [pc, #260]	@ (8001a54 <HAL_RCC_OscConfig+0x32c>)
 800194e:	4949      	ldr	r1, [pc, #292]	@ (8001a74 <HAL_RCC_OscConfig+0x34c>)
 8001950:	400a      	ands	r2, r1
 8001952:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001954:	f7ff fbae 	bl	80010b4 <HAL_GetTick>
 8001958:	0003      	movs	r3, r0
 800195a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800195c:	e008      	b.n	8001970 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800195e:	f7ff fba9 	bl	80010b4 <HAL_GetTick>
 8001962:	0002      	movs	r2, r0
 8001964:	693b      	ldr	r3, [r7, #16]
 8001966:	1ad3      	subs	r3, r2, r3
 8001968:	2b02      	cmp	r3, #2
 800196a:	d901      	bls.n	8001970 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800196c:	2303      	movs	r3, #3
 800196e:	e1e3      	b.n	8001d38 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001970:	4b38      	ldr	r3, [pc, #224]	@ (8001a54 <HAL_RCC_OscConfig+0x32c>)
 8001972:	681a      	ldr	r2, [r3, #0]
 8001974:	2380      	movs	r3, #128	@ 0x80
 8001976:	00db      	lsls	r3, r3, #3
 8001978:	4013      	ands	r3, r2
 800197a:	d1f0      	bne.n	800195e <HAL_RCC_OscConfig+0x236>
 800197c:	e000      	b.n	8001980 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800197e:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	2208      	movs	r2, #8
 8001986:	4013      	ands	r3, r2
 8001988:	d047      	beq.n	8001a1a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800198a:	4b32      	ldr	r3, [pc, #200]	@ (8001a54 <HAL_RCC_OscConfig+0x32c>)
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	2238      	movs	r2, #56	@ 0x38
 8001990:	4013      	ands	r3, r2
 8001992:	2b18      	cmp	r3, #24
 8001994:	d10a      	bne.n	80019ac <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001996:	4b2f      	ldr	r3, [pc, #188]	@ (8001a54 <HAL_RCC_OscConfig+0x32c>)
 8001998:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800199a:	2202      	movs	r2, #2
 800199c:	4013      	ands	r3, r2
 800199e:	d03c      	beq.n	8001a1a <HAL_RCC_OscConfig+0x2f2>
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	699b      	ldr	r3, [r3, #24]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d138      	bne.n	8001a1a <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80019a8:	2301      	movs	r3, #1
 80019aa:	e1c5      	b.n	8001d38 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	699b      	ldr	r3, [r3, #24]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d019      	beq.n	80019e8 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80019b4:	4b27      	ldr	r3, [pc, #156]	@ (8001a54 <HAL_RCC_OscConfig+0x32c>)
 80019b6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80019b8:	4b26      	ldr	r3, [pc, #152]	@ (8001a54 <HAL_RCC_OscConfig+0x32c>)
 80019ba:	2101      	movs	r1, #1
 80019bc:	430a      	orrs	r2, r1
 80019be:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019c0:	f7ff fb78 	bl	80010b4 <HAL_GetTick>
 80019c4:	0003      	movs	r3, r0
 80019c6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80019c8:	e008      	b.n	80019dc <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019ca:	f7ff fb73 	bl	80010b4 <HAL_GetTick>
 80019ce:	0002      	movs	r2, r0
 80019d0:	693b      	ldr	r3, [r7, #16]
 80019d2:	1ad3      	subs	r3, r2, r3
 80019d4:	2b02      	cmp	r3, #2
 80019d6:	d901      	bls.n	80019dc <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80019d8:	2303      	movs	r3, #3
 80019da:	e1ad      	b.n	8001d38 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80019dc:	4b1d      	ldr	r3, [pc, #116]	@ (8001a54 <HAL_RCC_OscConfig+0x32c>)
 80019de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019e0:	2202      	movs	r2, #2
 80019e2:	4013      	ands	r3, r2
 80019e4:	d0f1      	beq.n	80019ca <HAL_RCC_OscConfig+0x2a2>
 80019e6:	e018      	b.n	8001a1a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80019e8:	4b1a      	ldr	r3, [pc, #104]	@ (8001a54 <HAL_RCC_OscConfig+0x32c>)
 80019ea:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80019ec:	4b19      	ldr	r3, [pc, #100]	@ (8001a54 <HAL_RCC_OscConfig+0x32c>)
 80019ee:	2101      	movs	r1, #1
 80019f0:	438a      	bics	r2, r1
 80019f2:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019f4:	f7ff fb5e 	bl	80010b4 <HAL_GetTick>
 80019f8:	0003      	movs	r3, r0
 80019fa:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80019fc:	e008      	b.n	8001a10 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019fe:	f7ff fb59 	bl	80010b4 <HAL_GetTick>
 8001a02:	0002      	movs	r2, r0
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	1ad3      	subs	r3, r2, r3
 8001a08:	2b02      	cmp	r3, #2
 8001a0a:	d901      	bls.n	8001a10 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001a0c:	2303      	movs	r3, #3
 8001a0e:	e193      	b.n	8001d38 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a10:	4b10      	ldr	r3, [pc, #64]	@ (8001a54 <HAL_RCC_OscConfig+0x32c>)
 8001a12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a14:	2202      	movs	r2, #2
 8001a16:	4013      	ands	r3, r2
 8001a18:	d1f1      	bne.n	80019fe <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	2204      	movs	r2, #4
 8001a20:	4013      	ands	r3, r2
 8001a22:	d100      	bne.n	8001a26 <HAL_RCC_OscConfig+0x2fe>
 8001a24:	e0c6      	b.n	8001bb4 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a26:	231f      	movs	r3, #31
 8001a28:	18fb      	adds	r3, r7, r3
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001a2e:	4b09      	ldr	r3, [pc, #36]	@ (8001a54 <HAL_RCC_OscConfig+0x32c>)
 8001a30:	689b      	ldr	r3, [r3, #8]
 8001a32:	2238      	movs	r2, #56	@ 0x38
 8001a34:	4013      	ands	r3, r2
 8001a36:	2b20      	cmp	r3, #32
 8001a38:	d11e      	bne.n	8001a78 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001a3a:	4b06      	ldr	r3, [pc, #24]	@ (8001a54 <HAL_RCC_OscConfig+0x32c>)
 8001a3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a3e:	2202      	movs	r2, #2
 8001a40:	4013      	ands	r3, r2
 8001a42:	d100      	bne.n	8001a46 <HAL_RCC_OscConfig+0x31e>
 8001a44:	e0b6      	b.n	8001bb4 <HAL_RCC_OscConfig+0x48c>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	689b      	ldr	r3, [r3, #8]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d000      	beq.n	8001a50 <HAL_RCC_OscConfig+0x328>
 8001a4e:	e0b1      	b.n	8001bb4 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001a50:	2301      	movs	r3, #1
 8001a52:	e171      	b.n	8001d38 <HAL_RCC_OscConfig+0x610>
 8001a54:	40021000 	.word	0x40021000
 8001a58:	fffeffff 	.word	0xfffeffff
 8001a5c:	fffbffff 	.word	0xfffbffff
 8001a60:	ffff80ff 	.word	0xffff80ff
 8001a64:	ffffc7ff 	.word	0xffffc7ff
 8001a68:	00f42400 	.word	0x00f42400
 8001a6c:	20000054 	.word	0x20000054
 8001a70:	20000058 	.word	0x20000058
 8001a74:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001a78:	4bb1      	ldr	r3, [pc, #708]	@ (8001d40 <HAL_RCC_OscConfig+0x618>)
 8001a7a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001a7c:	2380      	movs	r3, #128	@ 0x80
 8001a7e:	055b      	lsls	r3, r3, #21
 8001a80:	4013      	ands	r3, r2
 8001a82:	d101      	bne.n	8001a88 <HAL_RCC_OscConfig+0x360>
 8001a84:	2301      	movs	r3, #1
 8001a86:	e000      	b.n	8001a8a <HAL_RCC_OscConfig+0x362>
 8001a88:	2300      	movs	r3, #0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d011      	beq.n	8001ab2 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001a8e:	4bac      	ldr	r3, [pc, #688]	@ (8001d40 <HAL_RCC_OscConfig+0x618>)
 8001a90:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001a92:	4bab      	ldr	r3, [pc, #684]	@ (8001d40 <HAL_RCC_OscConfig+0x618>)
 8001a94:	2180      	movs	r1, #128	@ 0x80
 8001a96:	0549      	lsls	r1, r1, #21
 8001a98:	430a      	orrs	r2, r1
 8001a9a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001a9c:	4ba8      	ldr	r3, [pc, #672]	@ (8001d40 <HAL_RCC_OscConfig+0x618>)
 8001a9e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001aa0:	2380      	movs	r3, #128	@ 0x80
 8001aa2:	055b      	lsls	r3, r3, #21
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	60fb      	str	r3, [r7, #12]
 8001aa8:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001aaa:	231f      	movs	r3, #31
 8001aac:	18fb      	adds	r3, r7, r3
 8001aae:	2201      	movs	r2, #1
 8001ab0:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ab2:	4ba4      	ldr	r3, [pc, #656]	@ (8001d44 <HAL_RCC_OscConfig+0x61c>)
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	2380      	movs	r3, #128	@ 0x80
 8001ab8:	005b      	lsls	r3, r3, #1
 8001aba:	4013      	ands	r3, r2
 8001abc:	d11a      	bne.n	8001af4 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001abe:	4ba1      	ldr	r3, [pc, #644]	@ (8001d44 <HAL_RCC_OscConfig+0x61c>)
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	4ba0      	ldr	r3, [pc, #640]	@ (8001d44 <HAL_RCC_OscConfig+0x61c>)
 8001ac4:	2180      	movs	r1, #128	@ 0x80
 8001ac6:	0049      	lsls	r1, r1, #1
 8001ac8:	430a      	orrs	r2, r1
 8001aca:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001acc:	f7ff faf2 	bl	80010b4 <HAL_GetTick>
 8001ad0:	0003      	movs	r3, r0
 8001ad2:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ad4:	e008      	b.n	8001ae8 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ad6:	f7ff faed 	bl	80010b4 <HAL_GetTick>
 8001ada:	0002      	movs	r2, r0
 8001adc:	693b      	ldr	r3, [r7, #16]
 8001ade:	1ad3      	subs	r3, r2, r3
 8001ae0:	2b02      	cmp	r3, #2
 8001ae2:	d901      	bls.n	8001ae8 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001ae4:	2303      	movs	r3, #3
 8001ae6:	e127      	b.n	8001d38 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ae8:	4b96      	ldr	r3, [pc, #600]	@ (8001d44 <HAL_RCC_OscConfig+0x61c>)
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	2380      	movs	r3, #128	@ 0x80
 8001aee:	005b      	lsls	r3, r3, #1
 8001af0:	4013      	ands	r3, r2
 8001af2:	d0f0      	beq.n	8001ad6 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	2b01      	cmp	r3, #1
 8001afa:	d106      	bne.n	8001b0a <HAL_RCC_OscConfig+0x3e2>
 8001afc:	4b90      	ldr	r3, [pc, #576]	@ (8001d40 <HAL_RCC_OscConfig+0x618>)
 8001afe:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001b00:	4b8f      	ldr	r3, [pc, #572]	@ (8001d40 <HAL_RCC_OscConfig+0x618>)
 8001b02:	2101      	movs	r1, #1
 8001b04:	430a      	orrs	r2, r1
 8001b06:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001b08:	e01c      	b.n	8001b44 <HAL_RCC_OscConfig+0x41c>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	2b05      	cmp	r3, #5
 8001b10:	d10c      	bne.n	8001b2c <HAL_RCC_OscConfig+0x404>
 8001b12:	4b8b      	ldr	r3, [pc, #556]	@ (8001d40 <HAL_RCC_OscConfig+0x618>)
 8001b14:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001b16:	4b8a      	ldr	r3, [pc, #552]	@ (8001d40 <HAL_RCC_OscConfig+0x618>)
 8001b18:	2104      	movs	r1, #4
 8001b1a:	430a      	orrs	r2, r1
 8001b1c:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001b1e:	4b88      	ldr	r3, [pc, #544]	@ (8001d40 <HAL_RCC_OscConfig+0x618>)
 8001b20:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001b22:	4b87      	ldr	r3, [pc, #540]	@ (8001d40 <HAL_RCC_OscConfig+0x618>)
 8001b24:	2101      	movs	r1, #1
 8001b26:	430a      	orrs	r2, r1
 8001b28:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001b2a:	e00b      	b.n	8001b44 <HAL_RCC_OscConfig+0x41c>
 8001b2c:	4b84      	ldr	r3, [pc, #528]	@ (8001d40 <HAL_RCC_OscConfig+0x618>)
 8001b2e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001b30:	4b83      	ldr	r3, [pc, #524]	@ (8001d40 <HAL_RCC_OscConfig+0x618>)
 8001b32:	2101      	movs	r1, #1
 8001b34:	438a      	bics	r2, r1
 8001b36:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001b38:	4b81      	ldr	r3, [pc, #516]	@ (8001d40 <HAL_RCC_OscConfig+0x618>)
 8001b3a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001b3c:	4b80      	ldr	r3, [pc, #512]	@ (8001d40 <HAL_RCC_OscConfig+0x618>)
 8001b3e:	2104      	movs	r1, #4
 8001b40:	438a      	bics	r2, r1
 8001b42:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d014      	beq.n	8001b76 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b4c:	f7ff fab2 	bl	80010b4 <HAL_GetTick>
 8001b50:	0003      	movs	r3, r0
 8001b52:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b54:	e009      	b.n	8001b6a <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b56:	f7ff faad 	bl	80010b4 <HAL_GetTick>
 8001b5a:	0002      	movs	r2, r0
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	1ad3      	subs	r3, r2, r3
 8001b60:	4a79      	ldr	r2, [pc, #484]	@ (8001d48 <HAL_RCC_OscConfig+0x620>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d901      	bls.n	8001b6a <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001b66:	2303      	movs	r3, #3
 8001b68:	e0e6      	b.n	8001d38 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b6a:	4b75      	ldr	r3, [pc, #468]	@ (8001d40 <HAL_RCC_OscConfig+0x618>)
 8001b6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b6e:	2202      	movs	r2, #2
 8001b70:	4013      	ands	r3, r2
 8001b72:	d0f0      	beq.n	8001b56 <HAL_RCC_OscConfig+0x42e>
 8001b74:	e013      	b.n	8001b9e <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b76:	f7ff fa9d 	bl	80010b4 <HAL_GetTick>
 8001b7a:	0003      	movs	r3, r0
 8001b7c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b7e:	e009      	b.n	8001b94 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b80:	f7ff fa98 	bl	80010b4 <HAL_GetTick>
 8001b84:	0002      	movs	r2, r0
 8001b86:	693b      	ldr	r3, [r7, #16]
 8001b88:	1ad3      	subs	r3, r2, r3
 8001b8a:	4a6f      	ldr	r2, [pc, #444]	@ (8001d48 <HAL_RCC_OscConfig+0x620>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d901      	bls.n	8001b94 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001b90:	2303      	movs	r3, #3
 8001b92:	e0d1      	b.n	8001d38 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b94:	4b6a      	ldr	r3, [pc, #424]	@ (8001d40 <HAL_RCC_OscConfig+0x618>)
 8001b96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b98:	2202      	movs	r2, #2
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	d1f0      	bne.n	8001b80 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001b9e:	231f      	movs	r3, #31
 8001ba0:	18fb      	adds	r3, r7, r3
 8001ba2:	781b      	ldrb	r3, [r3, #0]
 8001ba4:	2b01      	cmp	r3, #1
 8001ba6:	d105      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001ba8:	4b65      	ldr	r3, [pc, #404]	@ (8001d40 <HAL_RCC_OscConfig+0x618>)
 8001baa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001bac:	4b64      	ldr	r3, [pc, #400]	@ (8001d40 <HAL_RCC_OscConfig+0x618>)
 8001bae:	4967      	ldr	r1, [pc, #412]	@ (8001d4c <HAL_RCC_OscConfig+0x624>)
 8001bb0:	400a      	ands	r2, r1
 8001bb2:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	69db      	ldr	r3, [r3, #28]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d100      	bne.n	8001bbe <HAL_RCC_OscConfig+0x496>
 8001bbc:	e0bb      	b.n	8001d36 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001bbe:	4b60      	ldr	r3, [pc, #384]	@ (8001d40 <HAL_RCC_OscConfig+0x618>)
 8001bc0:	689b      	ldr	r3, [r3, #8]
 8001bc2:	2238      	movs	r2, #56	@ 0x38
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	2b10      	cmp	r3, #16
 8001bc8:	d100      	bne.n	8001bcc <HAL_RCC_OscConfig+0x4a4>
 8001bca:	e07b      	b.n	8001cc4 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	69db      	ldr	r3, [r3, #28]
 8001bd0:	2b02      	cmp	r3, #2
 8001bd2:	d156      	bne.n	8001c82 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bd4:	4b5a      	ldr	r3, [pc, #360]	@ (8001d40 <HAL_RCC_OscConfig+0x618>)
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	4b59      	ldr	r3, [pc, #356]	@ (8001d40 <HAL_RCC_OscConfig+0x618>)
 8001bda:	495d      	ldr	r1, [pc, #372]	@ (8001d50 <HAL_RCC_OscConfig+0x628>)
 8001bdc:	400a      	ands	r2, r1
 8001bde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001be0:	f7ff fa68 	bl	80010b4 <HAL_GetTick>
 8001be4:	0003      	movs	r3, r0
 8001be6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001be8:	e008      	b.n	8001bfc <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bea:	f7ff fa63 	bl	80010b4 <HAL_GetTick>
 8001bee:	0002      	movs	r2, r0
 8001bf0:	693b      	ldr	r3, [r7, #16]
 8001bf2:	1ad3      	subs	r3, r2, r3
 8001bf4:	2b02      	cmp	r3, #2
 8001bf6:	d901      	bls.n	8001bfc <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001bf8:	2303      	movs	r3, #3
 8001bfa:	e09d      	b.n	8001d38 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bfc:	4b50      	ldr	r3, [pc, #320]	@ (8001d40 <HAL_RCC_OscConfig+0x618>)
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	2380      	movs	r3, #128	@ 0x80
 8001c02:	049b      	lsls	r3, r3, #18
 8001c04:	4013      	ands	r3, r2
 8001c06:	d1f0      	bne.n	8001bea <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c08:	4b4d      	ldr	r3, [pc, #308]	@ (8001d40 <HAL_RCC_OscConfig+0x618>)
 8001c0a:	68db      	ldr	r3, [r3, #12]
 8001c0c:	4a51      	ldr	r2, [pc, #324]	@ (8001d54 <HAL_RCC_OscConfig+0x62c>)
 8001c0e:	4013      	ands	r3, r2
 8001c10:	0019      	movs	r1, r3
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6a1a      	ldr	r2, [r3, #32]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c1a:	431a      	orrs	r2, r3
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c20:	021b      	lsls	r3, r3, #8
 8001c22:	431a      	orrs	r2, r3
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c28:	431a      	orrs	r2, r3
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c2e:	431a      	orrs	r2, r3
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c34:	431a      	orrs	r2, r3
 8001c36:	4b42      	ldr	r3, [pc, #264]	@ (8001d40 <HAL_RCC_OscConfig+0x618>)
 8001c38:	430a      	orrs	r2, r1
 8001c3a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c3c:	4b40      	ldr	r3, [pc, #256]	@ (8001d40 <HAL_RCC_OscConfig+0x618>)
 8001c3e:	681a      	ldr	r2, [r3, #0]
 8001c40:	4b3f      	ldr	r3, [pc, #252]	@ (8001d40 <HAL_RCC_OscConfig+0x618>)
 8001c42:	2180      	movs	r1, #128	@ 0x80
 8001c44:	0449      	lsls	r1, r1, #17
 8001c46:	430a      	orrs	r2, r1
 8001c48:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001c4a:	4b3d      	ldr	r3, [pc, #244]	@ (8001d40 <HAL_RCC_OscConfig+0x618>)
 8001c4c:	68da      	ldr	r2, [r3, #12]
 8001c4e:	4b3c      	ldr	r3, [pc, #240]	@ (8001d40 <HAL_RCC_OscConfig+0x618>)
 8001c50:	2180      	movs	r1, #128	@ 0x80
 8001c52:	0549      	lsls	r1, r1, #21
 8001c54:	430a      	orrs	r2, r1
 8001c56:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c58:	f7ff fa2c 	bl	80010b4 <HAL_GetTick>
 8001c5c:	0003      	movs	r3, r0
 8001c5e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c60:	e008      	b.n	8001c74 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c62:	f7ff fa27 	bl	80010b4 <HAL_GetTick>
 8001c66:	0002      	movs	r2, r0
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	1ad3      	subs	r3, r2, r3
 8001c6c:	2b02      	cmp	r3, #2
 8001c6e:	d901      	bls.n	8001c74 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8001c70:	2303      	movs	r3, #3
 8001c72:	e061      	b.n	8001d38 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c74:	4b32      	ldr	r3, [pc, #200]	@ (8001d40 <HAL_RCC_OscConfig+0x618>)
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	2380      	movs	r3, #128	@ 0x80
 8001c7a:	049b      	lsls	r3, r3, #18
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	d0f0      	beq.n	8001c62 <HAL_RCC_OscConfig+0x53a>
 8001c80:	e059      	b.n	8001d36 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c82:	4b2f      	ldr	r3, [pc, #188]	@ (8001d40 <HAL_RCC_OscConfig+0x618>)
 8001c84:	681a      	ldr	r2, [r3, #0]
 8001c86:	4b2e      	ldr	r3, [pc, #184]	@ (8001d40 <HAL_RCC_OscConfig+0x618>)
 8001c88:	4931      	ldr	r1, [pc, #196]	@ (8001d50 <HAL_RCC_OscConfig+0x628>)
 8001c8a:	400a      	ands	r2, r1
 8001c8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c8e:	f7ff fa11 	bl	80010b4 <HAL_GetTick>
 8001c92:	0003      	movs	r3, r0
 8001c94:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c96:	e008      	b.n	8001caa <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c98:	f7ff fa0c 	bl	80010b4 <HAL_GetTick>
 8001c9c:	0002      	movs	r2, r0
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	1ad3      	subs	r3, r2, r3
 8001ca2:	2b02      	cmp	r3, #2
 8001ca4:	d901      	bls.n	8001caa <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8001ca6:	2303      	movs	r3, #3
 8001ca8:	e046      	b.n	8001d38 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001caa:	4b25      	ldr	r3, [pc, #148]	@ (8001d40 <HAL_RCC_OscConfig+0x618>)
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	2380      	movs	r3, #128	@ 0x80
 8001cb0:	049b      	lsls	r3, r3, #18
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	d1f0      	bne.n	8001c98 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001cb6:	4b22      	ldr	r3, [pc, #136]	@ (8001d40 <HAL_RCC_OscConfig+0x618>)
 8001cb8:	68da      	ldr	r2, [r3, #12]
 8001cba:	4b21      	ldr	r3, [pc, #132]	@ (8001d40 <HAL_RCC_OscConfig+0x618>)
 8001cbc:	4926      	ldr	r1, [pc, #152]	@ (8001d58 <HAL_RCC_OscConfig+0x630>)
 8001cbe:	400a      	ands	r2, r1
 8001cc0:	60da      	str	r2, [r3, #12]
 8001cc2:	e038      	b.n	8001d36 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	69db      	ldr	r3, [r3, #28]
 8001cc8:	2b01      	cmp	r3, #1
 8001cca:	d101      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	e033      	b.n	8001d38 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001cd0:	4b1b      	ldr	r3, [pc, #108]	@ (8001d40 <HAL_RCC_OscConfig+0x618>)
 8001cd2:	68db      	ldr	r3, [r3, #12]
 8001cd4:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	2203      	movs	r2, #3
 8001cda:	401a      	ands	r2, r3
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6a1b      	ldr	r3, [r3, #32]
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	d126      	bne.n	8001d32 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	2270      	movs	r2, #112	@ 0x70
 8001ce8:	401a      	ands	r2, r3
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cee:	429a      	cmp	r2, r3
 8001cf0:	d11f      	bne.n	8001d32 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001cf2:	697a      	ldr	r2, [r7, #20]
 8001cf4:	23fe      	movs	r3, #254	@ 0xfe
 8001cf6:	01db      	lsls	r3, r3, #7
 8001cf8:	401a      	ands	r2, r3
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cfe:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d116      	bne.n	8001d32 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001d04:	697a      	ldr	r2, [r7, #20]
 8001d06:	23f8      	movs	r3, #248	@ 0xf8
 8001d08:	039b      	lsls	r3, r3, #14
 8001d0a:	401a      	ands	r2, r3
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d10:	429a      	cmp	r2, r3
 8001d12:	d10e      	bne.n	8001d32 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001d14:	697a      	ldr	r2, [r7, #20]
 8001d16:	23e0      	movs	r3, #224	@ 0xe0
 8001d18:	051b      	lsls	r3, r3, #20
 8001d1a:	401a      	ands	r2, r3
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001d20:	429a      	cmp	r2, r3
 8001d22:	d106      	bne.n	8001d32 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	0f5b      	lsrs	r3, r3, #29
 8001d28:	075a      	lsls	r2, r3, #29
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001d2e:	429a      	cmp	r2, r3
 8001d30:	d001      	beq.n	8001d36 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	e000      	b.n	8001d38 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8001d36:	2300      	movs	r3, #0
}
 8001d38:	0018      	movs	r0, r3
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	b008      	add	sp, #32
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	40021000 	.word	0x40021000
 8001d44:	40007000 	.word	0x40007000
 8001d48:	00001388 	.word	0x00001388
 8001d4c:	efffffff 	.word	0xefffffff
 8001d50:	feffffff 	.word	0xfeffffff
 8001d54:	11c1808c 	.word	0x11c1808c
 8001d58:	eefefffc 	.word	0xeefefffc

08001d5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b084      	sub	sp, #16
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
 8001d64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d101      	bne.n	8001d70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	e0e9      	b.n	8001f44 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d70:	4b76      	ldr	r3, [pc, #472]	@ (8001f4c <HAL_RCC_ClockConfig+0x1f0>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	2207      	movs	r2, #7
 8001d76:	4013      	ands	r3, r2
 8001d78:	683a      	ldr	r2, [r7, #0]
 8001d7a:	429a      	cmp	r2, r3
 8001d7c:	d91e      	bls.n	8001dbc <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d7e:	4b73      	ldr	r3, [pc, #460]	@ (8001f4c <HAL_RCC_ClockConfig+0x1f0>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	2207      	movs	r2, #7
 8001d84:	4393      	bics	r3, r2
 8001d86:	0019      	movs	r1, r3
 8001d88:	4b70      	ldr	r3, [pc, #448]	@ (8001f4c <HAL_RCC_ClockConfig+0x1f0>)
 8001d8a:	683a      	ldr	r2, [r7, #0]
 8001d8c:	430a      	orrs	r2, r1
 8001d8e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001d90:	f7ff f990 	bl	80010b4 <HAL_GetTick>
 8001d94:	0003      	movs	r3, r0
 8001d96:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001d98:	e009      	b.n	8001dae <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d9a:	f7ff f98b 	bl	80010b4 <HAL_GetTick>
 8001d9e:	0002      	movs	r2, r0
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	1ad3      	subs	r3, r2, r3
 8001da4:	4a6a      	ldr	r2, [pc, #424]	@ (8001f50 <HAL_RCC_ClockConfig+0x1f4>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d901      	bls.n	8001dae <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001daa:	2303      	movs	r3, #3
 8001dac:	e0ca      	b.n	8001f44 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001dae:	4b67      	ldr	r3, [pc, #412]	@ (8001f4c <HAL_RCC_ClockConfig+0x1f0>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	2207      	movs	r2, #7
 8001db4:	4013      	ands	r3, r2
 8001db6:	683a      	ldr	r2, [r7, #0]
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d1ee      	bne.n	8001d9a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	2202      	movs	r2, #2
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	d015      	beq.n	8001df2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	2204      	movs	r2, #4
 8001dcc:	4013      	ands	r3, r2
 8001dce:	d006      	beq.n	8001dde <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001dd0:	4b60      	ldr	r3, [pc, #384]	@ (8001f54 <HAL_RCC_ClockConfig+0x1f8>)
 8001dd2:	689a      	ldr	r2, [r3, #8]
 8001dd4:	4b5f      	ldr	r3, [pc, #380]	@ (8001f54 <HAL_RCC_ClockConfig+0x1f8>)
 8001dd6:	21e0      	movs	r1, #224	@ 0xe0
 8001dd8:	01c9      	lsls	r1, r1, #7
 8001dda:	430a      	orrs	r2, r1
 8001ddc:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001dde:	4b5d      	ldr	r3, [pc, #372]	@ (8001f54 <HAL_RCC_ClockConfig+0x1f8>)
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	4a5d      	ldr	r2, [pc, #372]	@ (8001f58 <HAL_RCC_ClockConfig+0x1fc>)
 8001de4:	4013      	ands	r3, r2
 8001de6:	0019      	movs	r1, r3
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	689a      	ldr	r2, [r3, #8]
 8001dec:	4b59      	ldr	r3, [pc, #356]	@ (8001f54 <HAL_RCC_ClockConfig+0x1f8>)
 8001dee:	430a      	orrs	r2, r1
 8001df0:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	2201      	movs	r2, #1
 8001df8:	4013      	ands	r3, r2
 8001dfa:	d057      	beq.n	8001eac <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	2b01      	cmp	r3, #1
 8001e02:	d107      	bne.n	8001e14 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e04:	4b53      	ldr	r3, [pc, #332]	@ (8001f54 <HAL_RCC_ClockConfig+0x1f8>)
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	2380      	movs	r3, #128	@ 0x80
 8001e0a:	029b      	lsls	r3, r3, #10
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	d12b      	bne.n	8001e68 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001e10:	2301      	movs	r3, #1
 8001e12:	e097      	b.n	8001f44 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	2b02      	cmp	r3, #2
 8001e1a:	d107      	bne.n	8001e2c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e1c:	4b4d      	ldr	r3, [pc, #308]	@ (8001f54 <HAL_RCC_ClockConfig+0x1f8>)
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	2380      	movs	r3, #128	@ 0x80
 8001e22:	049b      	lsls	r3, r3, #18
 8001e24:	4013      	ands	r3, r2
 8001e26:	d11f      	bne.n	8001e68 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	e08b      	b.n	8001f44 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d107      	bne.n	8001e44 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e34:	4b47      	ldr	r3, [pc, #284]	@ (8001f54 <HAL_RCC_ClockConfig+0x1f8>)
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	2380      	movs	r3, #128	@ 0x80
 8001e3a:	00db      	lsls	r3, r3, #3
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	d113      	bne.n	8001e68 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001e40:	2301      	movs	r3, #1
 8001e42:	e07f      	b.n	8001f44 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	2b03      	cmp	r3, #3
 8001e4a:	d106      	bne.n	8001e5a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e4c:	4b41      	ldr	r3, [pc, #260]	@ (8001f54 <HAL_RCC_ClockConfig+0x1f8>)
 8001e4e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e50:	2202      	movs	r2, #2
 8001e52:	4013      	ands	r3, r2
 8001e54:	d108      	bne.n	8001e68 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	e074      	b.n	8001f44 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e5a:	4b3e      	ldr	r3, [pc, #248]	@ (8001f54 <HAL_RCC_ClockConfig+0x1f8>)
 8001e5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e5e:	2202      	movs	r2, #2
 8001e60:	4013      	ands	r3, r2
 8001e62:	d101      	bne.n	8001e68 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001e64:	2301      	movs	r3, #1
 8001e66:	e06d      	b.n	8001f44 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001e68:	4b3a      	ldr	r3, [pc, #232]	@ (8001f54 <HAL_RCC_ClockConfig+0x1f8>)
 8001e6a:	689b      	ldr	r3, [r3, #8]
 8001e6c:	2207      	movs	r2, #7
 8001e6e:	4393      	bics	r3, r2
 8001e70:	0019      	movs	r1, r3
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	685a      	ldr	r2, [r3, #4]
 8001e76:	4b37      	ldr	r3, [pc, #220]	@ (8001f54 <HAL_RCC_ClockConfig+0x1f8>)
 8001e78:	430a      	orrs	r2, r1
 8001e7a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e7c:	f7ff f91a 	bl	80010b4 <HAL_GetTick>
 8001e80:	0003      	movs	r3, r0
 8001e82:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e84:	e009      	b.n	8001e9a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e86:	f7ff f915 	bl	80010b4 <HAL_GetTick>
 8001e8a:	0002      	movs	r2, r0
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	1ad3      	subs	r3, r2, r3
 8001e90:	4a2f      	ldr	r2, [pc, #188]	@ (8001f50 <HAL_RCC_ClockConfig+0x1f4>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d901      	bls.n	8001e9a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001e96:	2303      	movs	r3, #3
 8001e98:	e054      	b.n	8001f44 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e9a:	4b2e      	ldr	r3, [pc, #184]	@ (8001f54 <HAL_RCC_ClockConfig+0x1f8>)
 8001e9c:	689b      	ldr	r3, [r3, #8]
 8001e9e:	2238      	movs	r2, #56	@ 0x38
 8001ea0:	401a      	ands	r2, r3
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	00db      	lsls	r3, r3, #3
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	d1ec      	bne.n	8001e86 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001eac:	4b27      	ldr	r3, [pc, #156]	@ (8001f4c <HAL_RCC_ClockConfig+0x1f0>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	2207      	movs	r2, #7
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	683a      	ldr	r2, [r7, #0]
 8001eb6:	429a      	cmp	r2, r3
 8001eb8:	d21e      	bcs.n	8001ef8 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eba:	4b24      	ldr	r3, [pc, #144]	@ (8001f4c <HAL_RCC_ClockConfig+0x1f0>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	2207      	movs	r2, #7
 8001ec0:	4393      	bics	r3, r2
 8001ec2:	0019      	movs	r1, r3
 8001ec4:	4b21      	ldr	r3, [pc, #132]	@ (8001f4c <HAL_RCC_ClockConfig+0x1f0>)
 8001ec6:	683a      	ldr	r2, [r7, #0]
 8001ec8:	430a      	orrs	r2, r1
 8001eca:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001ecc:	f7ff f8f2 	bl	80010b4 <HAL_GetTick>
 8001ed0:	0003      	movs	r3, r0
 8001ed2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001ed4:	e009      	b.n	8001eea <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ed6:	f7ff f8ed 	bl	80010b4 <HAL_GetTick>
 8001eda:	0002      	movs	r2, r0
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	1ad3      	subs	r3, r2, r3
 8001ee0:	4a1b      	ldr	r2, [pc, #108]	@ (8001f50 <HAL_RCC_ClockConfig+0x1f4>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d901      	bls.n	8001eea <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001ee6:	2303      	movs	r3, #3
 8001ee8:	e02c      	b.n	8001f44 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001eea:	4b18      	ldr	r3, [pc, #96]	@ (8001f4c <HAL_RCC_ClockConfig+0x1f0>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	2207      	movs	r2, #7
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	683a      	ldr	r2, [r7, #0]
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	d1ee      	bne.n	8001ed6 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	2204      	movs	r2, #4
 8001efe:	4013      	ands	r3, r2
 8001f00:	d009      	beq.n	8001f16 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001f02:	4b14      	ldr	r3, [pc, #80]	@ (8001f54 <HAL_RCC_ClockConfig+0x1f8>)
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	4a15      	ldr	r2, [pc, #84]	@ (8001f5c <HAL_RCC_ClockConfig+0x200>)
 8001f08:	4013      	ands	r3, r2
 8001f0a:	0019      	movs	r1, r3
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	68da      	ldr	r2, [r3, #12]
 8001f10:	4b10      	ldr	r3, [pc, #64]	@ (8001f54 <HAL_RCC_ClockConfig+0x1f8>)
 8001f12:	430a      	orrs	r2, r1
 8001f14:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001f16:	f000 f829 	bl	8001f6c <HAL_RCC_GetSysClockFreq>
 8001f1a:	0001      	movs	r1, r0
 8001f1c:	4b0d      	ldr	r3, [pc, #52]	@ (8001f54 <HAL_RCC_ClockConfig+0x1f8>)
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	0a1b      	lsrs	r3, r3, #8
 8001f22:	220f      	movs	r2, #15
 8001f24:	401a      	ands	r2, r3
 8001f26:	4b0e      	ldr	r3, [pc, #56]	@ (8001f60 <HAL_RCC_ClockConfig+0x204>)
 8001f28:	0092      	lsls	r2, r2, #2
 8001f2a:	58d3      	ldr	r3, [r2, r3]
 8001f2c:	221f      	movs	r2, #31
 8001f2e:	4013      	ands	r3, r2
 8001f30:	000a      	movs	r2, r1
 8001f32:	40da      	lsrs	r2, r3
 8001f34:	4b0b      	ldr	r3, [pc, #44]	@ (8001f64 <HAL_RCC_ClockConfig+0x208>)
 8001f36:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001f38:	4b0b      	ldr	r3, [pc, #44]	@ (8001f68 <HAL_RCC_ClockConfig+0x20c>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	0018      	movs	r0, r3
 8001f3e:	f7ff f85d 	bl	8000ffc <HAL_InitTick>
 8001f42:	0003      	movs	r3, r0
}
 8001f44:	0018      	movs	r0, r3
 8001f46:	46bd      	mov	sp, r7
 8001f48:	b004      	add	sp, #16
 8001f4a:	bd80      	pop	{r7, pc}
 8001f4c:	40022000 	.word	0x40022000
 8001f50:	00001388 	.word	0x00001388
 8001f54:	40021000 	.word	0x40021000
 8001f58:	fffff0ff 	.word	0xfffff0ff
 8001f5c:	ffff8fff 	.word	0xffff8fff
 8001f60:	08003a24 	.word	0x08003a24
 8001f64:	20000054 	.word	0x20000054
 8001f68:	20000058 	.word	0x20000058

08001f6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b086      	sub	sp, #24
 8001f70:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f72:	4b3c      	ldr	r3, [pc, #240]	@ (8002064 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f74:	689b      	ldr	r3, [r3, #8]
 8001f76:	2238      	movs	r2, #56	@ 0x38
 8001f78:	4013      	ands	r3, r2
 8001f7a:	d10f      	bne.n	8001f9c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001f7c:	4b39      	ldr	r3, [pc, #228]	@ (8002064 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	0adb      	lsrs	r3, r3, #11
 8001f82:	2207      	movs	r2, #7
 8001f84:	4013      	ands	r3, r2
 8001f86:	2201      	movs	r2, #1
 8001f88:	409a      	lsls	r2, r3
 8001f8a:	0013      	movs	r3, r2
 8001f8c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001f8e:	6839      	ldr	r1, [r7, #0]
 8001f90:	4835      	ldr	r0, [pc, #212]	@ (8002068 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001f92:	f7fe f8b7 	bl	8000104 <__udivsi3>
 8001f96:	0003      	movs	r3, r0
 8001f98:	613b      	str	r3, [r7, #16]
 8001f9a:	e05d      	b.n	8002058 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f9c:	4b31      	ldr	r3, [pc, #196]	@ (8002064 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	2238      	movs	r2, #56	@ 0x38
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	2b08      	cmp	r3, #8
 8001fa6:	d102      	bne.n	8001fae <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001fa8:	4b30      	ldr	r3, [pc, #192]	@ (800206c <HAL_RCC_GetSysClockFreq+0x100>)
 8001faa:	613b      	str	r3, [r7, #16]
 8001fac:	e054      	b.n	8002058 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001fae:	4b2d      	ldr	r3, [pc, #180]	@ (8002064 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	2238      	movs	r2, #56	@ 0x38
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	2b10      	cmp	r3, #16
 8001fb8:	d138      	bne.n	800202c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001fba:	4b2a      	ldr	r3, [pc, #168]	@ (8002064 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001fbc:	68db      	ldr	r3, [r3, #12]
 8001fbe:	2203      	movs	r2, #3
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001fc4:	4b27      	ldr	r3, [pc, #156]	@ (8002064 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001fc6:	68db      	ldr	r3, [r3, #12]
 8001fc8:	091b      	lsrs	r3, r3, #4
 8001fca:	2207      	movs	r2, #7
 8001fcc:	4013      	ands	r3, r2
 8001fce:	3301      	adds	r3, #1
 8001fd0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	2b03      	cmp	r3, #3
 8001fd6:	d10d      	bne.n	8001ff4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001fd8:	68b9      	ldr	r1, [r7, #8]
 8001fda:	4824      	ldr	r0, [pc, #144]	@ (800206c <HAL_RCC_GetSysClockFreq+0x100>)
 8001fdc:	f7fe f892 	bl	8000104 <__udivsi3>
 8001fe0:	0003      	movs	r3, r0
 8001fe2:	0019      	movs	r1, r3
 8001fe4:	4b1f      	ldr	r3, [pc, #124]	@ (8002064 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001fe6:	68db      	ldr	r3, [r3, #12]
 8001fe8:	0a1b      	lsrs	r3, r3, #8
 8001fea:	227f      	movs	r2, #127	@ 0x7f
 8001fec:	4013      	ands	r3, r2
 8001fee:	434b      	muls	r3, r1
 8001ff0:	617b      	str	r3, [r7, #20]
        break;
 8001ff2:	e00d      	b.n	8002010 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001ff4:	68b9      	ldr	r1, [r7, #8]
 8001ff6:	481c      	ldr	r0, [pc, #112]	@ (8002068 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001ff8:	f7fe f884 	bl	8000104 <__udivsi3>
 8001ffc:	0003      	movs	r3, r0
 8001ffe:	0019      	movs	r1, r3
 8002000:	4b18      	ldr	r3, [pc, #96]	@ (8002064 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002002:	68db      	ldr	r3, [r3, #12]
 8002004:	0a1b      	lsrs	r3, r3, #8
 8002006:	227f      	movs	r2, #127	@ 0x7f
 8002008:	4013      	ands	r3, r2
 800200a:	434b      	muls	r3, r1
 800200c:	617b      	str	r3, [r7, #20]
        break;
 800200e:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002010:	4b14      	ldr	r3, [pc, #80]	@ (8002064 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002012:	68db      	ldr	r3, [r3, #12]
 8002014:	0f5b      	lsrs	r3, r3, #29
 8002016:	2207      	movs	r2, #7
 8002018:	4013      	ands	r3, r2
 800201a:	3301      	adds	r3, #1
 800201c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800201e:	6879      	ldr	r1, [r7, #4]
 8002020:	6978      	ldr	r0, [r7, #20]
 8002022:	f7fe f86f 	bl	8000104 <__udivsi3>
 8002026:	0003      	movs	r3, r0
 8002028:	613b      	str	r3, [r7, #16]
 800202a:	e015      	b.n	8002058 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800202c:	4b0d      	ldr	r3, [pc, #52]	@ (8002064 <HAL_RCC_GetSysClockFreq+0xf8>)
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	2238      	movs	r2, #56	@ 0x38
 8002032:	4013      	ands	r3, r2
 8002034:	2b20      	cmp	r3, #32
 8002036:	d103      	bne.n	8002040 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002038:	2380      	movs	r3, #128	@ 0x80
 800203a:	021b      	lsls	r3, r3, #8
 800203c:	613b      	str	r3, [r7, #16]
 800203e:	e00b      	b.n	8002058 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002040:	4b08      	ldr	r3, [pc, #32]	@ (8002064 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002042:	689b      	ldr	r3, [r3, #8]
 8002044:	2238      	movs	r2, #56	@ 0x38
 8002046:	4013      	ands	r3, r2
 8002048:	2b18      	cmp	r3, #24
 800204a:	d103      	bne.n	8002054 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800204c:	23fa      	movs	r3, #250	@ 0xfa
 800204e:	01db      	lsls	r3, r3, #7
 8002050:	613b      	str	r3, [r7, #16]
 8002052:	e001      	b.n	8002058 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002054:	2300      	movs	r3, #0
 8002056:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002058:	693b      	ldr	r3, [r7, #16]
}
 800205a:	0018      	movs	r0, r3
 800205c:	46bd      	mov	sp, r7
 800205e:	b006      	add	sp, #24
 8002060:	bd80      	pop	{r7, pc}
 8002062:	46c0      	nop			@ (mov r8, r8)
 8002064:	40021000 	.word	0x40021000
 8002068:	00f42400 	.word	0x00f42400
 800206c:	007a1200 	.word	0x007a1200

08002070 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b086      	sub	sp, #24
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002078:	2313      	movs	r3, #19
 800207a:	18fb      	adds	r3, r7, r3
 800207c:	2200      	movs	r2, #0
 800207e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002080:	2312      	movs	r3, #18
 8002082:	18fb      	adds	r3, r7, r3
 8002084:	2200      	movs	r2, #0
 8002086:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	2380      	movs	r3, #128	@ 0x80
 800208e:	029b      	lsls	r3, r3, #10
 8002090:	4013      	ands	r3, r2
 8002092:	d100      	bne.n	8002096 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002094:	e0a3      	b.n	80021de <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002096:	2011      	movs	r0, #17
 8002098:	183b      	adds	r3, r7, r0
 800209a:	2200      	movs	r2, #0
 800209c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800209e:	4bc3      	ldr	r3, [pc, #780]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80020a0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80020a2:	2380      	movs	r3, #128	@ 0x80
 80020a4:	055b      	lsls	r3, r3, #21
 80020a6:	4013      	ands	r3, r2
 80020a8:	d110      	bne.n	80020cc <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020aa:	4bc0      	ldr	r3, [pc, #768]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80020ac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80020ae:	4bbf      	ldr	r3, [pc, #764]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80020b0:	2180      	movs	r1, #128	@ 0x80
 80020b2:	0549      	lsls	r1, r1, #21
 80020b4:	430a      	orrs	r2, r1
 80020b6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80020b8:	4bbc      	ldr	r3, [pc, #752]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80020ba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80020bc:	2380      	movs	r3, #128	@ 0x80
 80020be:	055b      	lsls	r3, r3, #21
 80020c0:	4013      	ands	r3, r2
 80020c2:	60bb      	str	r3, [r7, #8]
 80020c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020c6:	183b      	adds	r3, r7, r0
 80020c8:	2201      	movs	r2, #1
 80020ca:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80020cc:	4bb8      	ldr	r3, [pc, #736]	@ (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	4bb7      	ldr	r3, [pc, #732]	@ (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80020d2:	2180      	movs	r1, #128	@ 0x80
 80020d4:	0049      	lsls	r1, r1, #1
 80020d6:	430a      	orrs	r2, r1
 80020d8:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80020da:	f7fe ffeb 	bl	80010b4 <HAL_GetTick>
 80020de:	0003      	movs	r3, r0
 80020e0:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80020e2:	e00b      	b.n	80020fc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020e4:	f7fe ffe6 	bl	80010b4 <HAL_GetTick>
 80020e8:	0002      	movs	r2, r0
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	1ad3      	subs	r3, r2, r3
 80020ee:	2b02      	cmp	r3, #2
 80020f0:	d904      	bls.n	80020fc <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80020f2:	2313      	movs	r3, #19
 80020f4:	18fb      	adds	r3, r7, r3
 80020f6:	2203      	movs	r2, #3
 80020f8:	701a      	strb	r2, [r3, #0]
        break;
 80020fa:	e005      	b.n	8002108 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80020fc:	4bac      	ldr	r3, [pc, #688]	@ (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80020fe:	681a      	ldr	r2, [r3, #0]
 8002100:	2380      	movs	r3, #128	@ 0x80
 8002102:	005b      	lsls	r3, r3, #1
 8002104:	4013      	ands	r3, r2
 8002106:	d0ed      	beq.n	80020e4 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002108:	2313      	movs	r3, #19
 800210a:	18fb      	adds	r3, r7, r3
 800210c:	781b      	ldrb	r3, [r3, #0]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d154      	bne.n	80021bc <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002112:	4ba6      	ldr	r3, [pc, #664]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002114:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002116:	23c0      	movs	r3, #192	@ 0xc0
 8002118:	009b      	lsls	r3, r3, #2
 800211a:	4013      	ands	r3, r2
 800211c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d019      	beq.n	8002158 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002128:	697a      	ldr	r2, [r7, #20]
 800212a:	429a      	cmp	r2, r3
 800212c:	d014      	beq.n	8002158 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800212e:	4b9f      	ldr	r3, [pc, #636]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002130:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002132:	4aa0      	ldr	r2, [pc, #640]	@ (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002134:	4013      	ands	r3, r2
 8002136:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002138:	4b9c      	ldr	r3, [pc, #624]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800213a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800213c:	4b9b      	ldr	r3, [pc, #620]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800213e:	2180      	movs	r1, #128	@ 0x80
 8002140:	0249      	lsls	r1, r1, #9
 8002142:	430a      	orrs	r2, r1
 8002144:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002146:	4b99      	ldr	r3, [pc, #612]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002148:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800214a:	4b98      	ldr	r3, [pc, #608]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800214c:	499a      	ldr	r1, [pc, #616]	@ (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 800214e:	400a      	ands	r2, r1
 8002150:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002152:	4b96      	ldr	r3, [pc, #600]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002154:	697a      	ldr	r2, [r7, #20]
 8002156:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	2201      	movs	r2, #1
 800215c:	4013      	ands	r3, r2
 800215e:	d016      	beq.n	800218e <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002160:	f7fe ffa8 	bl	80010b4 <HAL_GetTick>
 8002164:	0003      	movs	r3, r0
 8002166:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002168:	e00c      	b.n	8002184 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800216a:	f7fe ffa3 	bl	80010b4 <HAL_GetTick>
 800216e:	0002      	movs	r2, r0
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	1ad3      	subs	r3, r2, r3
 8002174:	4a91      	ldr	r2, [pc, #580]	@ (80023bc <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d904      	bls.n	8002184 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800217a:	2313      	movs	r3, #19
 800217c:	18fb      	adds	r3, r7, r3
 800217e:	2203      	movs	r2, #3
 8002180:	701a      	strb	r2, [r3, #0]
            break;
 8002182:	e004      	b.n	800218e <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002184:	4b89      	ldr	r3, [pc, #548]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002186:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002188:	2202      	movs	r2, #2
 800218a:	4013      	ands	r3, r2
 800218c:	d0ed      	beq.n	800216a <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800218e:	2313      	movs	r3, #19
 8002190:	18fb      	adds	r3, r7, r3
 8002192:	781b      	ldrb	r3, [r3, #0]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d10a      	bne.n	80021ae <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002198:	4b84      	ldr	r3, [pc, #528]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800219a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800219c:	4a85      	ldr	r2, [pc, #532]	@ (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800219e:	4013      	ands	r3, r2
 80021a0:	0019      	movs	r1, r3
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80021a6:	4b81      	ldr	r3, [pc, #516]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80021a8:	430a      	orrs	r2, r1
 80021aa:	65da      	str	r2, [r3, #92]	@ 0x5c
 80021ac:	e00c      	b.n	80021c8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80021ae:	2312      	movs	r3, #18
 80021b0:	18fb      	adds	r3, r7, r3
 80021b2:	2213      	movs	r2, #19
 80021b4:	18ba      	adds	r2, r7, r2
 80021b6:	7812      	ldrb	r2, [r2, #0]
 80021b8:	701a      	strb	r2, [r3, #0]
 80021ba:	e005      	b.n	80021c8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80021bc:	2312      	movs	r3, #18
 80021be:	18fb      	adds	r3, r7, r3
 80021c0:	2213      	movs	r2, #19
 80021c2:	18ba      	adds	r2, r7, r2
 80021c4:	7812      	ldrb	r2, [r2, #0]
 80021c6:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80021c8:	2311      	movs	r3, #17
 80021ca:	18fb      	adds	r3, r7, r3
 80021cc:	781b      	ldrb	r3, [r3, #0]
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	d105      	bne.n	80021de <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021d2:	4b76      	ldr	r3, [pc, #472]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80021d4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80021d6:	4b75      	ldr	r3, [pc, #468]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80021d8:	4979      	ldr	r1, [pc, #484]	@ (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 80021da:	400a      	ands	r2, r1
 80021dc:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	2201      	movs	r2, #1
 80021e4:	4013      	ands	r3, r2
 80021e6:	d009      	beq.n	80021fc <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80021e8:	4b70      	ldr	r3, [pc, #448]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80021ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021ec:	2203      	movs	r2, #3
 80021ee:	4393      	bics	r3, r2
 80021f0:	0019      	movs	r1, r3
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	685a      	ldr	r2, [r3, #4]
 80021f6:	4b6d      	ldr	r3, [pc, #436]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80021f8:	430a      	orrs	r2, r1
 80021fa:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	2202      	movs	r2, #2
 8002202:	4013      	ands	r3, r2
 8002204:	d009      	beq.n	800221a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002206:	4b69      	ldr	r3, [pc, #420]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002208:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800220a:	220c      	movs	r2, #12
 800220c:	4393      	bics	r3, r2
 800220e:	0019      	movs	r1, r3
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	689a      	ldr	r2, [r3, #8]
 8002214:	4b65      	ldr	r3, [pc, #404]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002216:	430a      	orrs	r2, r1
 8002218:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	2210      	movs	r2, #16
 8002220:	4013      	ands	r3, r2
 8002222:	d009      	beq.n	8002238 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002224:	4b61      	ldr	r3, [pc, #388]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002226:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002228:	4a66      	ldr	r2, [pc, #408]	@ (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 800222a:	4013      	ands	r3, r2
 800222c:	0019      	movs	r1, r3
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	68da      	ldr	r2, [r3, #12]
 8002232:	4b5e      	ldr	r3, [pc, #376]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002234:	430a      	orrs	r2, r1
 8002236:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	2380      	movs	r3, #128	@ 0x80
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	4013      	ands	r3, r2
 8002242:	d009      	beq.n	8002258 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002244:	4b59      	ldr	r3, [pc, #356]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002246:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002248:	4a5f      	ldr	r2, [pc, #380]	@ (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800224a:	4013      	ands	r3, r2
 800224c:	0019      	movs	r1, r3
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	699a      	ldr	r2, [r3, #24]
 8002252:	4b56      	ldr	r3, [pc, #344]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002254:	430a      	orrs	r2, r1
 8002256:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	2380      	movs	r3, #128	@ 0x80
 800225e:	00db      	lsls	r3, r3, #3
 8002260:	4013      	ands	r3, r2
 8002262:	d009      	beq.n	8002278 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002264:	4b51      	ldr	r3, [pc, #324]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002266:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002268:	4a58      	ldr	r2, [pc, #352]	@ (80023cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800226a:	4013      	ands	r3, r2
 800226c:	0019      	movs	r1, r3
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	69da      	ldr	r2, [r3, #28]
 8002272:	4b4e      	ldr	r3, [pc, #312]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002274:	430a      	orrs	r2, r1
 8002276:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	2220      	movs	r2, #32
 800227e:	4013      	ands	r3, r2
 8002280:	d009      	beq.n	8002296 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002282:	4b4a      	ldr	r3, [pc, #296]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002284:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002286:	4a52      	ldr	r2, [pc, #328]	@ (80023d0 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8002288:	4013      	ands	r3, r2
 800228a:	0019      	movs	r1, r3
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	691a      	ldr	r2, [r3, #16]
 8002290:	4b46      	ldr	r3, [pc, #280]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002292:	430a      	orrs	r2, r1
 8002294:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	2380      	movs	r3, #128	@ 0x80
 800229c:	01db      	lsls	r3, r3, #7
 800229e:	4013      	ands	r3, r2
 80022a0:	d015      	beq.n	80022ce <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80022a2:	4b42      	ldr	r3, [pc, #264]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022a6:	009b      	lsls	r3, r3, #2
 80022a8:	0899      	lsrs	r1, r3, #2
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6a1a      	ldr	r2, [r3, #32]
 80022ae:	4b3f      	ldr	r3, [pc, #252]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022b0:	430a      	orrs	r2, r1
 80022b2:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6a1a      	ldr	r2, [r3, #32]
 80022b8:	2380      	movs	r3, #128	@ 0x80
 80022ba:	05db      	lsls	r3, r3, #23
 80022bc:	429a      	cmp	r2, r3
 80022be:	d106      	bne.n	80022ce <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80022c0:	4b3a      	ldr	r3, [pc, #232]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022c2:	68da      	ldr	r2, [r3, #12]
 80022c4:	4b39      	ldr	r3, [pc, #228]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022c6:	2180      	movs	r1, #128	@ 0x80
 80022c8:	0249      	lsls	r1, r1, #9
 80022ca:	430a      	orrs	r2, r1
 80022cc:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	2380      	movs	r3, #128	@ 0x80
 80022d4:	031b      	lsls	r3, r3, #12
 80022d6:	4013      	ands	r3, r2
 80022d8:	d009      	beq.n	80022ee <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80022da:	4b34      	ldr	r3, [pc, #208]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022de:	2240      	movs	r2, #64	@ 0x40
 80022e0:	4393      	bics	r3, r2
 80022e2:	0019      	movs	r1, r3
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80022e8:	4b30      	ldr	r3, [pc, #192]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022ea:	430a      	orrs	r2, r1
 80022ec:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681a      	ldr	r2, [r3, #0]
 80022f2:	2380      	movs	r3, #128	@ 0x80
 80022f4:	039b      	lsls	r3, r3, #14
 80022f6:	4013      	ands	r3, r2
 80022f8:	d016      	beq.n	8002328 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80022fa:	4b2c      	ldr	r3, [pc, #176]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022fe:	4a35      	ldr	r2, [pc, #212]	@ (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002300:	4013      	ands	r3, r2
 8002302:	0019      	movs	r1, r3
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002308:	4b28      	ldr	r3, [pc, #160]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800230a:	430a      	orrs	r2, r1
 800230c:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002312:	2380      	movs	r3, #128	@ 0x80
 8002314:	03db      	lsls	r3, r3, #15
 8002316:	429a      	cmp	r2, r3
 8002318:	d106      	bne.n	8002328 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800231a:	4b24      	ldr	r3, [pc, #144]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800231c:	68da      	ldr	r2, [r3, #12]
 800231e:	4b23      	ldr	r3, [pc, #140]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002320:	2180      	movs	r1, #128	@ 0x80
 8002322:	0449      	lsls	r1, r1, #17
 8002324:	430a      	orrs	r2, r1
 8002326:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	2380      	movs	r3, #128	@ 0x80
 800232e:	03db      	lsls	r3, r3, #15
 8002330:	4013      	ands	r3, r2
 8002332:	d016      	beq.n	8002362 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002334:	4b1d      	ldr	r3, [pc, #116]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002336:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002338:	4a27      	ldr	r2, [pc, #156]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 800233a:	4013      	ands	r3, r2
 800233c:	0019      	movs	r1, r3
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002342:	4b1a      	ldr	r3, [pc, #104]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002344:	430a      	orrs	r2, r1
 8002346:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800234c:	2380      	movs	r3, #128	@ 0x80
 800234e:	045b      	lsls	r3, r3, #17
 8002350:	429a      	cmp	r2, r3
 8002352:	d106      	bne.n	8002362 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002354:	4b15      	ldr	r3, [pc, #84]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002356:	68da      	ldr	r2, [r3, #12]
 8002358:	4b14      	ldr	r3, [pc, #80]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800235a:	2180      	movs	r1, #128	@ 0x80
 800235c:	0449      	lsls	r1, r1, #17
 800235e:	430a      	orrs	r2, r1
 8002360:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	2380      	movs	r3, #128	@ 0x80
 8002368:	011b      	lsls	r3, r3, #4
 800236a:	4013      	ands	r3, r2
 800236c:	d016      	beq.n	800239c <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800236e:	4b0f      	ldr	r3, [pc, #60]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002370:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002372:	4a1a      	ldr	r2, [pc, #104]	@ (80023dc <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8002374:	4013      	ands	r3, r2
 8002376:	0019      	movs	r1, r3
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	695a      	ldr	r2, [r3, #20]
 800237c:	4b0b      	ldr	r3, [pc, #44]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800237e:	430a      	orrs	r2, r1
 8002380:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	695a      	ldr	r2, [r3, #20]
 8002386:	2380      	movs	r3, #128	@ 0x80
 8002388:	01db      	lsls	r3, r3, #7
 800238a:	429a      	cmp	r2, r3
 800238c:	d106      	bne.n	800239c <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800238e:	4b07      	ldr	r3, [pc, #28]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002390:	68da      	ldr	r2, [r3, #12]
 8002392:	4b06      	ldr	r3, [pc, #24]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002394:	2180      	movs	r1, #128	@ 0x80
 8002396:	0249      	lsls	r1, r1, #9
 8002398:	430a      	orrs	r2, r1
 800239a:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800239c:	2312      	movs	r3, #18
 800239e:	18fb      	adds	r3, r7, r3
 80023a0:	781b      	ldrb	r3, [r3, #0]
}
 80023a2:	0018      	movs	r0, r3
 80023a4:	46bd      	mov	sp, r7
 80023a6:	b006      	add	sp, #24
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	46c0      	nop			@ (mov r8, r8)
 80023ac:	40021000 	.word	0x40021000
 80023b0:	40007000 	.word	0x40007000
 80023b4:	fffffcff 	.word	0xfffffcff
 80023b8:	fffeffff 	.word	0xfffeffff
 80023bc:	00001388 	.word	0x00001388
 80023c0:	efffffff 	.word	0xefffffff
 80023c4:	fffff3ff 	.word	0xfffff3ff
 80023c8:	fff3ffff 	.word	0xfff3ffff
 80023cc:	ffcfffff 	.word	0xffcfffff
 80023d0:	ffffcfff 	.word	0xffffcfff
 80023d4:	ffbfffff 	.word	0xffbfffff
 80023d8:	feffffff 	.word	0xfeffffff
 80023dc:	ffff3fff 	.word	0xffff3fff

080023e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b082      	sub	sp, #8
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d101      	bne.n	80023f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	e04a      	b.n	8002488 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	223d      	movs	r2, #61	@ 0x3d
 80023f6:	5c9b      	ldrb	r3, [r3, r2]
 80023f8:	b2db      	uxtb	r3, r3
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d107      	bne.n	800240e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	223c      	movs	r2, #60	@ 0x3c
 8002402:	2100      	movs	r1, #0
 8002404:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	0018      	movs	r0, r3
 800240a:	f7fe fca7 	bl	8000d5c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	223d      	movs	r2, #61	@ 0x3d
 8002412:	2102      	movs	r1, #2
 8002414:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	3304      	adds	r3, #4
 800241e:	0019      	movs	r1, r3
 8002420:	0010      	movs	r0, r2
 8002422:	f000 fd93 	bl	8002f4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2248      	movs	r2, #72	@ 0x48
 800242a:	2101      	movs	r1, #1
 800242c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	223e      	movs	r2, #62	@ 0x3e
 8002432:	2101      	movs	r1, #1
 8002434:	5499      	strb	r1, [r3, r2]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	223f      	movs	r2, #63	@ 0x3f
 800243a:	2101      	movs	r1, #1
 800243c:	5499      	strb	r1, [r3, r2]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2240      	movs	r2, #64	@ 0x40
 8002442:	2101      	movs	r1, #1
 8002444:	5499      	strb	r1, [r3, r2]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2241      	movs	r2, #65	@ 0x41
 800244a:	2101      	movs	r1, #1
 800244c:	5499      	strb	r1, [r3, r2]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2242      	movs	r2, #66	@ 0x42
 8002452:	2101      	movs	r1, #1
 8002454:	5499      	strb	r1, [r3, r2]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2243      	movs	r2, #67	@ 0x43
 800245a:	2101      	movs	r1, #1
 800245c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2244      	movs	r2, #68	@ 0x44
 8002462:	2101      	movs	r1, #1
 8002464:	5499      	strb	r1, [r3, r2]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2245      	movs	r2, #69	@ 0x45
 800246a:	2101      	movs	r1, #1
 800246c:	5499      	strb	r1, [r3, r2]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2246      	movs	r2, #70	@ 0x46
 8002472:	2101      	movs	r1, #1
 8002474:	5499      	strb	r1, [r3, r2]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2247      	movs	r2, #71	@ 0x47
 800247a:	2101      	movs	r1, #1
 800247c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	223d      	movs	r2, #61	@ 0x3d
 8002482:	2101      	movs	r1, #1
 8002484:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002486:	2300      	movs	r3, #0
}
 8002488:	0018      	movs	r0, r3
 800248a:	46bd      	mov	sp, r7
 800248c:	b002      	add	sp, #8
 800248e:	bd80      	pop	{r7, pc}

08002490 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b084      	sub	sp, #16
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	223d      	movs	r2, #61	@ 0x3d
 800249c:	5c9b      	ldrb	r3, [r3, r2]
 800249e:	b2db      	uxtb	r3, r3
 80024a0:	2b01      	cmp	r3, #1
 80024a2:	d001      	beq.n	80024a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80024a4:	2301      	movs	r3, #1
 80024a6:	e042      	b.n	800252e <HAL_TIM_Base_Start_IT+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	223d      	movs	r2, #61	@ 0x3d
 80024ac:	2102      	movs	r1, #2
 80024ae:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	68da      	ldr	r2, [r3, #12]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	2101      	movs	r1, #1
 80024bc:	430a      	orrs	r2, r1
 80024be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a1c      	ldr	r2, [pc, #112]	@ (8002538 <HAL_TIM_Base_Start_IT+0xa8>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d00f      	beq.n	80024ea <HAL_TIM_Base_Start_IT+0x5a>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	2380      	movs	r3, #128	@ 0x80
 80024d0:	05db      	lsls	r3, r3, #23
 80024d2:	429a      	cmp	r2, r3
 80024d4:	d009      	beq.n	80024ea <HAL_TIM_Base_Start_IT+0x5a>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a18      	ldr	r2, [pc, #96]	@ (800253c <HAL_TIM_Base_Start_IT+0xac>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d004      	beq.n	80024ea <HAL_TIM_Base_Start_IT+0x5a>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a16      	ldr	r2, [pc, #88]	@ (8002540 <HAL_TIM_Base_Start_IT+0xb0>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d116      	bne.n	8002518 <HAL_TIM_Base_Start_IT+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	4a14      	ldr	r2, [pc, #80]	@ (8002544 <HAL_TIM_Base_Start_IT+0xb4>)
 80024f2:	4013      	ands	r3, r2
 80024f4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	2b06      	cmp	r3, #6
 80024fa:	d016      	beq.n	800252a <HAL_TIM_Base_Start_IT+0x9a>
 80024fc:	68fa      	ldr	r2, [r7, #12]
 80024fe:	2380      	movs	r3, #128	@ 0x80
 8002500:	025b      	lsls	r3, r3, #9
 8002502:	429a      	cmp	r2, r3
 8002504:	d011      	beq.n	800252a <HAL_TIM_Base_Start_IT+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	2101      	movs	r1, #1
 8002512:	430a      	orrs	r2, r1
 8002514:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002516:	e008      	b.n	800252a <HAL_TIM_Base_Start_IT+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	2101      	movs	r1, #1
 8002524:	430a      	orrs	r2, r1
 8002526:	601a      	str	r2, [r3, #0]
 8002528:	e000      	b.n	800252c <HAL_TIM_Base_Start_IT+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800252a:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800252c:	2300      	movs	r3, #0
}
 800252e:	0018      	movs	r0, r3
 8002530:	46bd      	mov	sp, r7
 8002532:	b004      	add	sp, #16
 8002534:	bd80      	pop	{r7, pc}
 8002536:	46c0      	nop			@ (mov r8, r8)
 8002538:	40012c00 	.word	0x40012c00
 800253c:	40000400 	.word	0x40000400
 8002540:	40014000 	.word	0x40014000
 8002544:	00010007 	.word	0x00010007

08002548 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b082      	sub	sp, #8
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	68da      	ldr	r2, [r3, #12]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	2101      	movs	r1, #1
 800255c:	438a      	bics	r2, r1
 800255e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	6a1b      	ldr	r3, [r3, #32]
 8002566:	4a0d      	ldr	r2, [pc, #52]	@ (800259c <HAL_TIM_Base_Stop_IT+0x54>)
 8002568:	4013      	ands	r3, r2
 800256a:	d10d      	bne.n	8002588 <HAL_TIM_Base_Stop_IT+0x40>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	6a1b      	ldr	r3, [r3, #32]
 8002572:	4a0b      	ldr	r2, [pc, #44]	@ (80025a0 <HAL_TIM_Base_Stop_IT+0x58>)
 8002574:	4013      	ands	r3, r2
 8002576:	d107      	bne.n	8002588 <HAL_TIM_Base_Stop_IT+0x40>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	2101      	movs	r1, #1
 8002584:	438a      	bics	r2, r1
 8002586:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	223d      	movs	r2, #61	@ 0x3d
 800258c:	2101      	movs	r1, #1
 800258e:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8002590:	2300      	movs	r3, #0
}
 8002592:	0018      	movs	r0, r3
 8002594:	46bd      	mov	sp, r7
 8002596:	b002      	add	sp, #8
 8002598:	bd80      	pop	{r7, pc}
 800259a:	46c0      	nop			@ (mov r8, r8)
 800259c:	00001111 	.word	0x00001111
 80025a0:	00000444 	.word	0x00000444

080025a4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b082      	sub	sp, #8
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d101      	bne.n	80025b6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e04a      	b.n	800264c <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	223d      	movs	r2, #61	@ 0x3d
 80025ba:	5c9b      	ldrb	r3, [r3, r2]
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d107      	bne.n	80025d2 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	223c      	movs	r2, #60	@ 0x3c
 80025c6:	2100      	movs	r1, #0
 80025c8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	0018      	movs	r0, r3
 80025ce:	f000 f841 	bl	8002654 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	223d      	movs	r2, #61	@ 0x3d
 80025d6:	2102      	movs	r1, #2
 80025d8:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	3304      	adds	r3, #4
 80025e2:	0019      	movs	r1, r3
 80025e4:	0010      	movs	r0, r2
 80025e6:	f000 fcb1 	bl	8002f4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2248      	movs	r2, #72	@ 0x48
 80025ee:	2101      	movs	r1, #1
 80025f0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	223e      	movs	r2, #62	@ 0x3e
 80025f6:	2101      	movs	r1, #1
 80025f8:	5499      	strb	r1, [r3, r2]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	223f      	movs	r2, #63	@ 0x3f
 80025fe:	2101      	movs	r1, #1
 8002600:	5499      	strb	r1, [r3, r2]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2240      	movs	r2, #64	@ 0x40
 8002606:	2101      	movs	r1, #1
 8002608:	5499      	strb	r1, [r3, r2]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2241      	movs	r2, #65	@ 0x41
 800260e:	2101      	movs	r1, #1
 8002610:	5499      	strb	r1, [r3, r2]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2242      	movs	r2, #66	@ 0x42
 8002616:	2101      	movs	r1, #1
 8002618:	5499      	strb	r1, [r3, r2]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2243      	movs	r2, #67	@ 0x43
 800261e:	2101      	movs	r1, #1
 8002620:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2244      	movs	r2, #68	@ 0x44
 8002626:	2101      	movs	r1, #1
 8002628:	5499      	strb	r1, [r3, r2]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2245      	movs	r2, #69	@ 0x45
 800262e:	2101      	movs	r1, #1
 8002630:	5499      	strb	r1, [r3, r2]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2246      	movs	r2, #70	@ 0x46
 8002636:	2101      	movs	r1, #1
 8002638:	5499      	strb	r1, [r3, r2]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2247      	movs	r2, #71	@ 0x47
 800263e:	2101      	movs	r1, #1
 8002640:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	223d      	movs	r2, #61	@ 0x3d
 8002646:	2101      	movs	r1, #1
 8002648:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800264a:	2300      	movs	r3, #0
}
 800264c:	0018      	movs	r0, r3
 800264e:	46bd      	mov	sp, r7
 8002650:	b002      	add	sp, #8
 8002652:	bd80      	pop	{r7, pc}

08002654 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b082      	sub	sp, #8
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800265c:	46c0      	nop			@ (mov r8, r8)
 800265e:	46bd      	mov	sp, r7
 8002660:	b002      	add	sp, #8
 8002662:	bd80      	pop	{r7, pc}

08002664 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b084      	sub	sp, #16
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
 800266c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d108      	bne.n	8002686 <HAL_TIM_PWM_Start+0x22>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	223e      	movs	r2, #62	@ 0x3e
 8002678:	5c9b      	ldrb	r3, [r3, r2]
 800267a:	b2db      	uxtb	r3, r3
 800267c:	3b01      	subs	r3, #1
 800267e:	1e5a      	subs	r2, r3, #1
 8002680:	4193      	sbcs	r3, r2
 8002682:	b2db      	uxtb	r3, r3
 8002684:	e037      	b.n	80026f6 <HAL_TIM_PWM_Start+0x92>
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	2b04      	cmp	r3, #4
 800268a:	d108      	bne.n	800269e <HAL_TIM_PWM_Start+0x3a>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	223f      	movs	r2, #63	@ 0x3f
 8002690:	5c9b      	ldrb	r3, [r3, r2]
 8002692:	b2db      	uxtb	r3, r3
 8002694:	3b01      	subs	r3, #1
 8002696:	1e5a      	subs	r2, r3, #1
 8002698:	4193      	sbcs	r3, r2
 800269a:	b2db      	uxtb	r3, r3
 800269c:	e02b      	b.n	80026f6 <HAL_TIM_PWM_Start+0x92>
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	2b08      	cmp	r3, #8
 80026a2:	d108      	bne.n	80026b6 <HAL_TIM_PWM_Start+0x52>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2240      	movs	r2, #64	@ 0x40
 80026a8:	5c9b      	ldrb	r3, [r3, r2]
 80026aa:	b2db      	uxtb	r3, r3
 80026ac:	3b01      	subs	r3, #1
 80026ae:	1e5a      	subs	r2, r3, #1
 80026b0:	4193      	sbcs	r3, r2
 80026b2:	b2db      	uxtb	r3, r3
 80026b4:	e01f      	b.n	80026f6 <HAL_TIM_PWM_Start+0x92>
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	2b0c      	cmp	r3, #12
 80026ba:	d108      	bne.n	80026ce <HAL_TIM_PWM_Start+0x6a>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2241      	movs	r2, #65	@ 0x41
 80026c0:	5c9b      	ldrb	r3, [r3, r2]
 80026c2:	b2db      	uxtb	r3, r3
 80026c4:	3b01      	subs	r3, #1
 80026c6:	1e5a      	subs	r2, r3, #1
 80026c8:	4193      	sbcs	r3, r2
 80026ca:	b2db      	uxtb	r3, r3
 80026cc:	e013      	b.n	80026f6 <HAL_TIM_PWM_Start+0x92>
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	2b10      	cmp	r3, #16
 80026d2:	d108      	bne.n	80026e6 <HAL_TIM_PWM_Start+0x82>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2242      	movs	r2, #66	@ 0x42
 80026d8:	5c9b      	ldrb	r3, [r3, r2]
 80026da:	b2db      	uxtb	r3, r3
 80026dc:	3b01      	subs	r3, #1
 80026de:	1e5a      	subs	r2, r3, #1
 80026e0:	4193      	sbcs	r3, r2
 80026e2:	b2db      	uxtb	r3, r3
 80026e4:	e007      	b.n	80026f6 <HAL_TIM_PWM_Start+0x92>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2243      	movs	r2, #67	@ 0x43
 80026ea:	5c9b      	ldrb	r3, [r3, r2]
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	3b01      	subs	r3, #1
 80026f0:	1e5a      	subs	r2, r3, #1
 80026f2:	4193      	sbcs	r3, r2
 80026f4:	b2db      	uxtb	r3, r3
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d001      	beq.n	80026fe <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	e08b      	b.n	8002816 <HAL_TIM_PWM_Start+0x1b2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d104      	bne.n	800270e <HAL_TIM_PWM_Start+0xaa>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	223e      	movs	r2, #62	@ 0x3e
 8002708:	2102      	movs	r1, #2
 800270a:	5499      	strb	r1, [r3, r2]
 800270c:	e023      	b.n	8002756 <HAL_TIM_PWM_Start+0xf2>
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	2b04      	cmp	r3, #4
 8002712:	d104      	bne.n	800271e <HAL_TIM_PWM_Start+0xba>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	223f      	movs	r2, #63	@ 0x3f
 8002718:	2102      	movs	r1, #2
 800271a:	5499      	strb	r1, [r3, r2]
 800271c:	e01b      	b.n	8002756 <HAL_TIM_PWM_Start+0xf2>
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	2b08      	cmp	r3, #8
 8002722:	d104      	bne.n	800272e <HAL_TIM_PWM_Start+0xca>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2240      	movs	r2, #64	@ 0x40
 8002728:	2102      	movs	r1, #2
 800272a:	5499      	strb	r1, [r3, r2]
 800272c:	e013      	b.n	8002756 <HAL_TIM_PWM_Start+0xf2>
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	2b0c      	cmp	r3, #12
 8002732:	d104      	bne.n	800273e <HAL_TIM_PWM_Start+0xda>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2241      	movs	r2, #65	@ 0x41
 8002738:	2102      	movs	r1, #2
 800273a:	5499      	strb	r1, [r3, r2]
 800273c:	e00b      	b.n	8002756 <HAL_TIM_PWM_Start+0xf2>
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	2b10      	cmp	r3, #16
 8002742:	d104      	bne.n	800274e <HAL_TIM_PWM_Start+0xea>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2242      	movs	r2, #66	@ 0x42
 8002748:	2102      	movs	r1, #2
 800274a:	5499      	strb	r1, [r3, r2]
 800274c:	e003      	b.n	8002756 <HAL_TIM_PWM_Start+0xf2>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2243      	movs	r2, #67	@ 0x43
 8002752:	2102      	movs	r1, #2
 8002754:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	6839      	ldr	r1, [r7, #0]
 800275c:	2201      	movs	r2, #1
 800275e:	0018      	movs	r0, r3
 8002760:	f000 ffe2 	bl	8003728 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a2d      	ldr	r2, [pc, #180]	@ (8002820 <HAL_TIM_PWM_Start+0x1bc>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d00e      	beq.n	800278c <HAL_TIM_PWM_Start+0x128>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a2c      	ldr	r2, [pc, #176]	@ (8002824 <HAL_TIM_PWM_Start+0x1c0>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d009      	beq.n	800278c <HAL_TIM_PWM_Start+0x128>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a2a      	ldr	r2, [pc, #168]	@ (8002828 <HAL_TIM_PWM_Start+0x1c4>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d004      	beq.n	800278c <HAL_TIM_PWM_Start+0x128>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a29      	ldr	r2, [pc, #164]	@ (800282c <HAL_TIM_PWM_Start+0x1c8>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d101      	bne.n	8002790 <HAL_TIM_PWM_Start+0x12c>
 800278c:	2301      	movs	r3, #1
 800278e:	e000      	b.n	8002792 <HAL_TIM_PWM_Start+0x12e>
 8002790:	2300      	movs	r3, #0
 8002792:	2b00      	cmp	r3, #0
 8002794:	d008      	beq.n	80027a8 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	2180      	movs	r1, #128	@ 0x80
 80027a2:	0209      	lsls	r1, r1, #8
 80027a4:	430a      	orrs	r2, r1
 80027a6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a1c      	ldr	r2, [pc, #112]	@ (8002820 <HAL_TIM_PWM_Start+0x1bc>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d00f      	beq.n	80027d2 <HAL_TIM_PWM_Start+0x16e>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	2380      	movs	r3, #128	@ 0x80
 80027b8:	05db      	lsls	r3, r3, #23
 80027ba:	429a      	cmp	r2, r3
 80027bc:	d009      	beq.n	80027d2 <HAL_TIM_PWM_Start+0x16e>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a1b      	ldr	r2, [pc, #108]	@ (8002830 <HAL_TIM_PWM_Start+0x1cc>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d004      	beq.n	80027d2 <HAL_TIM_PWM_Start+0x16e>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a15      	ldr	r2, [pc, #84]	@ (8002824 <HAL_TIM_PWM_Start+0x1c0>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d116      	bne.n	8002800 <HAL_TIM_PWM_Start+0x19c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	4a16      	ldr	r2, [pc, #88]	@ (8002834 <HAL_TIM_PWM_Start+0x1d0>)
 80027da:	4013      	ands	r3, r2
 80027dc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	2b06      	cmp	r3, #6
 80027e2:	d016      	beq.n	8002812 <HAL_TIM_PWM_Start+0x1ae>
 80027e4:	68fa      	ldr	r2, [r7, #12]
 80027e6:	2380      	movs	r3, #128	@ 0x80
 80027e8:	025b      	lsls	r3, r3, #9
 80027ea:	429a      	cmp	r2, r3
 80027ec:	d011      	beq.n	8002812 <HAL_TIM_PWM_Start+0x1ae>
    {
      __HAL_TIM_ENABLE(htim);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	681a      	ldr	r2, [r3, #0]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	2101      	movs	r1, #1
 80027fa:	430a      	orrs	r2, r1
 80027fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027fe:	e008      	b.n	8002812 <HAL_TIM_PWM_Start+0x1ae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	681a      	ldr	r2, [r3, #0]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	2101      	movs	r1, #1
 800280c:	430a      	orrs	r2, r1
 800280e:	601a      	str	r2, [r3, #0]
 8002810:	e000      	b.n	8002814 <HAL_TIM_PWM_Start+0x1b0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002812:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8002814:	2300      	movs	r3, #0
}
 8002816:	0018      	movs	r0, r3
 8002818:	46bd      	mov	sp, r7
 800281a:	b004      	add	sp, #16
 800281c:	bd80      	pop	{r7, pc}
 800281e:	46c0      	nop			@ (mov r8, r8)
 8002820:	40012c00 	.word	0x40012c00
 8002824:	40014000 	.word	0x40014000
 8002828:	40014400 	.word	0x40014400
 800282c:	40014800 	.word	0x40014800
 8002830:	40000400 	.word	0x40000400
 8002834:	00010007 	.word	0x00010007

08002838 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b082      	sub	sp, #8
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
 8002840:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	6839      	ldr	r1, [r7, #0]
 8002848:	2200      	movs	r2, #0
 800284a:	0018      	movs	r0, r3
 800284c:	f000 ff6c 	bl	8003728 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a37      	ldr	r2, [pc, #220]	@ (8002934 <HAL_TIM_PWM_Stop+0xfc>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d00e      	beq.n	8002878 <HAL_TIM_PWM_Stop+0x40>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a36      	ldr	r2, [pc, #216]	@ (8002938 <HAL_TIM_PWM_Stop+0x100>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d009      	beq.n	8002878 <HAL_TIM_PWM_Stop+0x40>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a34      	ldr	r2, [pc, #208]	@ (800293c <HAL_TIM_PWM_Stop+0x104>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d004      	beq.n	8002878 <HAL_TIM_PWM_Stop+0x40>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a33      	ldr	r2, [pc, #204]	@ (8002940 <HAL_TIM_PWM_Stop+0x108>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d101      	bne.n	800287c <HAL_TIM_PWM_Stop+0x44>
 8002878:	2301      	movs	r3, #1
 800287a:	e000      	b.n	800287e <HAL_TIM_PWM_Stop+0x46>
 800287c:	2300      	movs	r3, #0
 800287e:	2b00      	cmp	r3, #0
 8002880:	d013      	beq.n	80028aa <HAL_TIM_PWM_Stop+0x72>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	6a1b      	ldr	r3, [r3, #32]
 8002888:	4a2e      	ldr	r2, [pc, #184]	@ (8002944 <HAL_TIM_PWM_Stop+0x10c>)
 800288a:	4013      	ands	r3, r2
 800288c:	d10d      	bne.n	80028aa <HAL_TIM_PWM_Stop+0x72>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	6a1b      	ldr	r3, [r3, #32]
 8002894:	4a2c      	ldr	r2, [pc, #176]	@ (8002948 <HAL_TIM_PWM_Stop+0x110>)
 8002896:	4013      	ands	r3, r2
 8002898:	d107      	bne.n	80028aa <HAL_TIM_PWM_Stop+0x72>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4929      	ldr	r1, [pc, #164]	@ (800294c <HAL_TIM_PWM_Stop+0x114>)
 80028a6:	400a      	ands	r2, r1
 80028a8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	6a1b      	ldr	r3, [r3, #32]
 80028b0:	4a24      	ldr	r2, [pc, #144]	@ (8002944 <HAL_TIM_PWM_Stop+0x10c>)
 80028b2:	4013      	ands	r3, r2
 80028b4:	d10d      	bne.n	80028d2 <HAL_TIM_PWM_Stop+0x9a>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	6a1b      	ldr	r3, [r3, #32]
 80028bc:	4a22      	ldr	r2, [pc, #136]	@ (8002948 <HAL_TIM_PWM_Stop+0x110>)
 80028be:	4013      	ands	r3, r2
 80028c0:	d107      	bne.n	80028d2 <HAL_TIM_PWM_Stop+0x9a>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	2101      	movs	r1, #1
 80028ce:	438a      	bics	r2, r1
 80028d0:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d104      	bne.n	80028e2 <HAL_TIM_PWM_Stop+0xaa>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	223e      	movs	r2, #62	@ 0x3e
 80028dc:	2101      	movs	r1, #1
 80028de:	5499      	strb	r1, [r3, r2]
 80028e0:	e023      	b.n	800292a <HAL_TIM_PWM_Stop+0xf2>
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	2b04      	cmp	r3, #4
 80028e6:	d104      	bne.n	80028f2 <HAL_TIM_PWM_Stop+0xba>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	223f      	movs	r2, #63	@ 0x3f
 80028ec:	2101      	movs	r1, #1
 80028ee:	5499      	strb	r1, [r3, r2]
 80028f0:	e01b      	b.n	800292a <HAL_TIM_PWM_Stop+0xf2>
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	2b08      	cmp	r3, #8
 80028f6:	d104      	bne.n	8002902 <HAL_TIM_PWM_Stop+0xca>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2240      	movs	r2, #64	@ 0x40
 80028fc:	2101      	movs	r1, #1
 80028fe:	5499      	strb	r1, [r3, r2]
 8002900:	e013      	b.n	800292a <HAL_TIM_PWM_Stop+0xf2>
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	2b0c      	cmp	r3, #12
 8002906:	d104      	bne.n	8002912 <HAL_TIM_PWM_Stop+0xda>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2241      	movs	r2, #65	@ 0x41
 800290c:	2101      	movs	r1, #1
 800290e:	5499      	strb	r1, [r3, r2]
 8002910:	e00b      	b.n	800292a <HAL_TIM_PWM_Stop+0xf2>
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	2b10      	cmp	r3, #16
 8002916:	d104      	bne.n	8002922 <HAL_TIM_PWM_Stop+0xea>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2242      	movs	r2, #66	@ 0x42
 800291c:	2101      	movs	r1, #1
 800291e:	5499      	strb	r1, [r3, r2]
 8002920:	e003      	b.n	800292a <HAL_TIM_PWM_Stop+0xf2>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2243      	movs	r2, #67	@ 0x43
 8002926:	2101      	movs	r1, #1
 8002928:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800292a:	2300      	movs	r3, #0
}
 800292c:	0018      	movs	r0, r3
 800292e:	46bd      	mov	sp, r7
 8002930:	b002      	add	sp, #8
 8002932:	bd80      	pop	{r7, pc}
 8002934:	40012c00 	.word	0x40012c00
 8002938:	40014000 	.word	0x40014000
 800293c:	40014400 	.word	0x40014400
 8002940:	40014800 	.word	0x40014800
 8002944:	00001111 	.word	0x00001111
 8002948:	00000444 	.word	0x00000444
 800294c:	ffff7fff 	.word	0xffff7fff

08002950 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b084      	sub	sp, #16
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	68db      	ldr	r3, [r3, #12]
 800295e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	691b      	ldr	r3, [r3, #16]
 8002966:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	2202      	movs	r2, #2
 800296c:	4013      	ands	r3, r2
 800296e:	d021      	beq.n	80029b4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	2202      	movs	r2, #2
 8002974:	4013      	ands	r3, r2
 8002976:	d01d      	beq.n	80029b4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	2203      	movs	r2, #3
 800297e:	4252      	negs	r2, r2
 8002980:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2201      	movs	r2, #1
 8002986:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	699b      	ldr	r3, [r3, #24]
 800298e:	2203      	movs	r2, #3
 8002990:	4013      	ands	r3, r2
 8002992:	d004      	beq.n	800299e <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	0018      	movs	r0, r3
 8002998:	f000 fac0 	bl	8002f1c <HAL_TIM_IC_CaptureCallback>
 800299c:	e007      	b.n	80029ae <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	0018      	movs	r0, r3
 80029a2:	f000 fab3 	bl	8002f0c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	0018      	movs	r0, r3
 80029aa:	f000 fabf 	bl	8002f2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2200      	movs	r2, #0
 80029b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	2204      	movs	r2, #4
 80029b8:	4013      	ands	r3, r2
 80029ba:	d022      	beq.n	8002a02 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	2204      	movs	r2, #4
 80029c0:	4013      	ands	r3, r2
 80029c2:	d01e      	beq.n	8002a02 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	2205      	movs	r2, #5
 80029ca:	4252      	negs	r2, r2
 80029cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2202      	movs	r2, #2
 80029d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	699a      	ldr	r2, [r3, #24]
 80029da:	23c0      	movs	r3, #192	@ 0xc0
 80029dc:	009b      	lsls	r3, r3, #2
 80029de:	4013      	ands	r3, r2
 80029e0:	d004      	beq.n	80029ec <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	0018      	movs	r0, r3
 80029e6:	f000 fa99 	bl	8002f1c <HAL_TIM_IC_CaptureCallback>
 80029ea:	e007      	b.n	80029fc <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	0018      	movs	r0, r3
 80029f0:	f000 fa8c 	bl	8002f0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	0018      	movs	r0, r3
 80029f8:	f000 fa98 	bl	8002f2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2200      	movs	r2, #0
 8002a00:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	2208      	movs	r2, #8
 8002a06:	4013      	ands	r3, r2
 8002a08:	d021      	beq.n	8002a4e <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	2208      	movs	r2, #8
 8002a0e:	4013      	ands	r3, r2
 8002a10:	d01d      	beq.n	8002a4e <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	2209      	movs	r2, #9
 8002a18:	4252      	negs	r2, r2
 8002a1a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2204      	movs	r2, #4
 8002a20:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	69db      	ldr	r3, [r3, #28]
 8002a28:	2203      	movs	r2, #3
 8002a2a:	4013      	ands	r3, r2
 8002a2c:	d004      	beq.n	8002a38 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	0018      	movs	r0, r3
 8002a32:	f000 fa73 	bl	8002f1c <HAL_TIM_IC_CaptureCallback>
 8002a36:	e007      	b.n	8002a48 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	0018      	movs	r0, r3
 8002a3c:	f000 fa66 	bl	8002f0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	0018      	movs	r0, r3
 8002a44:	f000 fa72 	bl	8002f2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002a4e:	68bb      	ldr	r3, [r7, #8]
 8002a50:	2210      	movs	r2, #16
 8002a52:	4013      	ands	r3, r2
 8002a54:	d022      	beq.n	8002a9c <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	2210      	movs	r2, #16
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	d01e      	beq.n	8002a9c <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	2211      	movs	r2, #17
 8002a64:	4252      	negs	r2, r2
 8002a66:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2208      	movs	r2, #8
 8002a6c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	69da      	ldr	r2, [r3, #28]
 8002a74:	23c0      	movs	r3, #192	@ 0xc0
 8002a76:	009b      	lsls	r3, r3, #2
 8002a78:	4013      	ands	r3, r2
 8002a7a:	d004      	beq.n	8002a86 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	0018      	movs	r0, r3
 8002a80:	f000 fa4c 	bl	8002f1c <HAL_TIM_IC_CaptureCallback>
 8002a84:	e007      	b.n	8002a96 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	0018      	movs	r0, r3
 8002a8a:	f000 fa3f 	bl	8002f0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	0018      	movs	r0, r3
 8002a92:	f000 fa4b 	bl	8002f2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	d00c      	beq.n	8002abe <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	d008      	beq.n	8002abe <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	2202      	movs	r2, #2
 8002ab2:	4252      	negs	r2, r2
 8002ab4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	0018      	movs	r0, r3
 8002aba:	f7fd fd63 	bl	8000584 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002abe:	68bb      	ldr	r3, [r7, #8]
 8002ac0:	2280      	movs	r2, #128	@ 0x80
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	d104      	bne.n	8002ad0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8002ac6:	68ba      	ldr	r2, [r7, #8]
 8002ac8:	2380      	movs	r3, #128	@ 0x80
 8002aca:	019b      	lsls	r3, r3, #6
 8002acc:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002ace:	d00b      	beq.n	8002ae8 <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	2280      	movs	r2, #128	@ 0x80
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	d007      	beq.n	8002ae8 <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a1e      	ldr	r2, [pc, #120]	@ (8002b58 <HAL_TIM_IRQHandler+0x208>)
 8002ade:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	0018      	movs	r0, r3
 8002ae4:	f000 ff56 	bl	8003994 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002ae8:	68ba      	ldr	r2, [r7, #8]
 8002aea:	2380      	movs	r3, #128	@ 0x80
 8002aec:	005b      	lsls	r3, r3, #1
 8002aee:	4013      	ands	r3, r2
 8002af0:	d00b      	beq.n	8002b0a <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	2280      	movs	r2, #128	@ 0x80
 8002af6:	4013      	ands	r3, r2
 8002af8:	d007      	beq.n	8002b0a <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a17      	ldr	r2, [pc, #92]	@ (8002b5c <HAL_TIM_IRQHandler+0x20c>)
 8002b00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	0018      	movs	r0, r3
 8002b06:	f000 ff4d 	bl	80039a4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	2240      	movs	r2, #64	@ 0x40
 8002b0e:	4013      	ands	r3, r2
 8002b10:	d00c      	beq.n	8002b2c <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	2240      	movs	r2, #64	@ 0x40
 8002b16:	4013      	ands	r3, r2
 8002b18:	d008      	beq.n	8002b2c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	2241      	movs	r2, #65	@ 0x41
 8002b20:	4252      	negs	r2, r2
 8002b22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	0018      	movs	r0, r3
 8002b28:	f000 fa08 	bl	8002f3c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	2220      	movs	r2, #32
 8002b30:	4013      	ands	r3, r2
 8002b32:	d00c      	beq.n	8002b4e <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	2220      	movs	r2, #32
 8002b38:	4013      	ands	r3, r2
 8002b3a:	d008      	beq.n	8002b4e <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	2221      	movs	r2, #33	@ 0x21
 8002b42:	4252      	negs	r2, r2
 8002b44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	0018      	movs	r0, r3
 8002b4a:	f000 ff1b 	bl	8003984 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002b4e:	46c0      	nop			@ (mov r8, r8)
 8002b50:	46bd      	mov	sp, r7
 8002b52:	b004      	add	sp, #16
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	46c0      	nop			@ (mov r8, r8)
 8002b58:	ffffdf7f 	.word	0xffffdf7f
 8002b5c:	fffffeff 	.word	0xfffffeff

08002b60 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b086      	sub	sp, #24
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	60f8      	str	r0, [r7, #12]
 8002b68:	60b9      	str	r1, [r7, #8]
 8002b6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b6c:	2317      	movs	r3, #23
 8002b6e:	18fb      	adds	r3, r7, r3
 8002b70:	2200      	movs	r2, #0
 8002b72:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	223c      	movs	r2, #60	@ 0x3c
 8002b78:	5c9b      	ldrb	r3, [r3, r2]
 8002b7a:	2b01      	cmp	r3, #1
 8002b7c:	d101      	bne.n	8002b82 <HAL_TIM_PWM_ConfigChannel+0x22>
 8002b7e:	2302      	movs	r3, #2
 8002b80:	e0e5      	b.n	8002d4e <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	223c      	movs	r2, #60	@ 0x3c
 8002b86:	2101      	movs	r1, #1
 8002b88:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2b14      	cmp	r3, #20
 8002b8e:	d900      	bls.n	8002b92 <HAL_TIM_PWM_ConfigChannel+0x32>
 8002b90:	e0d1      	b.n	8002d36 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	009a      	lsls	r2, r3, #2
 8002b96:	4b70      	ldr	r3, [pc, #448]	@ (8002d58 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8002b98:	18d3      	adds	r3, r2, r3
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	68ba      	ldr	r2, [r7, #8]
 8002ba4:	0011      	movs	r1, r2
 8002ba6:	0018      	movs	r0, r3
 8002ba8:	f000 fa5e 	bl	8003068 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	699a      	ldr	r2, [r3, #24]
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	2108      	movs	r1, #8
 8002bb8:	430a      	orrs	r2, r1
 8002bba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	699a      	ldr	r2, [r3, #24]
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	2104      	movs	r1, #4
 8002bc8:	438a      	bics	r2, r1
 8002bca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	6999      	ldr	r1, [r3, #24]
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	691a      	ldr	r2, [r3, #16]
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	430a      	orrs	r2, r1
 8002bdc:	619a      	str	r2, [r3, #24]
      break;
 8002bde:	e0af      	b.n	8002d40 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	68ba      	ldr	r2, [r7, #8]
 8002be6:	0011      	movs	r1, r2
 8002be8:	0018      	movs	r0, r3
 8002bea:	f000 fac7 	bl	800317c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	699a      	ldr	r2, [r3, #24]
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	2180      	movs	r1, #128	@ 0x80
 8002bfa:	0109      	lsls	r1, r1, #4
 8002bfc:	430a      	orrs	r2, r1
 8002bfe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	699a      	ldr	r2, [r3, #24]
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4954      	ldr	r1, [pc, #336]	@ (8002d5c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8002c0c:	400a      	ands	r2, r1
 8002c0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	6999      	ldr	r1, [r3, #24]
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	691b      	ldr	r3, [r3, #16]
 8002c1a:	021a      	lsls	r2, r3, #8
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	430a      	orrs	r2, r1
 8002c22:	619a      	str	r2, [r3, #24]
      break;
 8002c24:	e08c      	b.n	8002d40 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	68ba      	ldr	r2, [r7, #8]
 8002c2c:	0011      	movs	r1, r2
 8002c2e:	0018      	movs	r0, r3
 8002c30:	f000 fb28 	bl	8003284 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	69da      	ldr	r2, [r3, #28]
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	2108      	movs	r1, #8
 8002c40:	430a      	orrs	r2, r1
 8002c42:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	69da      	ldr	r2, [r3, #28]
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	2104      	movs	r1, #4
 8002c50:	438a      	bics	r2, r1
 8002c52:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	69d9      	ldr	r1, [r3, #28]
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	691a      	ldr	r2, [r3, #16]
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	430a      	orrs	r2, r1
 8002c64:	61da      	str	r2, [r3, #28]
      break;
 8002c66:	e06b      	b.n	8002d40 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	68ba      	ldr	r2, [r7, #8]
 8002c6e:	0011      	movs	r1, r2
 8002c70:	0018      	movs	r0, r3
 8002c72:	f000 fb8f 	bl	8003394 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	69da      	ldr	r2, [r3, #28]
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	2180      	movs	r1, #128	@ 0x80
 8002c82:	0109      	lsls	r1, r1, #4
 8002c84:	430a      	orrs	r2, r1
 8002c86:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	69da      	ldr	r2, [r3, #28]
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4932      	ldr	r1, [pc, #200]	@ (8002d5c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8002c94:	400a      	ands	r2, r1
 8002c96:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	69d9      	ldr	r1, [r3, #28]
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	691b      	ldr	r3, [r3, #16]
 8002ca2:	021a      	lsls	r2, r3, #8
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	430a      	orrs	r2, r1
 8002caa:	61da      	str	r2, [r3, #28]
      break;
 8002cac:	e048      	b.n	8002d40 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	68ba      	ldr	r2, [r7, #8]
 8002cb4:	0011      	movs	r1, r2
 8002cb6:	0018      	movs	r0, r3
 8002cb8:	f000 fbd6 	bl	8003468 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	2108      	movs	r1, #8
 8002cc8:	430a      	orrs	r2, r1
 8002cca:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	2104      	movs	r1, #4
 8002cd8:	438a      	bics	r2, r1
 8002cda:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	691a      	ldr	r2, [r3, #16]
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	430a      	orrs	r2, r1
 8002cec:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8002cee:	e027      	b.n	8002d40 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	68ba      	ldr	r2, [r7, #8]
 8002cf6:	0011      	movs	r1, r2
 8002cf8:	0018      	movs	r0, r3
 8002cfa:	f000 fc15 	bl	8003528 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	2180      	movs	r1, #128	@ 0x80
 8002d0a:	0109      	lsls	r1, r1, #4
 8002d0c:	430a      	orrs	r2, r1
 8002d0e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4910      	ldr	r1, [pc, #64]	@ (8002d5c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8002d1c:	400a      	ands	r2, r1
 8002d1e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	691b      	ldr	r3, [r3, #16]
 8002d2a:	021a      	lsls	r2, r3, #8
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	430a      	orrs	r2, r1
 8002d32:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8002d34:	e004      	b.n	8002d40 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8002d36:	2317      	movs	r3, #23
 8002d38:	18fb      	adds	r3, r7, r3
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	701a      	strb	r2, [r3, #0]
      break;
 8002d3e:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	223c      	movs	r2, #60	@ 0x3c
 8002d44:	2100      	movs	r1, #0
 8002d46:	5499      	strb	r1, [r3, r2]

  return status;
 8002d48:	2317      	movs	r3, #23
 8002d4a:	18fb      	adds	r3, r7, r3
 8002d4c:	781b      	ldrb	r3, [r3, #0]
}
 8002d4e:	0018      	movs	r0, r3
 8002d50:	46bd      	mov	sp, r7
 8002d52:	b006      	add	sp, #24
 8002d54:	bd80      	pop	{r7, pc}
 8002d56:	46c0      	nop			@ (mov r8, r8)
 8002d58:	08003a64 	.word	0x08003a64
 8002d5c:	fffffbff 	.word	0xfffffbff

08002d60 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b084      	sub	sp, #16
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
 8002d68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d6a:	230f      	movs	r3, #15
 8002d6c:	18fb      	adds	r3, r7, r3
 8002d6e:	2200      	movs	r2, #0
 8002d70:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	223c      	movs	r2, #60	@ 0x3c
 8002d76:	5c9b      	ldrb	r3, [r3, r2]
 8002d78:	2b01      	cmp	r3, #1
 8002d7a:	d101      	bne.n	8002d80 <HAL_TIM_ConfigClockSource+0x20>
 8002d7c:	2302      	movs	r3, #2
 8002d7e:	e0bc      	b.n	8002efa <HAL_TIM_ConfigClockSource+0x19a>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	223c      	movs	r2, #60	@ 0x3c
 8002d84:	2101      	movs	r1, #1
 8002d86:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	223d      	movs	r2, #61	@ 0x3d
 8002d8c:	2102      	movs	r1, #2
 8002d8e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	4a5a      	ldr	r2, [pc, #360]	@ (8002f04 <HAL_TIM_ConfigClockSource+0x1a4>)
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	4a59      	ldr	r2, [pc, #356]	@ (8002f08 <HAL_TIM_ConfigClockSource+0x1a8>)
 8002da4:	4013      	ands	r3, r2
 8002da6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	68ba      	ldr	r2, [r7, #8]
 8002dae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	2280      	movs	r2, #128	@ 0x80
 8002db6:	0192      	lsls	r2, r2, #6
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d040      	beq.n	8002e3e <HAL_TIM_ConfigClockSource+0xde>
 8002dbc:	2280      	movs	r2, #128	@ 0x80
 8002dbe:	0192      	lsls	r2, r2, #6
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d900      	bls.n	8002dc6 <HAL_TIM_ConfigClockSource+0x66>
 8002dc4:	e088      	b.n	8002ed8 <HAL_TIM_ConfigClockSource+0x178>
 8002dc6:	2280      	movs	r2, #128	@ 0x80
 8002dc8:	0152      	lsls	r2, r2, #5
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d100      	bne.n	8002dd0 <HAL_TIM_ConfigClockSource+0x70>
 8002dce:	e088      	b.n	8002ee2 <HAL_TIM_ConfigClockSource+0x182>
 8002dd0:	2280      	movs	r2, #128	@ 0x80
 8002dd2:	0152      	lsls	r2, r2, #5
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d900      	bls.n	8002dda <HAL_TIM_ConfigClockSource+0x7a>
 8002dd8:	e07e      	b.n	8002ed8 <HAL_TIM_ConfigClockSource+0x178>
 8002dda:	2b70      	cmp	r3, #112	@ 0x70
 8002ddc:	d018      	beq.n	8002e10 <HAL_TIM_ConfigClockSource+0xb0>
 8002dde:	d900      	bls.n	8002de2 <HAL_TIM_ConfigClockSource+0x82>
 8002de0:	e07a      	b.n	8002ed8 <HAL_TIM_ConfigClockSource+0x178>
 8002de2:	2b60      	cmp	r3, #96	@ 0x60
 8002de4:	d04f      	beq.n	8002e86 <HAL_TIM_ConfigClockSource+0x126>
 8002de6:	d900      	bls.n	8002dea <HAL_TIM_ConfigClockSource+0x8a>
 8002de8:	e076      	b.n	8002ed8 <HAL_TIM_ConfigClockSource+0x178>
 8002dea:	2b50      	cmp	r3, #80	@ 0x50
 8002dec:	d03b      	beq.n	8002e66 <HAL_TIM_ConfigClockSource+0x106>
 8002dee:	d900      	bls.n	8002df2 <HAL_TIM_ConfigClockSource+0x92>
 8002df0:	e072      	b.n	8002ed8 <HAL_TIM_ConfigClockSource+0x178>
 8002df2:	2b40      	cmp	r3, #64	@ 0x40
 8002df4:	d057      	beq.n	8002ea6 <HAL_TIM_ConfigClockSource+0x146>
 8002df6:	d900      	bls.n	8002dfa <HAL_TIM_ConfigClockSource+0x9a>
 8002df8:	e06e      	b.n	8002ed8 <HAL_TIM_ConfigClockSource+0x178>
 8002dfa:	2b30      	cmp	r3, #48	@ 0x30
 8002dfc:	d063      	beq.n	8002ec6 <HAL_TIM_ConfigClockSource+0x166>
 8002dfe:	d86b      	bhi.n	8002ed8 <HAL_TIM_ConfigClockSource+0x178>
 8002e00:	2b20      	cmp	r3, #32
 8002e02:	d060      	beq.n	8002ec6 <HAL_TIM_ConfigClockSource+0x166>
 8002e04:	d868      	bhi.n	8002ed8 <HAL_TIM_ConfigClockSource+0x178>
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d05d      	beq.n	8002ec6 <HAL_TIM_ConfigClockSource+0x166>
 8002e0a:	2b10      	cmp	r3, #16
 8002e0c:	d05b      	beq.n	8002ec6 <HAL_TIM_ConfigClockSource+0x166>
 8002e0e:	e063      	b.n	8002ed8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002e20:	f000 fc62 	bl	80036e8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	2277      	movs	r2, #119	@ 0x77
 8002e30:	4313      	orrs	r3, r2
 8002e32:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	68ba      	ldr	r2, [r7, #8]
 8002e3a:	609a      	str	r2, [r3, #8]
      break;
 8002e3c:	e052      	b.n	8002ee4 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002e4e:	f000 fc4b 	bl	80036e8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	689a      	ldr	r2, [r3, #8]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	2180      	movs	r1, #128	@ 0x80
 8002e5e:	01c9      	lsls	r1, r1, #7
 8002e60:	430a      	orrs	r2, r1
 8002e62:	609a      	str	r2, [r3, #8]
      break;
 8002e64:	e03e      	b.n	8002ee4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e72:	001a      	movs	r2, r3
 8002e74:	f000 fbbc 	bl	80035f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	2150      	movs	r1, #80	@ 0x50
 8002e7e:	0018      	movs	r0, r3
 8002e80:	f000 fc16 	bl	80036b0 <TIM_ITRx_SetConfig>
      break;
 8002e84:	e02e      	b.n	8002ee4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e92:	001a      	movs	r2, r3
 8002e94:	f000 fbda 	bl	800364c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	2160      	movs	r1, #96	@ 0x60
 8002e9e:	0018      	movs	r0, r3
 8002ea0:	f000 fc06 	bl	80036b0 <TIM_ITRx_SetConfig>
      break;
 8002ea4:	e01e      	b.n	8002ee4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002eb2:	001a      	movs	r2, r3
 8002eb4:	f000 fb9c 	bl	80035f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	2140      	movs	r1, #64	@ 0x40
 8002ebe:	0018      	movs	r0, r3
 8002ec0:	f000 fbf6 	bl	80036b0 <TIM_ITRx_SetConfig>
      break;
 8002ec4:	e00e      	b.n	8002ee4 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681a      	ldr	r2, [r3, #0]
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	0019      	movs	r1, r3
 8002ed0:	0010      	movs	r0, r2
 8002ed2:	f000 fbed 	bl	80036b0 <TIM_ITRx_SetConfig>
      break;
 8002ed6:	e005      	b.n	8002ee4 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8002ed8:	230f      	movs	r3, #15
 8002eda:	18fb      	adds	r3, r7, r3
 8002edc:	2201      	movs	r2, #1
 8002ede:	701a      	strb	r2, [r3, #0]
      break;
 8002ee0:	e000      	b.n	8002ee4 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8002ee2:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	223d      	movs	r2, #61	@ 0x3d
 8002ee8:	2101      	movs	r1, #1
 8002eea:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	223c      	movs	r2, #60	@ 0x3c
 8002ef0:	2100      	movs	r1, #0
 8002ef2:	5499      	strb	r1, [r3, r2]

  return status;
 8002ef4:	230f      	movs	r3, #15
 8002ef6:	18fb      	adds	r3, r7, r3
 8002ef8:	781b      	ldrb	r3, [r3, #0]
}
 8002efa:	0018      	movs	r0, r3
 8002efc:	46bd      	mov	sp, r7
 8002efe:	b004      	add	sp, #16
 8002f00:	bd80      	pop	{r7, pc}
 8002f02:	46c0      	nop			@ (mov r8, r8)
 8002f04:	ffceff88 	.word	0xffceff88
 8002f08:	ffff00ff 	.word	0xffff00ff

08002f0c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b082      	sub	sp, #8
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002f14:	46c0      	nop			@ (mov r8, r8)
 8002f16:	46bd      	mov	sp, r7
 8002f18:	b002      	add	sp, #8
 8002f1a:	bd80      	pop	{r7, pc}

08002f1c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b082      	sub	sp, #8
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002f24:	46c0      	nop			@ (mov r8, r8)
 8002f26:	46bd      	mov	sp, r7
 8002f28:	b002      	add	sp, #8
 8002f2a:	bd80      	pop	{r7, pc}

08002f2c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b082      	sub	sp, #8
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002f34:	46c0      	nop			@ (mov r8, r8)
 8002f36:	46bd      	mov	sp, r7
 8002f38:	b002      	add	sp, #8
 8002f3a:	bd80      	pop	{r7, pc}

08002f3c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b082      	sub	sp, #8
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002f44:	46c0      	nop			@ (mov r8, r8)
 8002f46:	46bd      	mov	sp, r7
 8002f48:	b002      	add	sp, #8
 8002f4a:	bd80      	pop	{r7, pc}

08002f4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b084      	sub	sp, #16
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
 8002f54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	4a3b      	ldr	r2, [pc, #236]	@ (800304c <TIM_Base_SetConfig+0x100>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d008      	beq.n	8002f76 <TIM_Base_SetConfig+0x2a>
 8002f64:	687a      	ldr	r2, [r7, #4]
 8002f66:	2380      	movs	r3, #128	@ 0x80
 8002f68:	05db      	lsls	r3, r3, #23
 8002f6a:	429a      	cmp	r2, r3
 8002f6c:	d003      	beq.n	8002f76 <TIM_Base_SetConfig+0x2a>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	4a37      	ldr	r2, [pc, #220]	@ (8003050 <TIM_Base_SetConfig+0x104>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d108      	bne.n	8002f88 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	2270      	movs	r2, #112	@ 0x70
 8002f7a:	4393      	bics	r3, r2
 8002f7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	68fa      	ldr	r2, [r7, #12]
 8002f84:	4313      	orrs	r3, r2
 8002f86:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	4a30      	ldr	r2, [pc, #192]	@ (800304c <TIM_Base_SetConfig+0x100>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d018      	beq.n	8002fc2 <TIM_Base_SetConfig+0x76>
 8002f90:	687a      	ldr	r2, [r7, #4]
 8002f92:	2380      	movs	r3, #128	@ 0x80
 8002f94:	05db      	lsls	r3, r3, #23
 8002f96:	429a      	cmp	r2, r3
 8002f98:	d013      	beq.n	8002fc2 <TIM_Base_SetConfig+0x76>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	4a2c      	ldr	r2, [pc, #176]	@ (8003050 <TIM_Base_SetConfig+0x104>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d00f      	beq.n	8002fc2 <TIM_Base_SetConfig+0x76>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	4a2b      	ldr	r2, [pc, #172]	@ (8003054 <TIM_Base_SetConfig+0x108>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d00b      	beq.n	8002fc2 <TIM_Base_SetConfig+0x76>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	4a2a      	ldr	r2, [pc, #168]	@ (8003058 <TIM_Base_SetConfig+0x10c>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d007      	beq.n	8002fc2 <TIM_Base_SetConfig+0x76>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	4a29      	ldr	r2, [pc, #164]	@ (800305c <TIM_Base_SetConfig+0x110>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d003      	beq.n	8002fc2 <TIM_Base_SetConfig+0x76>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	4a28      	ldr	r2, [pc, #160]	@ (8003060 <TIM_Base_SetConfig+0x114>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d108      	bne.n	8002fd4 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	4a27      	ldr	r2, [pc, #156]	@ (8003064 <TIM_Base_SetConfig+0x118>)
 8002fc6:	4013      	ands	r3, r2
 8002fc8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	68db      	ldr	r3, [r3, #12]
 8002fce:	68fa      	ldr	r2, [r7, #12]
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	2280      	movs	r2, #128	@ 0x80
 8002fd8:	4393      	bics	r3, r2
 8002fda:	001a      	movs	r2, r3
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	695b      	ldr	r3, [r3, #20]
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	68fa      	ldr	r2, [r7, #12]
 8002fe8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	689a      	ldr	r2, [r3, #8]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	4a13      	ldr	r2, [pc, #76]	@ (800304c <TIM_Base_SetConfig+0x100>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d00b      	beq.n	800301a <TIM_Base_SetConfig+0xce>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	4a14      	ldr	r2, [pc, #80]	@ (8003058 <TIM_Base_SetConfig+0x10c>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d007      	beq.n	800301a <TIM_Base_SetConfig+0xce>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	4a13      	ldr	r2, [pc, #76]	@ (800305c <TIM_Base_SetConfig+0x110>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d003      	beq.n	800301a <TIM_Base_SetConfig+0xce>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	4a12      	ldr	r2, [pc, #72]	@ (8003060 <TIM_Base_SetConfig+0x114>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d103      	bne.n	8003022 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	691a      	ldr	r2, [r3, #16]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2201      	movs	r2, #1
 8003026:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	691b      	ldr	r3, [r3, #16]
 800302c:	2201      	movs	r2, #1
 800302e:	4013      	ands	r3, r2
 8003030:	2b01      	cmp	r3, #1
 8003032:	d106      	bne.n	8003042 <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	691b      	ldr	r3, [r3, #16]
 8003038:	2201      	movs	r2, #1
 800303a:	4393      	bics	r3, r2
 800303c:	001a      	movs	r2, r3
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	611a      	str	r2, [r3, #16]
  }
}
 8003042:	46c0      	nop			@ (mov r8, r8)
 8003044:	46bd      	mov	sp, r7
 8003046:	b004      	add	sp, #16
 8003048:	bd80      	pop	{r7, pc}
 800304a:	46c0      	nop			@ (mov r8, r8)
 800304c:	40012c00 	.word	0x40012c00
 8003050:	40000400 	.word	0x40000400
 8003054:	40002000 	.word	0x40002000
 8003058:	40014000 	.word	0x40014000
 800305c:	40014400 	.word	0x40014400
 8003060:	40014800 	.word	0x40014800
 8003064:	fffffcff 	.word	0xfffffcff

08003068 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b086      	sub	sp, #24
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
 8003070:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6a1b      	ldr	r3, [r3, #32]
 8003076:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6a1b      	ldr	r3, [r3, #32]
 800307c:	2201      	movs	r2, #1
 800307e:	4393      	bics	r3, r2
 8003080:	001a      	movs	r2, r3
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	699b      	ldr	r3, [r3, #24]
 8003090:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	4a32      	ldr	r2, [pc, #200]	@ (8003160 <TIM_OC1_SetConfig+0xf8>)
 8003096:	4013      	ands	r3, r2
 8003098:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2203      	movs	r2, #3
 800309e:	4393      	bics	r3, r2
 80030a0:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	68fa      	ldr	r2, [r7, #12]
 80030a8:	4313      	orrs	r3, r2
 80030aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	2202      	movs	r2, #2
 80030b0:	4393      	bics	r3, r2
 80030b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	697a      	ldr	r2, [r7, #20]
 80030ba:	4313      	orrs	r3, r2
 80030bc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	4a28      	ldr	r2, [pc, #160]	@ (8003164 <TIM_OC1_SetConfig+0xfc>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d00b      	beq.n	80030de <TIM_OC1_SetConfig+0x76>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	4a27      	ldr	r2, [pc, #156]	@ (8003168 <TIM_OC1_SetConfig+0x100>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d007      	beq.n	80030de <TIM_OC1_SetConfig+0x76>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	4a26      	ldr	r2, [pc, #152]	@ (800316c <TIM_OC1_SetConfig+0x104>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d003      	beq.n	80030de <TIM_OC1_SetConfig+0x76>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	4a25      	ldr	r2, [pc, #148]	@ (8003170 <TIM_OC1_SetConfig+0x108>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d10c      	bne.n	80030f8 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	2208      	movs	r2, #8
 80030e2:	4393      	bics	r3, r2
 80030e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	68db      	ldr	r3, [r3, #12]
 80030ea:	697a      	ldr	r2, [r7, #20]
 80030ec:	4313      	orrs	r3, r2
 80030ee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	2204      	movs	r2, #4
 80030f4:	4393      	bics	r3, r2
 80030f6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	4a1a      	ldr	r2, [pc, #104]	@ (8003164 <TIM_OC1_SetConfig+0xfc>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d00b      	beq.n	8003118 <TIM_OC1_SetConfig+0xb0>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	4a19      	ldr	r2, [pc, #100]	@ (8003168 <TIM_OC1_SetConfig+0x100>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d007      	beq.n	8003118 <TIM_OC1_SetConfig+0xb0>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	4a18      	ldr	r2, [pc, #96]	@ (800316c <TIM_OC1_SetConfig+0x104>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d003      	beq.n	8003118 <TIM_OC1_SetConfig+0xb0>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	4a17      	ldr	r2, [pc, #92]	@ (8003170 <TIM_OC1_SetConfig+0x108>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d111      	bne.n	800313c <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	4a16      	ldr	r2, [pc, #88]	@ (8003174 <TIM_OC1_SetConfig+0x10c>)
 800311c:	4013      	ands	r3, r2
 800311e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	4a15      	ldr	r2, [pc, #84]	@ (8003178 <TIM_OC1_SetConfig+0x110>)
 8003124:	4013      	ands	r3, r2
 8003126:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	695b      	ldr	r3, [r3, #20]
 800312c:	693a      	ldr	r2, [r7, #16]
 800312e:	4313      	orrs	r3, r2
 8003130:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	699b      	ldr	r3, [r3, #24]
 8003136:	693a      	ldr	r2, [r7, #16]
 8003138:	4313      	orrs	r3, r2
 800313a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	693a      	ldr	r2, [r7, #16]
 8003140:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	68fa      	ldr	r2, [r7, #12]
 8003146:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	685a      	ldr	r2, [r3, #4]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	697a      	ldr	r2, [r7, #20]
 8003154:	621a      	str	r2, [r3, #32]
}
 8003156:	46c0      	nop			@ (mov r8, r8)
 8003158:	46bd      	mov	sp, r7
 800315a:	b006      	add	sp, #24
 800315c:	bd80      	pop	{r7, pc}
 800315e:	46c0      	nop			@ (mov r8, r8)
 8003160:	fffeff8f 	.word	0xfffeff8f
 8003164:	40012c00 	.word	0x40012c00
 8003168:	40014000 	.word	0x40014000
 800316c:	40014400 	.word	0x40014400
 8003170:	40014800 	.word	0x40014800
 8003174:	fffffeff 	.word	0xfffffeff
 8003178:	fffffdff 	.word	0xfffffdff

0800317c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b086      	sub	sp, #24
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
 8003184:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6a1b      	ldr	r3, [r3, #32]
 800318a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6a1b      	ldr	r3, [r3, #32]
 8003190:	2210      	movs	r2, #16
 8003192:	4393      	bics	r3, r2
 8003194:	001a      	movs	r2, r3
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	699b      	ldr	r3, [r3, #24]
 80031a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	4a2e      	ldr	r2, [pc, #184]	@ (8003264 <TIM_OC2_SetConfig+0xe8>)
 80031aa:	4013      	ands	r3, r2
 80031ac:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	4a2d      	ldr	r2, [pc, #180]	@ (8003268 <TIM_OC2_SetConfig+0xec>)
 80031b2:	4013      	ands	r3, r2
 80031b4:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	021b      	lsls	r3, r3, #8
 80031bc:	68fa      	ldr	r2, [r7, #12]
 80031be:	4313      	orrs	r3, r2
 80031c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	2220      	movs	r2, #32
 80031c6:	4393      	bics	r3, r2
 80031c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	011b      	lsls	r3, r3, #4
 80031d0:	697a      	ldr	r2, [r7, #20]
 80031d2:	4313      	orrs	r3, r2
 80031d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	4a24      	ldr	r2, [pc, #144]	@ (800326c <TIM_OC2_SetConfig+0xf0>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d10d      	bne.n	80031fa <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	2280      	movs	r2, #128	@ 0x80
 80031e2:	4393      	bics	r3, r2
 80031e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	68db      	ldr	r3, [r3, #12]
 80031ea:	011b      	lsls	r3, r3, #4
 80031ec:	697a      	ldr	r2, [r7, #20]
 80031ee:	4313      	orrs	r3, r2
 80031f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	2240      	movs	r2, #64	@ 0x40
 80031f6:	4393      	bics	r3, r2
 80031f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	4a1b      	ldr	r2, [pc, #108]	@ (800326c <TIM_OC2_SetConfig+0xf0>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d00b      	beq.n	800321a <TIM_OC2_SetConfig+0x9e>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	4a1a      	ldr	r2, [pc, #104]	@ (8003270 <TIM_OC2_SetConfig+0xf4>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d007      	beq.n	800321a <TIM_OC2_SetConfig+0x9e>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	4a19      	ldr	r2, [pc, #100]	@ (8003274 <TIM_OC2_SetConfig+0xf8>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d003      	beq.n	800321a <TIM_OC2_SetConfig+0x9e>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	4a18      	ldr	r2, [pc, #96]	@ (8003278 <TIM_OC2_SetConfig+0xfc>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d113      	bne.n	8003242 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	4a17      	ldr	r2, [pc, #92]	@ (800327c <TIM_OC2_SetConfig+0x100>)
 800321e:	4013      	ands	r3, r2
 8003220:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	4a16      	ldr	r2, [pc, #88]	@ (8003280 <TIM_OC2_SetConfig+0x104>)
 8003226:	4013      	ands	r3, r2
 8003228:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	695b      	ldr	r3, [r3, #20]
 800322e:	009b      	lsls	r3, r3, #2
 8003230:	693a      	ldr	r2, [r7, #16]
 8003232:	4313      	orrs	r3, r2
 8003234:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	699b      	ldr	r3, [r3, #24]
 800323a:	009b      	lsls	r3, r3, #2
 800323c:	693a      	ldr	r2, [r7, #16]
 800323e:	4313      	orrs	r3, r2
 8003240:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	693a      	ldr	r2, [r7, #16]
 8003246:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	68fa      	ldr	r2, [r7, #12]
 800324c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	685a      	ldr	r2, [r3, #4]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	697a      	ldr	r2, [r7, #20]
 800325a:	621a      	str	r2, [r3, #32]
}
 800325c:	46c0      	nop			@ (mov r8, r8)
 800325e:	46bd      	mov	sp, r7
 8003260:	b006      	add	sp, #24
 8003262:	bd80      	pop	{r7, pc}
 8003264:	feff8fff 	.word	0xfeff8fff
 8003268:	fffffcff 	.word	0xfffffcff
 800326c:	40012c00 	.word	0x40012c00
 8003270:	40014000 	.word	0x40014000
 8003274:	40014400 	.word	0x40014400
 8003278:	40014800 	.word	0x40014800
 800327c:	fffffbff 	.word	0xfffffbff
 8003280:	fffff7ff 	.word	0xfffff7ff

08003284 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b086      	sub	sp, #24
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
 800328c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6a1b      	ldr	r3, [r3, #32]
 8003292:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6a1b      	ldr	r3, [r3, #32]
 8003298:	4a33      	ldr	r2, [pc, #204]	@ (8003368 <TIM_OC3_SetConfig+0xe4>)
 800329a:	401a      	ands	r2, r3
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	69db      	ldr	r3, [r3, #28]
 80032aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	4a2f      	ldr	r2, [pc, #188]	@ (800336c <TIM_OC3_SetConfig+0xe8>)
 80032b0:	4013      	ands	r3, r2
 80032b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2203      	movs	r2, #3
 80032b8:	4393      	bics	r3, r2
 80032ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	68fa      	ldr	r2, [r7, #12]
 80032c2:	4313      	orrs	r3, r2
 80032c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	4a29      	ldr	r2, [pc, #164]	@ (8003370 <TIM_OC3_SetConfig+0xec>)
 80032ca:	4013      	ands	r3, r2
 80032cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	021b      	lsls	r3, r3, #8
 80032d4:	697a      	ldr	r2, [r7, #20]
 80032d6:	4313      	orrs	r3, r2
 80032d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	4a25      	ldr	r2, [pc, #148]	@ (8003374 <TIM_OC3_SetConfig+0xf0>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d10d      	bne.n	80032fe <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	4a24      	ldr	r2, [pc, #144]	@ (8003378 <TIM_OC3_SetConfig+0xf4>)
 80032e6:	4013      	ands	r3, r2
 80032e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	68db      	ldr	r3, [r3, #12]
 80032ee:	021b      	lsls	r3, r3, #8
 80032f0:	697a      	ldr	r2, [r7, #20]
 80032f2:	4313      	orrs	r3, r2
 80032f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	4a20      	ldr	r2, [pc, #128]	@ (800337c <TIM_OC3_SetConfig+0xf8>)
 80032fa:	4013      	ands	r3, r2
 80032fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	4a1c      	ldr	r2, [pc, #112]	@ (8003374 <TIM_OC3_SetConfig+0xf0>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d00b      	beq.n	800331e <TIM_OC3_SetConfig+0x9a>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	4a1d      	ldr	r2, [pc, #116]	@ (8003380 <TIM_OC3_SetConfig+0xfc>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d007      	beq.n	800331e <TIM_OC3_SetConfig+0x9a>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	4a1c      	ldr	r2, [pc, #112]	@ (8003384 <TIM_OC3_SetConfig+0x100>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d003      	beq.n	800331e <TIM_OC3_SetConfig+0x9a>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	4a1b      	ldr	r2, [pc, #108]	@ (8003388 <TIM_OC3_SetConfig+0x104>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d113      	bne.n	8003346 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	4a1a      	ldr	r2, [pc, #104]	@ (800338c <TIM_OC3_SetConfig+0x108>)
 8003322:	4013      	ands	r3, r2
 8003324:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	4a19      	ldr	r2, [pc, #100]	@ (8003390 <TIM_OC3_SetConfig+0x10c>)
 800332a:	4013      	ands	r3, r2
 800332c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	695b      	ldr	r3, [r3, #20]
 8003332:	011b      	lsls	r3, r3, #4
 8003334:	693a      	ldr	r2, [r7, #16]
 8003336:	4313      	orrs	r3, r2
 8003338:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	699b      	ldr	r3, [r3, #24]
 800333e:	011b      	lsls	r3, r3, #4
 8003340:	693a      	ldr	r2, [r7, #16]
 8003342:	4313      	orrs	r3, r2
 8003344:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	693a      	ldr	r2, [r7, #16]
 800334a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	68fa      	ldr	r2, [r7, #12]
 8003350:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	685a      	ldr	r2, [r3, #4]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	697a      	ldr	r2, [r7, #20]
 800335e:	621a      	str	r2, [r3, #32]
}
 8003360:	46c0      	nop			@ (mov r8, r8)
 8003362:	46bd      	mov	sp, r7
 8003364:	b006      	add	sp, #24
 8003366:	bd80      	pop	{r7, pc}
 8003368:	fffffeff 	.word	0xfffffeff
 800336c:	fffeff8f 	.word	0xfffeff8f
 8003370:	fffffdff 	.word	0xfffffdff
 8003374:	40012c00 	.word	0x40012c00
 8003378:	fffff7ff 	.word	0xfffff7ff
 800337c:	fffffbff 	.word	0xfffffbff
 8003380:	40014000 	.word	0x40014000
 8003384:	40014400 	.word	0x40014400
 8003388:	40014800 	.word	0x40014800
 800338c:	ffffefff 	.word	0xffffefff
 8003390:	ffffdfff 	.word	0xffffdfff

08003394 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b086      	sub	sp, #24
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
 800339c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6a1b      	ldr	r3, [r3, #32]
 80033a2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6a1b      	ldr	r3, [r3, #32]
 80033a8:	4a26      	ldr	r2, [pc, #152]	@ (8003444 <TIM_OC4_SetConfig+0xb0>)
 80033aa:	401a      	ands	r2, r3
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	69db      	ldr	r3, [r3, #28]
 80033ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	4a22      	ldr	r2, [pc, #136]	@ (8003448 <TIM_OC4_SetConfig+0xb4>)
 80033c0:	4013      	ands	r3, r2
 80033c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	4a21      	ldr	r2, [pc, #132]	@ (800344c <TIM_OC4_SetConfig+0xb8>)
 80033c8:	4013      	ands	r3, r2
 80033ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	021b      	lsls	r3, r3, #8
 80033d2:	68fa      	ldr	r2, [r7, #12]
 80033d4:	4313      	orrs	r3, r2
 80033d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80033d8:	693b      	ldr	r3, [r7, #16]
 80033da:	4a1d      	ldr	r2, [pc, #116]	@ (8003450 <TIM_OC4_SetConfig+0xbc>)
 80033dc:	4013      	ands	r3, r2
 80033de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	031b      	lsls	r3, r3, #12
 80033e6:	693a      	ldr	r2, [r7, #16]
 80033e8:	4313      	orrs	r3, r2
 80033ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	4a19      	ldr	r2, [pc, #100]	@ (8003454 <TIM_OC4_SetConfig+0xc0>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d00b      	beq.n	800340c <TIM_OC4_SetConfig+0x78>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	4a18      	ldr	r2, [pc, #96]	@ (8003458 <TIM_OC4_SetConfig+0xc4>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d007      	beq.n	800340c <TIM_OC4_SetConfig+0x78>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	4a17      	ldr	r2, [pc, #92]	@ (800345c <TIM_OC4_SetConfig+0xc8>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d003      	beq.n	800340c <TIM_OC4_SetConfig+0x78>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	4a16      	ldr	r2, [pc, #88]	@ (8003460 <TIM_OC4_SetConfig+0xcc>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d109      	bne.n	8003420 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	4a15      	ldr	r2, [pc, #84]	@ (8003464 <TIM_OC4_SetConfig+0xd0>)
 8003410:	4013      	ands	r3, r2
 8003412:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	695b      	ldr	r3, [r3, #20]
 8003418:	019b      	lsls	r3, r3, #6
 800341a:	697a      	ldr	r2, [r7, #20]
 800341c:	4313      	orrs	r3, r2
 800341e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	697a      	ldr	r2, [r7, #20]
 8003424:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	68fa      	ldr	r2, [r7, #12]
 800342a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	685a      	ldr	r2, [r3, #4]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	693a      	ldr	r2, [r7, #16]
 8003438:	621a      	str	r2, [r3, #32]
}
 800343a:	46c0      	nop			@ (mov r8, r8)
 800343c:	46bd      	mov	sp, r7
 800343e:	b006      	add	sp, #24
 8003440:	bd80      	pop	{r7, pc}
 8003442:	46c0      	nop			@ (mov r8, r8)
 8003444:	ffffefff 	.word	0xffffefff
 8003448:	feff8fff 	.word	0xfeff8fff
 800344c:	fffffcff 	.word	0xfffffcff
 8003450:	ffffdfff 	.word	0xffffdfff
 8003454:	40012c00 	.word	0x40012c00
 8003458:	40014000 	.word	0x40014000
 800345c:	40014400 	.word	0x40014400
 8003460:	40014800 	.word	0x40014800
 8003464:	ffffbfff 	.word	0xffffbfff

08003468 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b086      	sub	sp, #24
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
 8003470:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6a1b      	ldr	r3, [r3, #32]
 8003476:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6a1b      	ldr	r3, [r3, #32]
 800347c:	4a23      	ldr	r2, [pc, #140]	@ (800350c <TIM_OC5_SetConfig+0xa4>)
 800347e:	401a      	ands	r2, r3
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800348e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	4a1f      	ldr	r2, [pc, #124]	@ (8003510 <TIM_OC5_SetConfig+0xa8>)
 8003494:	4013      	ands	r3, r2
 8003496:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	68fa      	ldr	r2, [r7, #12]
 800349e:	4313      	orrs	r3, r2
 80034a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	4a1b      	ldr	r2, [pc, #108]	@ (8003514 <TIM_OC5_SetConfig+0xac>)
 80034a6:	4013      	ands	r3, r2
 80034a8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	041b      	lsls	r3, r3, #16
 80034b0:	693a      	ldr	r2, [r7, #16]
 80034b2:	4313      	orrs	r3, r2
 80034b4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	4a17      	ldr	r2, [pc, #92]	@ (8003518 <TIM_OC5_SetConfig+0xb0>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d00b      	beq.n	80034d6 <TIM_OC5_SetConfig+0x6e>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	4a16      	ldr	r2, [pc, #88]	@ (800351c <TIM_OC5_SetConfig+0xb4>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d007      	beq.n	80034d6 <TIM_OC5_SetConfig+0x6e>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	4a15      	ldr	r2, [pc, #84]	@ (8003520 <TIM_OC5_SetConfig+0xb8>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d003      	beq.n	80034d6 <TIM_OC5_SetConfig+0x6e>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	4a14      	ldr	r2, [pc, #80]	@ (8003524 <TIM_OC5_SetConfig+0xbc>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d109      	bne.n	80034ea <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	4a0c      	ldr	r2, [pc, #48]	@ (800350c <TIM_OC5_SetConfig+0xa4>)
 80034da:	4013      	ands	r3, r2
 80034dc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	695b      	ldr	r3, [r3, #20]
 80034e2:	021b      	lsls	r3, r3, #8
 80034e4:	697a      	ldr	r2, [r7, #20]
 80034e6:	4313      	orrs	r3, r2
 80034e8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	697a      	ldr	r2, [r7, #20]
 80034ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	68fa      	ldr	r2, [r7, #12]
 80034f4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	685a      	ldr	r2, [r3, #4]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	693a      	ldr	r2, [r7, #16]
 8003502:	621a      	str	r2, [r3, #32]
}
 8003504:	46c0      	nop			@ (mov r8, r8)
 8003506:	46bd      	mov	sp, r7
 8003508:	b006      	add	sp, #24
 800350a:	bd80      	pop	{r7, pc}
 800350c:	fffeffff 	.word	0xfffeffff
 8003510:	fffeff8f 	.word	0xfffeff8f
 8003514:	fffdffff 	.word	0xfffdffff
 8003518:	40012c00 	.word	0x40012c00
 800351c:	40014000 	.word	0x40014000
 8003520:	40014400 	.word	0x40014400
 8003524:	40014800 	.word	0x40014800

08003528 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b086      	sub	sp, #24
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
 8003530:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6a1b      	ldr	r3, [r3, #32]
 8003536:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6a1b      	ldr	r3, [r3, #32]
 800353c:	4a24      	ldr	r2, [pc, #144]	@ (80035d0 <TIM_OC6_SetConfig+0xa8>)
 800353e:	401a      	ands	r2, r3
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800354e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	4a20      	ldr	r2, [pc, #128]	@ (80035d4 <TIM_OC6_SetConfig+0xac>)
 8003554:	4013      	ands	r3, r2
 8003556:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	021b      	lsls	r3, r3, #8
 800355e:	68fa      	ldr	r2, [r7, #12]
 8003560:	4313      	orrs	r3, r2
 8003562:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003564:	693b      	ldr	r3, [r7, #16]
 8003566:	4a1c      	ldr	r2, [pc, #112]	@ (80035d8 <TIM_OC6_SetConfig+0xb0>)
 8003568:	4013      	ands	r3, r2
 800356a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	051b      	lsls	r3, r3, #20
 8003572:	693a      	ldr	r2, [r7, #16]
 8003574:	4313      	orrs	r3, r2
 8003576:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	4a18      	ldr	r2, [pc, #96]	@ (80035dc <TIM_OC6_SetConfig+0xb4>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d00b      	beq.n	8003598 <TIM_OC6_SetConfig+0x70>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	4a17      	ldr	r2, [pc, #92]	@ (80035e0 <TIM_OC6_SetConfig+0xb8>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d007      	beq.n	8003598 <TIM_OC6_SetConfig+0x70>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	4a16      	ldr	r2, [pc, #88]	@ (80035e4 <TIM_OC6_SetConfig+0xbc>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d003      	beq.n	8003598 <TIM_OC6_SetConfig+0x70>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	4a15      	ldr	r2, [pc, #84]	@ (80035e8 <TIM_OC6_SetConfig+0xc0>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d109      	bne.n	80035ac <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	4a14      	ldr	r2, [pc, #80]	@ (80035ec <TIM_OC6_SetConfig+0xc4>)
 800359c:	4013      	ands	r3, r2
 800359e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	695b      	ldr	r3, [r3, #20]
 80035a4:	029b      	lsls	r3, r3, #10
 80035a6:	697a      	ldr	r2, [r7, #20]
 80035a8:	4313      	orrs	r3, r2
 80035aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	697a      	ldr	r2, [r7, #20]
 80035b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	68fa      	ldr	r2, [r7, #12]
 80035b6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	685a      	ldr	r2, [r3, #4]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	693a      	ldr	r2, [r7, #16]
 80035c4:	621a      	str	r2, [r3, #32]
}
 80035c6:	46c0      	nop			@ (mov r8, r8)
 80035c8:	46bd      	mov	sp, r7
 80035ca:	b006      	add	sp, #24
 80035cc:	bd80      	pop	{r7, pc}
 80035ce:	46c0      	nop			@ (mov r8, r8)
 80035d0:	ffefffff 	.word	0xffefffff
 80035d4:	feff8fff 	.word	0xfeff8fff
 80035d8:	ffdfffff 	.word	0xffdfffff
 80035dc:	40012c00 	.word	0x40012c00
 80035e0:	40014000 	.word	0x40014000
 80035e4:	40014400 	.word	0x40014400
 80035e8:	40014800 	.word	0x40014800
 80035ec:	fffbffff 	.word	0xfffbffff

080035f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b086      	sub	sp, #24
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	60f8      	str	r0, [r7, #12]
 80035f8:	60b9      	str	r1, [r7, #8]
 80035fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	6a1b      	ldr	r3, [r3, #32]
 8003600:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	6a1b      	ldr	r3, [r3, #32]
 8003606:	2201      	movs	r2, #1
 8003608:	4393      	bics	r3, r2
 800360a:	001a      	movs	r2, r3
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	699b      	ldr	r3, [r3, #24]
 8003614:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	22f0      	movs	r2, #240	@ 0xf0
 800361a:	4393      	bics	r3, r2
 800361c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	011b      	lsls	r3, r3, #4
 8003622:	693a      	ldr	r2, [r7, #16]
 8003624:	4313      	orrs	r3, r2
 8003626:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	220a      	movs	r2, #10
 800362c:	4393      	bics	r3, r2
 800362e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003630:	697a      	ldr	r2, [r7, #20]
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	4313      	orrs	r3, r2
 8003636:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	693a      	ldr	r2, [r7, #16]
 800363c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	697a      	ldr	r2, [r7, #20]
 8003642:	621a      	str	r2, [r3, #32]
}
 8003644:	46c0      	nop			@ (mov r8, r8)
 8003646:	46bd      	mov	sp, r7
 8003648:	b006      	add	sp, #24
 800364a:	bd80      	pop	{r7, pc}

0800364c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b086      	sub	sp, #24
 8003650:	af00      	add	r7, sp, #0
 8003652:	60f8      	str	r0, [r7, #12]
 8003654:	60b9      	str	r1, [r7, #8]
 8003656:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	6a1b      	ldr	r3, [r3, #32]
 800365c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	6a1b      	ldr	r3, [r3, #32]
 8003662:	2210      	movs	r2, #16
 8003664:	4393      	bics	r3, r2
 8003666:	001a      	movs	r2, r3
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	699b      	ldr	r3, [r3, #24]
 8003670:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	4a0d      	ldr	r2, [pc, #52]	@ (80036ac <TIM_TI2_ConfigInputStage+0x60>)
 8003676:	4013      	ands	r3, r2
 8003678:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	031b      	lsls	r3, r3, #12
 800367e:	693a      	ldr	r2, [r7, #16]
 8003680:	4313      	orrs	r3, r2
 8003682:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	22a0      	movs	r2, #160	@ 0xa0
 8003688:	4393      	bics	r3, r2
 800368a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	011b      	lsls	r3, r3, #4
 8003690:	697a      	ldr	r2, [r7, #20]
 8003692:	4313      	orrs	r3, r2
 8003694:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	693a      	ldr	r2, [r7, #16]
 800369a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	697a      	ldr	r2, [r7, #20]
 80036a0:	621a      	str	r2, [r3, #32]
}
 80036a2:	46c0      	nop			@ (mov r8, r8)
 80036a4:	46bd      	mov	sp, r7
 80036a6:	b006      	add	sp, #24
 80036a8:	bd80      	pop	{r7, pc}
 80036aa:	46c0      	nop			@ (mov r8, r8)
 80036ac:	ffff0fff 	.word	0xffff0fff

080036b0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b084      	sub	sp, #16
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
 80036b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	689b      	ldr	r3, [r3, #8]
 80036be:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	4a08      	ldr	r2, [pc, #32]	@ (80036e4 <TIM_ITRx_SetConfig+0x34>)
 80036c4:	4013      	ands	r3, r2
 80036c6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80036c8:	683a      	ldr	r2, [r7, #0]
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	4313      	orrs	r3, r2
 80036ce:	2207      	movs	r2, #7
 80036d0:	4313      	orrs	r3, r2
 80036d2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	68fa      	ldr	r2, [r7, #12]
 80036d8:	609a      	str	r2, [r3, #8]
}
 80036da:	46c0      	nop			@ (mov r8, r8)
 80036dc:	46bd      	mov	sp, r7
 80036de:	b004      	add	sp, #16
 80036e0:	bd80      	pop	{r7, pc}
 80036e2:	46c0      	nop			@ (mov r8, r8)
 80036e4:	ffcfff8f 	.word	0xffcfff8f

080036e8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b086      	sub	sp, #24
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	60f8      	str	r0, [r7, #12]
 80036f0:	60b9      	str	r1, [r7, #8]
 80036f2:	607a      	str	r2, [r7, #4]
 80036f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	4a09      	ldr	r2, [pc, #36]	@ (8003724 <TIM_ETR_SetConfig+0x3c>)
 8003700:	4013      	ands	r3, r2
 8003702:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	021a      	lsls	r2, r3, #8
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	431a      	orrs	r2, r3
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	4313      	orrs	r3, r2
 8003710:	697a      	ldr	r2, [r7, #20]
 8003712:	4313      	orrs	r3, r2
 8003714:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	697a      	ldr	r2, [r7, #20]
 800371a:	609a      	str	r2, [r3, #8]
}
 800371c:	46c0      	nop			@ (mov r8, r8)
 800371e:	46bd      	mov	sp, r7
 8003720:	b006      	add	sp, #24
 8003722:	bd80      	pop	{r7, pc}
 8003724:	ffff00ff 	.word	0xffff00ff

08003728 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b086      	sub	sp, #24
 800372c:	af00      	add	r7, sp, #0
 800372e:	60f8      	str	r0, [r7, #12]
 8003730:	60b9      	str	r1, [r7, #8]
 8003732:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	221f      	movs	r2, #31
 8003738:	4013      	ands	r3, r2
 800373a:	2201      	movs	r2, #1
 800373c:	409a      	lsls	r2, r3
 800373e:	0013      	movs	r3, r2
 8003740:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	6a1b      	ldr	r3, [r3, #32]
 8003746:	697a      	ldr	r2, [r7, #20]
 8003748:	43d2      	mvns	r2, r2
 800374a:	401a      	ands	r2, r3
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	6a1a      	ldr	r2, [r3, #32]
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	211f      	movs	r1, #31
 8003758:	400b      	ands	r3, r1
 800375a:	6879      	ldr	r1, [r7, #4]
 800375c:	4099      	lsls	r1, r3
 800375e:	000b      	movs	r3, r1
 8003760:	431a      	orrs	r2, r3
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	621a      	str	r2, [r3, #32]
}
 8003766:	46c0      	nop			@ (mov r8, r8)
 8003768:	46bd      	mov	sp, r7
 800376a:	b006      	add	sp, #24
 800376c:	bd80      	pop	{r7, pc}
	...

08003770 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b084      	sub	sp, #16
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
 8003778:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	223c      	movs	r2, #60	@ 0x3c
 800377e:	5c9b      	ldrb	r3, [r3, r2]
 8003780:	2b01      	cmp	r3, #1
 8003782:	d101      	bne.n	8003788 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003784:	2302      	movs	r3, #2
 8003786:	e055      	b.n	8003834 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	223c      	movs	r2, #60	@ 0x3c
 800378c:	2101      	movs	r1, #1
 800378e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	223d      	movs	r2, #61	@ 0x3d
 8003794:	2102      	movs	r1, #2
 8003796:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	689b      	ldr	r3, [r3, #8]
 80037a6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a23      	ldr	r2, [pc, #140]	@ (800383c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d108      	bne.n	80037c4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	4a22      	ldr	r2, [pc, #136]	@ (8003840 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80037b6:	4013      	ands	r3, r2
 80037b8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	68fa      	ldr	r2, [r7, #12]
 80037c0:	4313      	orrs	r3, r2
 80037c2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2270      	movs	r2, #112	@ 0x70
 80037c8:	4393      	bics	r3, r2
 80037ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	68fa      	ldr	r2, [r7, #12]
 80037d2:	4313      	orrs	r3, r2
 80037d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	68fa      	ldr	r2, [r7, #12]
 80037dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a16      	ldr	r2, [pc, #88]	@ (800383c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d00f      	beq.n	8003808 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681a      	ldr	r2, [r3, #0]
 80037ec:	2380      	movs	r3, #128	@ 0x80
 80037ee:	05db      	lsls	r3, r3, #23
 80037f0:	429a      	cmp	r2, r3
 80037f2:	d009      	beq.n	8003808 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a12      	ldr	r2, [pc, #72]	@ (8003844 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d004      	beq.n	8003808 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a11      	ldr	r2, [pc, #68]	@ (8003848 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d10c      	bne.n	8003822 <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	2280      	movs	r2, #128	@ 0x80
 800380c:	4393      	bics	r3, r2
 800380e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	68ba      	ldr	r2, [r7, #8]
 8003816:	4313      	orrs	r3, r2
 8003818:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	68ba      	ldr	r2, [r7, #8]
 8003820:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	223d      	movs	r2, #61	@ 0x3d
 8003826:	2101      	movs	r1, #1
 8003828:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	223c      	movs	r2, #60	@ 0x3c
 800382e:	2100      	movs	r1, #0
 8003830:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003832:	2300      	movs	r3, #0
}
 8003834:	0018      	movs	r0, r3
 8003836:	46bd      	mov	sp, r7
 8003838:	b004      	add	sp, #16
 800383a:	bd80      	pop	{r7, pc}
 800383c:	40012c00 	.word	0x40012c00
 8003840:	ff0fffff 	.word	0xff0fffff
 8003844:	40000400 	.word	0x40000400
 8003848:	40014000 	.word	0x40014000

0800384c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b084      	sub	sp, #16
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
 8003854:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003856:	2300      	movs	r3, #0
 8003858:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	223c      	movs	r2, #60	@ 0x3c
 800385e:	5c9b      	ldrb	r3, [r3, r2]
 8003860:	2b01      	cmp	r3, #1
 8003862:	d101      	bne.n	8003868 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003864:	2302      	movs	r3, #2
 8003866:	e06f      	b.n	8003948 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	223c      	movs	r2, #60	@ 0x3c
 800386c:	2101      	movs	r1, #1
 800386e:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	22ff      	movs	r2, #255	@ 0xff
 8003874:	4393      	bics	r3, r2
 8003876:	001a      	movs	r2, r3
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	68db      	ldr	r3, [r3, #12]
 800387c:	4313      	orrs	r3, r2
 800387e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	4a33      	ldr	r2, [pc, #204]	@ (8003950 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 8003884:	401a      	ands	r2, r3
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	4313      	orrs	r3, r2
 800388c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	4a30      	ldr	r2, [pc, #192]	@ (8003954 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 8003892:	401a      	ands	r2, r3
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	4313      	orrs	r3, r2
 800389a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	4a2e      	ldr	r2, [pc, #184]	@ (8003958 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 80038a0:	401a      	ands	r2, r3
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4313      	orrs	r3, r2
 80038a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	4a2b      	ldr	r2, [pc, #172]	@ (800395c <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 80038ae:	401a      	ands	r2, r3
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	691b      	ldr	r3, [r3, #16]
 80038b4:	4313      	orrs	r3, r2
 80038b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	4a29      	ldr	r2, [pc, #164]	@ (8003960 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 80038bc:	401a      	ands	r2, r3
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	695b      	ldr	r3, [r3, #20]
 80038c2:	4313      	orrs	r3, r2
 80038c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	4a26      	ldr	r2, [pc, #152]	@ (8003964 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 80038ca:	401a      	ands	r2, r3
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038d0:	4313      	orrs	r3, r2
 80038d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	4a24      	ldr	r2, [pc, #144]	@ (8003968 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 80038d8:	401a      	ands	r2, r3
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	699b      	ldr	r3, [r3, #24]
 80038de:	041b      	lsls	r3, r3, #16
 80038e0:	4313      	orrs	r3, r2
 80038e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	4a21      	ldr	r2, [pc, #132]	@ (800396c <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 80038e8:	401a      	ands	r2, r3
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	69db      	ldr	r3, [r3, #28]
 80038ee:	4313      	orrs	r3, r2
 80038f0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a1e      	ldr	r2, [pc, #120]	@ (8003970 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d11c      	bne.n	8003936 <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	4a1d      	ldr	r2, [pc, #116]	@ (8003974 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8003900:	401a      	ands	r2, r3
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003906:	051b      	lsls	r3, r3, #20
 8003908:	4313      	orrs	r3, r2
 800390a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	4a1a      	ldr	r2, [pc, #104]	@ (8003978 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8003910:	401a      	ands	r2, r3
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	6a1b      	ldr	r3, [r3, #32]
 8003916:	4313      	orrs	r3, r2
 8003918:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	4a17      	ldr	r2, [pc, #92]	@ (800397c <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 800391e:	401a      	ands	r2, r3
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003924:	4313      	orrs	r3, r2
 8003926:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	4a15      	ldr	r2, [pc, #84]	@ (8003980 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800392c:	401a      	ands	r2, r3
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003932:	4313      	orrs	r3, r2
 8003934:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	68fa      	ldr	r2, [r7, #12]
 800393c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	223c      	movs	r2, #60	@ 0x3c
 8003942:	2100      	movs	r1, #0
 8003944:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003946:	2300      	movs	r3, #0
}
 8003948:	0018      	movs	r0, r3
 800394a:	46bd      	mov	sp, r7
 800394c:	b004      	add	sp, #16
 800394e:	bd80      	pop	{r7, pc}
 8003950:	fffffcff 	.word	0xfffffcff
 8003954:	fffffbff 	.word	0xfffffbff
 8003958:	fffff7ff 	.word	0xfffff7ff
 800395c:	ffffefff 	.word	0xffffefff
 8003960:	ffffdfff 	.word	0xffffdfff
 8003964:	ffffbfff 	.word	0xffffbfff
 8003968:	fff0ffff 	.word	0xfff0ffff
 800396c:	efffffff 	.word	0xefffffff
 8003970:	40012c00 	.word	0x40012c00
 8003974:	ff0fffff 	.word	0xff0fffff
 8003978:	feffffff 	.word	0xfeffffff
 800397c:	fdffffff 	.word	0xfdffffff
 8003980:	dfffffff 	.word	0xdfffffff

08003984 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b082      	sub	sp, #8
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800398c:	46c0      	nop			@ (mov r8, r8)
 800398e:	46bd      	mov	sp, r7
 8003990:	b002      	add	sp, #8
 8003992:	bd80      	pop	{r7, pc}

08003994 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b082      	sub	sp, #8
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800399c:	46c0      	nop			@ (mov r8, r8)
 800399e:	46bd      	mov	sp, r7
 80039a0:	b002      	add	sp, #8
 80039a2:	bd80      	pop	{r7, pc}

080039a4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b082      	sub	sp, #8
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80039ac:	46c0      	nop			@ (mov r8, r8)
 80039ae:	46bd      	mov	sp, r7
 80039b0:	b002      	add	sp, #8
 80039b2:	bd80      	pop	{r7, pc}

080039b4 <memset>:
 80039b4:	0003      	movs	r3, r0
 80039b6:	1882      	adds	r2, r0, r2
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d100      	bne.n	80039be <memset+0xa>
 80039bc:	4770      	bx	lr
 80039be:	7019      	strb	r1, [r3, #0]
 80039c0:	3301      	adds	r3, #1
 80039c2:	e7f9      	b.n	80039b8 <memset+0x4>

080039c4 <__libc_init_array>:
 80039c4:	b570      	push	{r4, r5, r6, lr}
 80039c6:	2600      	movs	r6, #0
 80039c8:	4c0c      	ldr	r4, [pc, #48]	@ (80039fc <__libc_init_array+0x38>)
 80039ca:	4d0d      	ldr	r5, [pc, #52]	@ (8003a00 <__libc_init_array+0x3c>)
 80039cc:	1b64      	subs	r4, r4, r5
 80039ce:	10a4      	asrs	r4, r4, #2
 80039d0:	42a6      	cmp	r6, r4
 80039d2:	d109      	bne.n	80039e8 <__libc_init_array+0x24>
 80039d4:	2600      	movs	r6, #0
 80039d6:	f000 f819 	bl	8003a0c <_init>
 80039da:	4c0a      	ldr	r4, [pc, #40]	@ (8003a04 <__libc_init_array+0x40>)
 80039dc:	4d0a      	ldr	r5, [pc, #40]	@ (8003a08 <__libc_init_array+0x44>)
 80039de:	1b64      	subs	r4, r4, r5
 80039e0:	10a4      	asrs	r4, r4, #2
 80039e2:	42a6      	cmp	r6, r4
 80039e4:	d105      	bne.n	80039f2 <__libc_init_array+0x2e>
 80039e6:	bd70      	pop	{r4, r5, r6, pc}
 80039e8:	00b3      	lsls	r3, r6, #2
 80039ea:	58eb      	ldr	r3, [r5, r3]
 80039ec:	4798      	blx	r3
 80039ee:	3601      	adds	r6, #1
 80039f0:	e7ee      	b.n	80039d0 <__libc_init_array+0xc>
 80039f2:	00b3      	lsls	r3, r6, #2
 80039f4:	58eb      	ldr	r3, [r5, r3]
 80039f6:	4798      	blx	r3
 80039f8:	3601      	adds	r6, #1
 80039fa:	e7f2      	b.n	80039e2 <__libc_init_array+0x1e>
 80039fc:	08003ab8 	.word	0x08003ab8
 8003a00:	08003ab8 	.word	0x08003ab8
 8003a04:	08003abc 	.word	0x08003abc
 8003a08:	08003ab8 	.word	0x08003ab8

08003a0c <_init>:
 8003a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a0e:	46c0      	nop			@ (mov r8, r8)
 8003a10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a12:	bc08      	pop	{r3}
 8003a14:	469e      	mov	lr, r3
 8003a16:	4770      	bx	lr

08003a18 <_fini>:
 8003a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a1a:	46c0      	nop			@ (mov r8, r8)
 8003a1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a1e:	bc08      	pop	{r3}
 8003a20:	469e      	mov	lr, r3
 8003a22:	4770      	bx	lr
