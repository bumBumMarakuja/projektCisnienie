
projektCisnienie.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b0c  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08003bc8  08003bc8  00004bc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c50  08003c50  00005058  2**0
                  CONTENTS
  4 .ARM          00000008  08003c50  08003c50  00004c50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003c58  08003c58  00005058  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c58  08003c58  00004c58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003c5c  08003c5c  00004c5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000058  20000000  08003c60  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000108  20000058  08003cb8  00005058  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000160  08003cb8  00005160  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00005058  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010214  00000000  00000000  00005080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000215d  00000000  00000000  00015294  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000df8  00000000  00000000  000173f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b06  00000000  00000000  000181f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018848  00000000  00000000  00018cf6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010df1  00000000  00000000  0003153e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a0ba9  00000000  00000000  0004232f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e2ed8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000032d8  00000000  00000000  000e2f1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004a  00000000  00000000  000e61f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000058 	.word	0x20000058
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08003bb0 	.word	0x08003bb0

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	2000005c 	.word	0x2000005c
 8000100:	08003bb0 	.word	0x08003bb0

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	@ 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			@ (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	@ 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	@ 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			@ (mov r8, r8)

080003f0 <__aeabi_uldivmod>:
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d111      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	d10f      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d100      	bne.n	80003fe <__aeabi_uldivmod+0xe>
 80003fc:	2800      	cmp	r0, #0
 80003fe:	d002      	beq.n	8000406 <__aeabi_uldivmod+0x16>
 8000400:	2100      	movs	r1, #0
 8000402:	43c9      	mvns	r1, r1
 8000404:	0008      	movs	r0, r1
 8000406:	b407      	push	{r0, r1, r2}
 8000408:	4802      	ldr	r0, [pc, #8]	@ (8000414 <__aeabi_uldivmod+0x24>)
 800040a:	a102      	add	r1, pc, #8	@ (adr r1, 8000414 <__aeabi_uldivmod+0x24>)
 800040c:	1840      	adds	r0, r0, r1
 800040e:	9002      	str	r0, [sp, #8]
 8000410:	bd03      	pop	{r0, r1, pc}
 8000412:	46c0      	nop			@ (mov r8, r8)
 8000414:	ffffffd9 	.word	0xffffffd9
 8000418:	b403      	push	{r0, r1}
 800041a:	4668      	mov	r0, sp
 800041c:	b501      	push	{r0, lr}
 800041e:	9802      	ldr	r0, [sp, #8]
 8000420:	f000 f806 	bl	8000430 <__udivmoddi4>
 8000424:	9b01      	ldr	r3, [sp, #4]
 8000426:	469e      	mov	lr, r3
 8000428:	b002      	add	sp, #8
 800042a:	bc0c      	pop	{r2, r3}
 800042c:	4770      	bx	lr
 800042e:	46c0      	nop			@ (mov r8, r8)

08000430 <__udivmoddi4>:
 8000430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000432:	4657      	mov	r7, sl
 8000434:	464e      	mov	r6, r9
 8000436:	4645      	mov	r5, r8
 8000438:	46de      	mov	lr, fp
 800043a:	b5e0      	push	{r5, r6, r7, lr}
 800043c:	0004      	movs	r4, r0
 800043e:	000d      	movs	r5, r1
 8000440:	4692      	mov	sl, r2
 8000442:	4699      	mov	r9, r3
 8000444:	b083      	sub	sp, #12
 8000446:	428b      	cmp	r3, r1
 8000448:	d830      	bhi.n	80004ac <__udivmoddi4+0x7c>
 800044a:	d02d      	beq.n	80004a8 <__udivmoddi4+0x78>
 800044c:	4649      	mov	r1, r9
 800044e:	4650      	mov	r0, sl
 8000450:	f000 f8ba 	bl	80005c8 <__clzdi2>
 8000454:	0029      	movs	r1, r5
 8000456:	0006      	movs	r6, r0
 8000458:	0020      	movs	r0, r4
 800045a:	f000 f8b5 	bl	80005c8 <__clzdi2>
 800045e:	1a33      	subs	r3, r6, r0
 8000460:	4698      	mov	r8, r3
 8000462:	3b20      	subs	r3, #32
 8000464:	d434      	bmi.n	80004d0 <__udivmoddi4+0xa0>
 8000466:	469b      	mov	fp, r3
 8000468:	4653      	mov	r3, sl
 800046a:	465a      	mov	r2, fp
 800046c:	4093      	lsls	r3, r2
 800046e:	4642      	mov	r2, r8
 8000470:	001f      	movs	r7, r3
 8000472:	4653      	mov	r3, sl
 8000474:	4093      	lsls	r3, r2
 8000476:	001e      	movs	r6, r3
 8000478:	42af      	cmp	r7, r5
 800047a:	d83b      	bhi.n	80004f4 <__udivmoddi4+0xc4>
 800047c:	42af      	cmp	r7, r5
 800047e:	d100      	bne.n	8000482 <__udivmoddi4+0x52>
 8000480:	e079      	b.n	8000576 <__udivmoddi4+0x146>
 8000482:	465b      	mov	r3, fp
 8000484:	1ba4      	subs	r4, r4, r6
 8000486:	41bd      	sbcs	r5, r7
 8000488:	2b00      	cmp	r3, #0
 800048a:	da00      	bge.n	800048e <__udivmoddi4+0x5e>
 800048c:	e076      	b.n	800057c <__udivmoddi4+0x14c>
 800048e:	2200      	movs	r2, #0
 8000490:	2300      	movs	r3, #0
 8000492:	9200      	str	r2, [sp, #0]
 8000494:	9301      	str	r3, [sp, #4]
 8000496:	2301      	movs	r3, #1
 8000498:	465a      	mov	r2, fp
 800049a:	4093      	lsls	r3, r2
 800049c:	9301      	str	r3, [sp, #4]
 800049e:	2301      	movs	r3, #1
 80004a0:	4642      	mov	r2, r8
 80004a2:	4093      	lsls	r3, r2
 80004a4:	9300      	str	r3, [sp, #0]
 80004a6:	e029      	b.n	80004fc <__udivmoddi4+0xcc>
 80004a8:	4282      	cmp	r2, r0
 80004aa:	d9cf      	bls.n	800044c <__udivmoddi4+0x1c>
 80004ac:	2200      	movs	r2, #0
 80004ae:	2300      	movs	r3, #0
 80004b0:	9200      	str	r2, [sp, #0]
 80004b2:	9301      	str	r3, [sp, #4]
 80004b4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <__udivmoddi4+0x8e>
 80004ba:	601c      	str	r4, [r3, #0]
 80004bc:	605d      	str	r5, [r3, #4]
 80004be:	9800      	ldr	r0, [sp, #0]
 80004c0:	9901      	ldr	r1, [sp, #4]
 80004c2:	b003      	add	sp, #12
 80004c4:	bcf0      	pop	{r4, r5, r6, r7}
 80004c6:	46bb      	mov	fp, r7
 80004c8:	46b2      	mov	sl, r6
 80004ca:	46a9      	mov	r9, r5
 80004cc:	46a0      	mov	r8, r4
 80004ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004d0:	4642      	mov	r2, r8
 80004d2:	469b      	mov	fp, r3
 80004d4:	2320      	movs	r3, #32
 80004d6:	1a9b      	subs	r3, r3, r2
 80004d8:	4652      	mov	r2, sl
 80004da:	40da      	lsrs	r2, r3
 80004dc:	4641      	mov	r1, r8
 80004de:	0013      	movs	r3, r2
 80004e0:	464a      	mov	r2, r9
 80004e2:	408a      	lsls	r2, r1
 80004e4:	0017      	movs	r7, r2
 80004e6:	4642      	mov	r2, r8
 80004e8:	431f      	orrs	r7, r3
 80004ea:	4653      	mov	r3, sl
 80004ec:	4093      	lsls	r3, r2
 80004ee:	001e      	movs	r6, r3
 80004f0:	42af      	cmp	r7, r5
 80004f2:	d9c3      	bls.n	800047c <__udivmoddi4+0x4c>
 80004f4:	2200      	movs	r2, #0
 80004f6:	2300      	movs	r3, #0
 80004f8:	9200      	str	r2, [sp, #0]
 80004fa:	9301      	str	r3, [sp, #4]
 80004fc:	4643      	mov	r3, r8
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d0d8      	beq.n	80004b4 <__udivmoddi4+0x84>
 8000502:	07fb      	lsls	r3, r7, #31
 8000504:	0872      	lsrs	r2, r6, #1
 8000506:	431a      	orrs	r2, r3
 8000508:	4646      	mov	r6, r8
 800050a:	087b      	lsrs	r3, r7, #1
 800050c:	e00e      	b.n	800052c <__udivmoddi4+0xfc>
 800050e:	42ab      	cmp	r3, r5
 8000510:	d101      	bne.n	8000516 <__udivmoddi4+0xe6>
 8000512:	42a2      	cmp	r2, r4
 8000514:	d80c      	bhi.n	8000530 <__udivmoddi4+0x100>
 8000516:	1aa4      	subs	r4, r4, r2
 8000518:	419d      	sbcs	r5, r3
 800051a:	2001      	movs	r0, #1
 800051c:	1924      	adds	r4, r4, r4
 800051e:	416d      	adcs	r5, r5
 8000520:	2100      	movs	r1, #0
 8000522:	3e01      	subs	r6, #1
 8000524:	1824      	adds	r4, r4, r0
 8000526:	414d      	adcs	r5, r1
 8000528:	2e00      	cmp	r6, #0
 800052a:	d006      	beq.n	800053a <__udivmoddi4+0x10a>
 800052c:	42ab      	cmp	r3, r5
 800052e:	d9ee      	bls.n	800050e <__udivmoddi4+0xde>
 8000530:	3e01      	subs	r6, #1
 8000532:	1924      	adds	r4, r4, r4
 8000534:	416d      	adcs	r5, r5
 8000536:	2e00      	cmp	r6, #0
 8000538:	d1f8      	bne.n	800052c <__udivmoddi4+0xfc>
 800053a:	9800      	ldr	r0, [sp, #0]
 800053c:	9901      	ldr	r1, [sp, #4]
 800053e:	465b      	mov	r3, fp
 8000540:	1900      	adds	r0, r0, r4
 8000542:	4169      	adcs	r1, r5
 8000544:	2b00      	cmp	r3, #0
 8000546:	db24      	blt.n	8000592 <__udivmoddi4+0x162>
 8000548:	002b      	movs	r3, r5
 800054a:	465a      	mov	r2, fp
 800054c:	4644      	mov	r4, r8
 800054e:	40d3      	lsrs	r3, r2
 8000550:	002a      	movs	r2, r5
 8000552:	40e2      	lsrs	r2, r4
 8000554:	001c      	movs	r4, r3
 8000556:	465b      	mov	r3, fp
 8000558:	0015      	movs	r5, r2
 800055a:	2b00      	cmp	r3, #0
 800055c:	db2a      	blt.n	80005b4 <__udivmoddi4+0x184>
 800055e:	0026      	movs	r6, r4
 8000560:	409e      	lsls	r6, r3
 8000562:	0033      	movs	r3, r6
 8000564:	0026      	movs	r6, r4
 8000566:	4647      	mov	r7, r8
 8000568:	40be      	lsls	r6, r7
 800056a:	0032      	movs	r2, r6
 800056c:	1a80      	subs	r0, r0, r2
 800056e:	4199      	sbcs	r1, r3
 8000570:	9000      	str	r0, [sp, #0]
 8000572:	9101      	str	r1, [sp, #4]
 8000574:	e79e      	b.n	80004b4 <__udivmoddi4+0x84>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d8bc      	bhi.n	80004f4 <__udivmoddi4+0xc4>
 800057a:	e782      	b.n	8000482 <__udivmoddi4+0x52>
 800057c:	4642      	mov	r2, r8
 800057e:	2320      	movs	r3, #32
 8000580:	2100      	movs	r1, #0
 8000582:	1a9b      	subs	r3, r3, r2
 8000584:	2200      	movs	r2, #0
 8000586:	9100      	str	r1, [sp, #0]
 8000588:	9201      	str	r2, [sp, #4]
 800058a:	2201      	movs	r2, #1
 800058c:	40da      	lsrs	r2, r3
 800058e:	9201      	str	r2, [sp, #4]
 8000590:	e785      	b.n	800049e <__udivmoddi4+0x6e>
 8000592:	4642      	mov	r2, r8
 8000594:	2320      	movs	r3, #32
 8000596:	1a9b      	subs	r3, r3, r2
 8000598:	002a      	movs	r2, r5
 800059a:	4646      	mov	r6, r8
 800059c:	409a      	lsls	r2, r3
 800059e:	0023      	movs	r3, r4
 80005a0:	40f3      	lsrs	r3, r6
 80005a2:	4644      	mov	r4, r8
 80005a4:	4313      	orrs	r3, r2
 80005a6:	002a      	movs	r2, r5
 80005a8:	40e2      	lsrs	r2, r4
 80005aa:	001c      	movs	r4, r3
 80005ac:	465b      	mov	r3, fp
 80005ae:	0015      	movs	r5, r2
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	dad4      	bge.n	800055e <__udivmoddi4+0x12e>
 80005b4:	4642      	mov	r2, r8
 80005b6:	002f      	movs	r7, r5
 80005b8:	2320      	movs	r3, #32
 80005ba:	0026      	movs	r6, r4
 80005bc:	4097      	lsls	r7, r2
 80005be:	1a9b      	subs	r3, r3, r2
 80005c0:	40de      	lsrs	r6, r3
 80005c2:	003b      	movs	r3, r7
 80005c4:	4333      	orrs	r3, r6
 80005c6:	e7cd      	b.n	8000564 <__udivmoddi4+0x134>

080005c8 <__clzdi2>:
 80005c8:	b510      	push	{r4, lr}
 80005ca:	2900      	cmp	r1, #0
 80005cc:	d103      	bne.n	80005d6 <__clzdi2+0xe>
 80005ce:	f000 f807 	bl	80005e0 <__clzsi2>
 80005d2:	3020      	adds	r0, #32
 80005d4:	e002      	b.n	80005dc <__clzdi2+0x14>
 80005d6:	0008      	movs	r0, r1
 80005d8:	f000 f802 	bl	80005e0 <__clzsi2>
 80005dc:	bd10      	pop	{r4, pc}
 80005de:	46c0      	nop			@ (mov r8, r8)

080005e0 <__clzsi2>:
 80005e0:	211c      	movs	r1, #28
 80005e2:	2301      	movs	r3, #1
 80005e4:	041b      	lsls	r3, r3, #16
 80005e6:	4298      	cmp	r0, r3
 80005e8:	d301      	bcc.n	80005ee <__clzsi2+0xe>
 80005ea:	0c00      	lsrs	r0, r0, #16
 80005ec:	3910      	subs	r1, #16
 80005ee:	0a1b      	lsrs	r3, r3, #8
 80005f0:	4298      	cmp	r0, r3
 80005f2:	d301      	bcc.n	80005f8 <__clzsi2+0x18>
 80005f4:	0a00      	lsrs	r0, r0, #8
 80005f6:	3908      	subs	r1, #8
 80005f8:	091b      	lsrs	r3, r3, #4
 80005fa:	4298      	cmp	r0, r3
 80005fc:	d301      	bcc.n	8000602 <__clzsi2+0x22>
 80005fe:	0900      	lsrs	r0, r0, #4
 8000600:	3904      	subs	r1, #4
 8000602:	a202      	add	r2, pc, #8	@ (adr r2, 800060c <__clzsi2+0x2c>)
 8000604:	5c10      	ldrb	r0, [r2, r0]
 8000606:	1840      	adds	r0, r0, r1
 8000608:	4770      	bx	lr
 800060a:	46c0      	nop			@ (mov r8, r8)
 800060c:	02020304 	.word	0x02020304
 8000610:	01010101 	.word	0x01010101
	...

0800061c <SevenSegment_Update>:
		{1, 1, 1, 1, 0, 0, 0},  // 7
		{0, 0, 0, 0, 0, 0, 0},  // 8
		{0, 0, 0, 1, 0, 0, 0}   // 9
};

void SevenSegment_Update(uint8_t number){
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
 8000622:	0002      	movs	r2, r0
 8000624:	1dfb      	adds	r3, r7, #7
 8000626:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(SevSegA_GPIO_Port, SevSegA_Pin, segmentNumber[number][6]);
 8000628:	1dfb      	adds	r3, r7, #7
 800062a:	781a      	ldrb	r2, [r3, #0]
 800062c:	4932      	ldr	r1, [pc, #200]	@ (80006f8 <SevenSegment_Update+0xdc>)
 800062e:	0013      	movs	r3, r2
 8000630:	00db      	lsls	r3, r3, #3
 8000632:	1a9b      	subs	r3, r3, r2
 8000634:	18cb      	adds	r3, r1, r3
 8000636:	3306      	adds	r3, #6
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	4830      	ldr	r0, [pc, #192]	@ (80006fc <SevenSegment_Update+0xe0>)
 800063c:	001a      	movs	r2, r3
 800063e:	2110      	movs	r1, #16
 8000640:	f001 f875 	bl	800172e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SevSegB_GPIO_Port, SevSegB_Pin, segmentNumber[number][5]);
 8000644:	1dfb      	adds	r3, r7, #7
 8000646:	781a      	ldrb	r2, [r3, #0]
 8000648:	492b      	ldr	r1, [pc, #172]	@ (80006f8 <SevenSegment_Update+0xdc>)
 800064a:	0013      	movs	r3, r2
 800064c:	00db      	lsls	r3, r3, #3
 800064e:	1a9b      	subs	r3, r3, r2
 8000650:	18cb      	adds	r3, r1, r3
 8000652:	3305      	adds	r3, #5
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	482a      	ldr	r0, [pc, #168]	@ (8000700 <SevenSegment_Update+0xe4>)
 8000658:	001a      	movs	r2, r3
 800065a:	2110      	movs	r1, #16
 800065c:	f001 f867 	bl	800172e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SevSegC_GPIO_Port, SevSegC_Pin, segmentNumber[number][4]);
 8000660:	1dfb      	adds	r3, r7, #7
 8000662:	781a      	ldrb	r2, [r3, #0]
 8000664:	4924      	ldr	r1, [pc, #144]	@ (80006f8 <SevenSegment_Update+0xdc>)
 8000666:	0013      	movs	r3, r2
 8000668:	00db      	lsls	r3, r3, #3
 800066a:	1a9b      	subs	r3, r3, r2
 800066c:	18cb      	adds	r3, r1, r3
 800066e:	3304      	adds	r3, #4
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	4823      	ldr	r0, [pc, #140]	@ (8000700 <SevenSegment_Update+0xe4>)
 8000674:	001a      	movs	r2, r3
 8000676:	2180      	movs	r1, #128	@ 0x80
 8000678:	f001 f859 	bl	800172e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SevSegD_GPIO_Port, SevSegD_Pin, segmentNumber[number][3]);
 800067c:	1dfb      	adds	r3, r7, #7
 800067e:	781a      	ldrb	r2, [r3, #0]
 8000680:	491d      	ldr	r1, [pc, #116]	@ (80006f8 <SevenSegment_Update+0xdc>)
 8000682:	0013      	movs	r3, r2
 8000684:	00db      	lsls	r3, r3, #3
 8000686:	1a9b      	subs	r3, r3, r2
 8000688:	18cb      	adds	r3, r1, r3
 800068a:	3303      	adds	r3, #3
 800068c:	781a      	ldrb	r2, [r3, #0]
 800068e:	23a0      	movs	r3, #160	@ 0xa0
 8000690:	05db      	lsls	r3, r3, #23
 8000692:	2180      	movs	r1, #128	@ 0x80
 8000694:	0018      	movs	r0, r3
 8000696:	f001 f84a 	bl	800172e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SevSegE_GPIO_Port, SevSegE_Pin, segmentNumber[number][2]);
 800069a:	1dfb      	adds	r3, r7, #7
 800069c:	781a      	ldrb	r2, [r3, #0]
 800069e:	4916      	ldr	r1, [pc, #88]	@ (80006f8 <SevenSegment_Update+0xdc>)
 80006a0:	0013      	movs	r3, r2
 80006a2:	00db      	lsls	r3, r3, #3
 80006a4:	1a9b      	subs	r3, r3, r2
 80006a6:	18cb      	adds	r3, r1, r3
 80006a8:	3302      	adds	r3, #2
 80006aa:	781a      	ldrb	r2, [r3, #0]
 80006ac:	23a0      	movs	r3, #160	@ 0xa0
 80006ae:	05db      	lsls	r3, r3, #23
 80006b0:	2140      	movs	r1, #64	@ 0x40
 80006b2:	0018      	movs	r0, r3
 80006b4:	f001 f83b 	bl	800172e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SevSegF_GPIO_Port, SevSegF_Pin, segmentNumber[number][1]);
 80006b8:	1dfb      	adds	r3, r7, #7
 80006ba:	781a      	ldrb	r2, [r3, #0]
 80006bc:	490e      	ldr	r1, [pc, #56]	@ (80006f8 <SevenSegment_Update+0xdc>)
 80006be:	0013      	movs	r3, r2
 80006c0:	00db      	lsls	r3, r3, #3
 80006c2:	1a9b      	subs	r3, r3, r2
 80006c4:	18cb      	adds	r3, r1, r3
 80006c6:	3301      	adds	r3, #1
 80006c8:	781b      	ldrb	r3, [r3, #0]
 80006ca:	480c      	ldr	r0, [pc, #48]	@ (80006fc <SevenSegment_Update+0xe0>)
 80006cc:	001a      	movs	r2, r3
 80006ce:	2120      	movs	r1, #32
 80006d0:	f001 f82d 	bl	800172e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SevSegG_GPIO_Port, SevSegG_Pin, segmentNumber[number][0]);
 80006d4:	1dfb      	adds	r3, r7, #7
 80006d6:	781a      	ldrb	r2, [r3, #0]
 80006d8:	4907      	ldr	r1, [pc, #28]	@ (80006f8 <SevenSegment_Update+0xdc>)
 80006da:	0013      	movs	r3, r2
 80006dc:	00db      	lsls	r3, r3, #3
 80006de:	1a9b      	subs	r3, r3, r2
 80006e0:	5c5a      	ldrb	r2, [r3, r1]
 80006e2:	2380      	movs	r3, #128	@ 0x80
 80006e4:	0099      	lsls	r1, r3, #2
 80006e6:	23a0      	movs	r3, #160	@ 0xa0
 80006e8:	05db      	lsls	r3, r3, #23
 80006ea:	0018      	movs	r0, r3
 80006ec:	f001 f81f 	bl	800172e <HAL_GPIO_WritePin>
}
 80006f0:	46c0      	nop			@ (mov r8, r8)
 80006f2:	46bd      	mov	sp, r7
 80006f4:	b002      	add	sp, #8
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	20000004 	.word	0x20000004
 80006fc:	50000400 	.word	0x50000400
 8000700:	50000800 	.word	0x50000800

08000704 <First_program>:


void First_program(){
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, 1);
 8000708:	2380      	movs	r3, #128	@ 0x80
 800070a:	009b      	lsls	r3, r3, #2
 800070c:	4814      	ldr	r0, [pc, #80]	@ (8000760 <First_program+0x5c>)
 800070e:	2201      	movs	r2, #1
 8000710:	0019      	movs	r1, r3
 8000712:	f001 f80c 	bl	800172e <HAL_GPIO_WritePin>
    HAL_Delay(5000);
 8000716:	4b13      	ldr	r3, [pc, #76]	@ (8000764 <First_program+0x60>)
 8000718:	0018      	movs	r0, r3
 800071a:	f000 fd85 	bl	8001228 <HAL_Delay>
    HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, 0);
 800071e:	2380      	movs	r3, #128	@ 0x80
 8000720:	009b      	lsls	r3, r3, #2
 8000722:	480f      	ldr	r0, [pc, #60]	@ (8000760 <First_program+0x5c>)
 8000724:	2200      	movs	r2, #0
 8000726:	0019      	movs	r1, r3
 8000728:	f001 f801 	bl	800172e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 1);
 800072c:	4b0e      	ldr	r3, [pc, #56]	@ (8000768 <First_program+0x64>)
 800072e:	2201      	movs	r2, #1
 8000730:	2120      	movs	r1, #32
 8000732:	0018      	movs	r0, r3
 8000734:	f000 fffb 	bl	800172e <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 8000738:	23fa      	movs	r3, #250	@ 0xfa
 800073a:	009b      	lsls	r3, r3, #2
 800073c:	0018      	movs	r0, r3
 800073e:	f000 fd73 	bl	8001228 <HAL_Delay>
    HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 0);
 8000742:	4b09      	ldr	r3, [pc, #36]	@ (8000768 <First_program+0x64>)
 8000744:	2200      	movs	r2, #0
 8000746:	2120      	movs	r1, #32
 8000748:	0018      	movs	r0, r3
 800074a:	f000 fff0 	bl	800172e <HAL_GPIO_WritePin>
    state = 0;
 800074e:	4b07      	ldr	r3, [pc, #28]	@ (800076c <First_program+0x68>)
 8000750:	2200      	movs	r2, #0
 8000752:	701a      	strb	r2, [r3, #0]
    program = 0;
 8000754:	4b06      	ldr	r3, [pc, #24]	@ (8000770 <First_program+0x6c>)
 8000756:	2200      	movs	r2, #0
 8000758:	701a      	strb	r2, [r3, #0]
}
 800075a:	46c0      	nop			@ (mov r8, r8)
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}
 8000760:	50000c00 	.word	0x50000c00
 8000764:	00001388 	.word	0x00001388
 8000768:	50000800 	.word	0x50000800
 800076c:	20000154 	.word	0x20000154
 8000770:	20000155 	.word	0x20000155

08000774 <Second_program>:

void Second_program(){
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 1);
 8000778:	2380      	movs	r3, #128	@ 0x80
 800077a:	00db      	lsls	r3, r3, #3
 800077c:	4856      	ldr	r0, [pc, #344]	@ (80008d8 <Second_program+0x164>)
 800077e:	2201      	movs	r2, #1
 8000780:	0019      	movs	r1, r3
 8000782:	f000 ffd4 	bl	800172e <HAL_GPIO_WritePin>
    HAL_TIM_Base_Start_IT(&htim1);
 8000786:	4b55      	ldr	r3, [pc, #340]	@ (80008dc <Second_program+0x168>)
 8000788:	0018      	movs	r0, r3
 800078a:	f001 ff4b 	bl	8002624 <HAL_TIM_Base_Start_IT>
    while (counter > 0){
 800078e:	e076      	b.n	800087e <Second_program+0x10a>
    	temp1 = counter/1000;
 8000790:	4b53      	ldr	r3, [pc, #332]	@ (80008e0 <Second_program+0x16c>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	22fa      	movs	r2, #250	@ 0xfa
 8000796:	0091      	lsls	r1, r2, #2
 8000798:	0018      	movs	r0, r3
 800079a:	f7ff fcb3 	bl	8000104 <__udivsi3>
 800079e:	0003      	movs	r3, r0
 80007a0:	b2da      	uxtb	r2, r3
 80007a2:	4b50      	ldr	r3, [pc, #320]	@ (80008e4 <Second_program+0x170>)
 80007a4:	701a      	strb	r2, [r3, #0]
    	temp2 = ((counter/100)%10);
 80007a6:	4b4e      	ldr	r3, [pc, #312]	@ (80008e0 <Second_program+0x16c>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	2164      	movs	r1, #100	@ 0x64
 80007ac:	0018      	movs	r0, r3
 80007ae:	f7ff fca9 	bl	8000104 <__udivsi3>
 80007b2:	0003      	movs	r3, r0
 80007b4:	210a      	movs	r1, #10
 80007b6:	0018      	movs	r0, r3
 80007b8:	f7ff fd2a 	bl	8000210 <__aeabi_uidivmod>
 80007bc:	000b      	movs	r3, r1
 80007be:	b2da      	uxtb	r2, r3
 80007c0:	4b49      	ldr	r3, [pc, #292]	@ (80008e8 <Second_program+0x174>)
 80007c2:	701a      	strb	r2, [r3, #0]
    	temp3 = ((counter/10)%10);
 80007c4:	4b46      	ldr	r3, [pc, #280]	@ (80008e0 <Second_program+0x16c>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	210a      	movs	r1, #10
 80007ca:	0018      	movs	r0, r3
 80007cc:	f7ff fc9a 	bl	8000104 <__udivsi3>
 80007d0:	0003      	movs	r3, r0
 80007d2:	210a      	movs	r1, #10
 80007d4:	0018      	movs	r0, r3
 80007d6:	f7ff fd1b 	bl	8000210 <__aeabi_uidivmod>
 80007da:	000b      	movs	r3, r1
 80007dc:	b2da      	uxtb	r2, r3
 80007de:	4b43      	ldr	r3, [pc, #268]	@ (80008ec <Second_program+0x178>)
 80007e0:	701a      	strb	r2, [r3, #0]
    	temp4 = (counter%10);
 80007e2:	4b3f      	ldr	r3, [pc, #252]	@ (80008e0 <Second_program+0x16c>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	210a      	movs	r1, #10
 80007e8:	0018      	movs	r0, r3
 80007ea:	f7ff fd11 	bl	8000210 <__aeabi_uidivmod>
 80007ee:	000b      	movs	r3, r1
 80007f0:	b2da      	uxtb	r2, r3
 80007f2:	4b3f      	ldr	r3, [pc, #252]	@ (80008f0 <Second_program+0x17c>)
 80007f4:	701a      	strb	r2, [r3, #0]
    	SevenSegment_Update(temp2);
 80007f6:	4b3c      	ldr	r3, [pc, #240]	@ (80008e8 <Second_program+0x174>)
 80007f8:	781b      	ldrb	r3, [r3, #0]
 80007fa:	0018      	movs	r0, r3
 80007fc:	f7ff ff0e 	bl	800061c <SevenSegment_Update>
    	HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, GPIO_PIN_SET);
 8000800:	4b35      	ldr	r3, [pc, #212]	@ (80008d8 <Second_program+0x164>)
 8000802:	2201      	movs	r2, #1
 8000804:	2108      	movs	r1, #8
 8000806:	0018      	movs	r0, r3
 8000808:	f000 ff91 	bl	800172e <HAL_GPIO_WritePin>
    	HAL_Delay(5);
 800080c:	2005      	movs	r0, #5
 800080e:	f000 fd0b 	bl	8001228 <HAL_Delay>
    	HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, GPIO_PIN_RESET);
 8000812:	4b31      	ldr	r3, [pc, #196]	@ (80008d8 <Second_program+0x164>)
 8000814:	2200      	movs	r2, #0
 8000816:	2108      	movs	r1, #8
 8000818:	0018      	movs	r0, r3
 800081a:	f000 ff88 	bl	800172e <HAL_GPIO_WritePin>

    	SevenSegment_Update(temp3);
 800081e:	4b33      	ldr	r3, [pc, #204]	@ (80008ec <Second_program+0x178>)
 8000820:	781b      	ldrb	r3, [r3, #0]
 8000822:	0018      	movs	r0, r3
 8000824:	f7ff fefa 	bl	800061c <SevenSegment_Update>
    	HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, GPIO_PIN_SET);
 8000828:	2380      	movs	r3, #128	@ 0x80
 800082a:	00d9      	lsls	r1, r3, #3
 800082c:	23a0      	movs	r3, #160	@ 0xa0
 800082e:	05db      	lsls	r3, r3, #23
 8000830:	2201      	movs	r2, #1
 8000832:	0018      	movs	r0, r3
 8000834:	f000 ff7b 	bl	800172e <HAL_GPIO_WritePin>
    	HAL_Delay(5);
 8000838:	2005      	movs	r0, #5
 800083a:	f000 fcf5 	bl	8001228 <HAL_Delay>
    	HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, GPIO_PIN_RESET);
 800083e:	2380      	movs	r3, #128	@ 0x80
 8000840:	00d9      	lsls	r1, r3, #3
 8000842:	23a0      	movs	r3, #160	@ 0xa0
 8000844:	05db      	lsls	r3, r3, #23
 8000846:	2200      	movs	r2, #0
 8000848:	0018      	movs	r0, r3
 800084a:	f000 ff70 	bl	800172e <HAL_GPIO_WritePin>

    	SevenSegment_Update(temp4);
 800084e:	4b28      	ldr	r3, [pc, #160]	@ (80008f0 <Second_program+0x17c>)
 8000850:	781b      	ldrb	r3, [r3, #0]
 8000852:	0018      	movs	r0, r3
 8000854:	f7ff fee2 	bl	800061c <SevenSegment_Update>
    	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, GPIO_PIN_SET);
 8000858:	2380      	movs	r3, #128	@ 0x80
 800085a:	0059      	lsls	r1, r3, #1
 800085c:	23a0      	movs	r3, #160	@ 0xa0
 800085e:	05db      	lsls	r3, r3, #23
 8000860:	2201      	movs	r2, #1
 8000862:	0018      	movs	r0, r3
 8000864:	f000 ff63 	bl	800172e <HAL_GPIO_WritePin>
    	HAL_Delay(5);
 8000868:	2005      	movs	r0, #5
 800086a:	f000 fcdd 	bl	8001228 <HAL_Delay>
    	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, GPIO_PIN_RESET);}
 800086e:	2380      	movs	r3, #128	@ 0x80
 8000870:	0059      	lsls	r1, r3, #1
 8000872:	23a0      	movs	r3, #160	@ 0xa0
 8000874:	05db      	lsls	r3, r3, #23
 8000876:	2200      	movs	r2, #0
 8000878:	0018      	movs	r0, r3
 800087a:	f000 ff58 	bl	800172e <HAL_GPIO_WritePin>
    while (counter > 0){
 800087e:	4b18      	ldr	r3, [pc, #96]	@ (80008e0 <Second_program+0x16c>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	2b00      	cmp	r3, #0
 8000884:	d184      	bne.n	8000790 <Second_program+0x1c>

    HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 1);
 8000886:	4b1b      	ldr	r3, [pc, #108]	@ (80008f4 <Second_program+0x180>)
 8000888:	2201      	movs	r2, #1
 800088a:	2120      	movs	r1, #32
 800088c:	0018      	movs	r0, r3
 800088e:	f000 ff4e 	bl	800172e <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 8000892:	23fa      	movs	r3, #250	@ 0xfa
 8000894:	009b      	lsls	r3, r3, #2
 8000896:	0018      	movs	r0, r3
 8000898:	f000 fcc6 	bl	8001228 <HAL_Delay>
    HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 0);
 800089c:	4b15      	ldr	r3, [pc, #84]	@ (80008f4 <Second_program+0x180>)
 800089e:	2200      	movs	r2, #0
 80008a0:	2120      	movs	r1, #32
 80008a2:	0018      	movs	r0, r3
 80008a4:	f000 ff43 	bl	800172e <HAL_GPIO_WritePin>
    counter = 60;
 80008a8:	4b0d      	ldr	r3, [pc, #52]	@ (80008e0 <Second_program+0x16c>)
 80008aa:	223c      	movs	r2, #60	@ 0x3c
 80008ac:	601a      	str	r2, [r3, #0]
    state = 0;
 80008ae:	4b12      	ldr	r3, [pc, #72]	@ (80008f8 <Second_program+0x184>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	701a      	strb	r2, [r3, #0]
    program = 0;
 80008b4:	4b11      	ldr	r3, [pc, #68]	@ (80008fc <Second_program+0x188>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	701a      	strb	r2, [r3, #0]
    HAL_TIM_Base_Stop_IT(&htim1);
 80008ba:	4b08      	ldr	r3, [pc, #32]	@ (80008dc <Second_program+0x168>)
 80008bc:	0018      	movs	r0, r3
 80008be:	f001 ff0d 	bl	80026dc <HAL_TIM_Base_Stop_IT>
    HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 0);
 80008c2:	2380      	movs	r3, #128	@ 0x80
 80008c4:	00db      	lsls	r3, r3, #3
 80008c6:	4804      	ldr	r0, [pc, #16]	@ (80008d8 <Second_program+0x164>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	0019      	movs	r1, r3
 80008cc:	f000 ff2f 	bl	800172e <HAL_GPIO_WritePin>
}
 80008d0:	46c0      	nop			@ (mov r8, r8)
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	46c0      	nop			@ (mov r8, r8)
 80008d8:	50000400 	.word	0x50000400
 80008dc:	20000074 	.word	0x20000074
 80008e0:	20000000 	.word	0x20000000
 80008e4:	20000156 	.word	0x20000156
 80008e8:	20000157 	.word	0x20000157
 80008ec:	20000158 	.word	0x20000158
 80008f0:	20000159 	.word	0x20000159
 80008f4:	50000800 	.word	0x50000800
 80008f8:	20000154 	.word	0x20000154
 80008fc:	20000155 	.word	0x20000155

08000900 <Third_program>:

void Third_program(){
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8000904:	4b14      	ldr	r3, [pc, #80]	@ (8000958 <Third_program+0x58>)
 8000906:	2201      	movs	r2, #1
 8000908:	2140      	movs	r1, #64	@ 0x40
 800090a:	0018      	movs	r0, r3
 800090c:	f000 ff0f 	bl	800172e <HAL_GPIO_WritePin>
    HAL_Delay(5000);
 8000910:	4b12      	ldr	r3, [pc, #72]	@ (800095c <Third_program+0x5c>)
 8000912:	0018      	movs	r0, r3
 8000914:	f000 fc88 	bl	8001228 <HAL_Delay>
    HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8000918:	4b0f      	ldr	r3, [pc, #60]	@ (8000958 <Third_program+0x58>)
 800091a:	2200      	movs	r2, #0
 800091c:	2140      	movs	r1, #64	@ 0x40
 800091e:	0018      	movs	r0, r3
 8000920:	f000 ff05 	bl	800172e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 1);
 8000924:	4b0e      	ldr	r3, [pc, #56]	@ (8000960 <Third_program+0x60>)
 8000926:	2201      	movs	r2, #1
 8000928:	2120      	movs	r1, #32
 800092a:	0018      	movs	r0, r3
 800092c:	f000 feff 	bl	800172e <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 8000930:	23fa      	movs	r3, #250	@ 0xfa
 8000932:	009b      	lsls	r3, r3, #2
 8000934:	0018      	movs	r0, r3
 8000936:	f000 fc77 	bl	8001228 <HAL_Delay>
    HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 0);
 800093a:	4b09      	ldr	r3, [pc, #36]	@ (8000960 <Third_program+0x60>)
 800093c:	2200      	movs	r2, #0
 800093e:	2120      	movs	r1, #32
 8000940:	0018      	movs	r0, r3
 8000942:	f000 fef4 	bl	800172e <HAL_GPIO_WritePin>
    state = 0;
 8000946:	4b07      	ldr	r3, [pc, #28]	@ (8000964 <Third_program+0x64>)
 8000948:	2200      	movs	r2, #0
 800094a:	701a      	strb	r2, [r3, #0]
    program = 0;
 800094c:	4b06      	ldr	r3, [pc, #24]	@ (8000968 <Third_program+0x68>)
 800094e:	2200      	movs	r2, #0
 8000950:	701a      	strb	r2, [r3, #0]
}
 8000952:	46c0      	nop			@ (mov r8, r8)
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	50000400 	.word	0x50000400
 800095c:	00001388 	.word	0x00001388
 8000960:	50000800 	.word	0x50000800
 8000964:	20000154 	.word	0x20000154
 8000968:	20000155 	.word	0x20000155

0800096c <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b082      	sub	sp, #8
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
 counter--;
 8000974:	4b04      	ldr	r3, [pc, #16]	@ (8000988 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	1e5a      	subs	r2, r3, #1
 800097a:	4b03      	ldr	r3, [pc, #12]	@ (8000988 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 800097c:	601a      	str	r2, [r3, #0]
}
 800097e:	46c0      	nop			@ (mov r8, r8)
 8000980:	46bd      	mov	sp, r7
 8000982:	b002      	add	sp, #8
 8000984:	bd80      	pop	{r7, pc}
 8000986:	46c0      	nop			@ (mov r8, r8)
 8000988:	20000000 	.word	0x20000000

0800098c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000990:	f000 fbc4 	bl	800111c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000994:	f000 f87c 	bl	8000a90 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000998:	f000 f994 	bl	8000cc4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800099c:	f000 f944 	bl	8000c28 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80009a0:	f000 f8be 	bl	8000b20 <MX_TIM1_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80009a4:	23a0      	movs	r3, #160	@ 0xa0
 80009a6:	05db      	lsls	r3, r3, #23
 80009a8:	2200      	movs	r2, #0
 80009aa:	2120      	movs	r1, #32
 80009ac:	0018      	movs	r0, r3
 80009ae:	f000 febe 	bl	800172e <HAL_GPIO_WritePin>
	  // przycisk do programu 1
	  if ((HAL_GPIO_ReadPin(USER_BUTTON_1_GPIO_Port, USER_BUTTON_1_Pin) == GPIO_PIN_RESET)&&(state == 0)) {
 80009b2:	2380      	movs	r3, #128	@ 0x80
 80009b4:	005b      	lsls	r3, r3, #1
 80009b6:	4a32      	ldr	r2, [pc, #200]	@ (8000a80 <main+0xf4>)
 80009b8:	0019      	movs	r1, r3
 80009ba:	0010      	movs	r0, r2
 80009bc:	f000 fe9a 	bl	80016f4 <HAL_GPIO_ReadPin>
 80009c0:	1e03      	subs	r3, r0, #0
 80009c2:	d110      	bne.n	80009e6 <main+0x5a>
 80009c4:	4b2f      	ldr	r3, [pc, #188]	@ (8000a84 <main+0xf8>)
 80009c6:	781b      	ldrb	r3, [r3, #0]
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d10c      	bne.n	80009e6 <main+0x5a>
		  program = 1;
 80009cc:	4b2e      	ldr	r3, [pc, #184]	@ (8000a88 <main+0xfc>)
 80009ce:	2201      	movs	r2, #1
 80009d0:	701a      	strb	r2, [r3, #0]
		  state = 1;
 80009d2:	4b2c      	ldr	r3, [pc, #176]	@ (8000a84 <main+0xf8>)
 80009d4:	2201      	movs	r2, #1
 80009d6:	701a      	strb	r2, [r3, #0]
		  HAL_GPIO_WritePin(LD10_GPIO_Port, LD10_Pin, 0);
 80009d8:	2380      	movs	r3, #128	@ 0x80
 80009da:	019b      	lsls	r3, r3, #6
 80009dc:	482b      	ldr	r0, [pc, #172]	@ (8000a8c <main+0x100>)
 80009de:	2200      	movs	r2, #0
 80009e0:	0019      	movs	r1, r3
 80009e2:	f000 fea4 	bl	800172e <HAL_GPIO_WritePin>
	  }
	  // przycisk do programu 2
	  if ((HAL_GPIO_ReadPin(USER_BUTTON_2_GPIO_Port, USER_BUTTON_2_Pin) == GPIO_PIN_RESET)&&(state == 0)) {
 80009e6:	2380      	movs	r3, #128	@ 0x80
 80009e8:	021b      	lsls	r3, r3, #8
 80009ea:	4a28      	ldr	r2, [pc, #160]	@ (8000a8c <main+0x100>)
 80009ec:	0019      	movs	r1, r3
 80009ee:	0010      	movs	r0, r2
 80009f0:	f000 fe80 	bl	80016f4 <HAL_GPIO_ReadPin>
 80009f4:	1e03      	subs	r3, r0, #0
 80009f6:	d110      	bne.n	8000a1a <main+0x8e>
 80009f8:	4b22      	ldr	r3, [pc, #136]	@ (8000a84 <main+0xf8>)
 80009fa:	781b      	ldrb	r3, [r3, #0]
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d10c      	bne.n	8000a1a <main+0x8e>
		  program = 2;
 8000a00:	4b21      	ldr	r3, [pc, #132]	@ (8000a88 <main+0xfc>)
 8000a02:	2202      	movs	r2, #2
 8000a04:	701a      	strb	r2, [r3, #0]
		  state = 1;
 8000a06:	4b1f      	ldr	r3, [pc, #124]	@ (8000a84 <main+0xf8>)
 8000a08:	2201      	movs	r2, #1
 8000a0a:	701a      	strb	r2, [r3, #0]
		  HAL_GPIO_WritePin(LD10_GPIO_Port, LD10_Pin, 0);
 8000a0c:	2380      	movs	r3, #128	@ 0x80
 8000a0e:	019b      	lsls	r3, r3, #6
 8000a10:	481e      	ldr	r0, [pc, #120]	@ (8000a8c <main+0x100>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	0019      	movs	r1, r3
 8000a16:	f000 fe8a 	bl	800172e <HAL_GPIO_WritePin>
	  }
	  // przycisk do programu 3
	  if ((HAL_GPIO_ReadPin(USER_BUTTON_3_GPIO_Port, USER_BUTTON_3_Pin) == GPIO_PIN_RESET)&&(state == 0)) {
 8000a1a:	4b1c      	ldr	r3, [pc, #112]	@ (8000a8c <main+0x100>)
 8000a1c:	2104      	movs	r1, #4
 8000a1e:	0018      	movs	r0, r3
 8000a20:	f000 fe68 	bl	80016f4 <HAL_GPIO_ReadPin>
 8000a24:	1e03      	subs	r3, r0, #0
 8000a26:	d110      	bne.n	8000a4a <main+0xbe>
 8000a28:	4b16      	ldr	r3, [pc, #88]	@ (8000a84 <main+0xf8>)
 8000a2a:	781b      	ldrb	r3, [r3, #0]
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d10c      	bne.n	8000a4a <main+0xbe>
		  program = 3;
 8000a30:	4b15      	ldr	r3, [pc, #84]	@ (8000a88 <main+0xfc>)
 8000a32:	2203      	movs	r2, #3
 8000a34:	701a      	strb	r2, [r3, #0]
		  state = 1;
 8000a36:	4b13      	ldr	r3, [pc, #76]	@ (8000a84 <main+0xf8>)
 8000a38:	2201      	movs	r2, #1
 8000a3a:	701a      	strb	r2, [r3, #0]
		  HAL_GPIO_WritePin(LD10_GPIO_Port, LD10_Pin, 0);
 8000a3c:	2380      	movs	r3, #128	@ 0x80
 8000a3e:	019b      	lsls	r3, r3, #6
 8000a40:	4812      	ldr	r0, [pc, #72]	@ (8000a8c <main+0x100>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	0019      	movs	r1, r3
 8000a46:	f000 fe72 	bl	800172e <HAL_GPIO_WritePin>
	  }

	  	/*const char message[] = "Hello world!\r\n";
	    HAL_UART_Transmit(&huart2, (uint8_t*)message, strlen(message), HAL_MAX_DELAY);*/
	  switch (program){
 8000a4a:	4b0f      	ldr	r3, [pc, #60]	@ (8000a88 <main+0xfc>)
 8000a4c:	781b      	ldrb	r3, [r3, #0]
 8000a4e:	2b03      	cmp	r3, #3
 8000a50:	d00b      	beq.n	8000a6a <main+0xde>
 8000a52:	dc0d      	bgt.n	8000a70 <main+0xe4>
 8000a54:	2b01      	cmp	r3, #1
 8000a56:	d002      	beq.n	8000a5e <main+0xd2>
 8000a58:	2b02      	cmp	r3, #2
 8000a5a:	d003      	beq.n	8000a64 <main+0xd8>
 8000a5c:	e008      	b.n	8000a70 <main+0xe4>
	  case 1: First_program(); 		//egzekucja pierwszego programu
 8000a5e:	f7ff fe51 	bl	8000704 <First_program>
	  break;
 8000a62:	e00c      	b.n	8000a7e <main+0xf2>
	  case 2: Second_program();		//egzekucja drugiego programu
 8000a64:	f7ff fe86 	bl	8000774 <Second_program>
	  break;
 8000a68:	e009      	b.n	8000a7e <main+0xf2>
	  case 3: Third_program();		//egzekucja trzeciego programu
 8000a6a:	f7ff ff49 	bl	8000900 <Third_program>
	  break;
 8000a6e:	e006      	b.n	8000a7e <main+0xf2>
	  default: HAL_GPIO_WritePin(LD10_GPIO_Port, LD10_Pin, 1);
 8000a70:	2380      	movs	r3, #128	@ 0x80
 8000a72:	019b      	lsls	r3, r3, #6
 8000a74:	4805      	ldr	r0, [pc, #20]	@ (8000a8c <main+0x100>)
 8000a76:	2201      	movs	r2, #1
 8000a78:	0019      	movs	r1, r3
 8000a7a:	f000 fe58 	bl	800172e <HAL_GPIO_WritePin>
  {    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000a7e:	e791      	b.n	80009a4 <main+0x18>
 8000a80:	50000c00 	.word	0x50000c00
 8000a84:	20000154 	.word	0x20000154
 8000a88:	20000155 	.word	0x20000155
 8000a8c:	50000400 	.word	0x50000400

08000a90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a90:	b590      	push	{r4, r7, lr}
 8000a92:	b093      	sub	sp, #76	@ 0x4c
 8000a94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a96:	2410      	movs	r4, #16
 8000a98:	193b      	adds	r3, r7, r4
 8000a9a:	0018      	movs	r0, r3
 8000a9c:	2338      	movs	r3, #56	@ 0x38
 8000a9e:	001a      	movs	r2, r3
 8000aa0:	2100      	movs	r1, #0
 8000aa2:	f003 f859 	bl	8003b58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000aa6:	003b      	movs	r3, r7
 8000aa8:	0018      	movs	r0, r3
 8000aaa:	2310      	movs	r3, #16
 8000aac:	001a      	movs	r2, r3
 8000aae:	2100      	movs	r1, #0
 8000ab0:	f003 f852 	bl	8003b58 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ab4:	2380      	movs	r3, #128	@ 0x80
 8000ab6:	009b      	lsls	r3, r3, #2
 8000ab8:	0018      	movs	r0, r3
 8000aba:	f000 fe93 	bl	80017e4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000abe:	193b      	adds	r3, r7, r4
 8000ac0:	2202      	movs	r2, #2
 8000ac2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ac4:	193b      	adds	r3, r7, r4
 8000ac6:	2280      	movs	r2, #128	@ 0x80
 8000ac8:	0052      	lsls	r2, r2, #1
 8000aca:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000acc:	193b      	adds	r3, r7, r4
 8000ace:	2200      	movs	r2, #0
 8000ad0:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ad2:	193b      	adds	r3, r7, r4
 8000ad4:	2240      	movs	r2, #64	@ 0x40
 8000ad6:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000ad8:	193b      	adds	r3, r7, r4
 8000ada:	2200      	movs	r2, #0
 8000adc:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ade:	193b      	adds	r3, r7, r4
 8000ae0:	0018      	movs	r0, r3
 8000ae2:	f000 fecb 	bl	800187c <HAL_RCC_OscConfig>
 8000ae6:	1e03      	subs	r3, r0, #0
 8000ae8:	d001      	beq.n	8000aee <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000aea:	f000 f9ed 	bl	8000ec8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000aee:	003b      	movs	r3, r7
 8000af0:	2207      	movs	r2, #7
 8000af2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000af4:	003b      	movs	r3, r7
 8000af6:	2200      	movs	r2, #0
 8000af8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000afa:	003b      	movs	r3, r7
 8000afc:	2200      	movs	r2, #0
 8000afe:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b00:	003b      	movs	r3, r7
 8000b02:	2200      	movs	r2, #0
 8000b04:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b06:	003b      	movs	r3, r7
 8000b08:	2100      	movs	r1, #0
 8000b0a:	0018      	movs	r0, r3
 8000b0c:	f001 f9d0 	bl	8001eb0 <HAL_RCC_ClockConfig>
 8000b10:	1e03      	subs	r3, r0, #0
 8000b12:	d001      	beq.n	8000b18 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000b14:	f000 f9d8 	bl	8000ec8 <Error_Handler>
  }
}
 8000b18:	46c0      	nop			@ (mov r8, r8)
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	b013      	add	sp, #76	@ 0x4c
 8000b1e:	bd90      	pop	{r4, r7, pc}

08000b20 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b088      	sub	sp, #32
 8000b24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b26:	2310      	movs	r3, #16
 8000b28:	18fb      	adds	r3, r7, r3
 8000b2a:	0018      	movs	r0, r3
 8000b2c:	2310      	movs	r3, #16
 8000b2e:	001a      	movs	r2, r3
 8000b30:	2100      	movs	r1, #0
 8000b32:	f003 f811 	bl	8003b58 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b36:	1d3b      	adds	r3, r7, #4
 8000b38:	0018      	movs	r0, r3
 8000b3a:	230c      	movs	r3, #12
 8000b3c:	001a      	movs	r2, r3
 8000b3e:	2100      	movs	r1, #0
 8000b40:	f003 f80a 	bl	8003b58 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000b44:	4b32      	ldr	r3, [pc, #200]	@ (8000c10 <MX_TIM1_Init+0xf0>)
 8000b46:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000b48:	4b31      	ldr	r3, [pc, #196]	@ (8000c10 <MX_TIM1_Init+0xf0>)
 8000b4a:	2180      	movs	r1, #128	@ 0x80
 8000b4c:	0109      	lsls	r1, r1, #4
 8000b4e:	430a      	orrs	r2, r1
 8000b50:	641a      	str	r2, [r3, #64]	@ 0x40
 8000b52:	4b2f      	ldr	r3, [pc, #188]	@ (8000c10 <MX_TIM1_Init+0xf0>)
 8000b54:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000b56:	2380      	movs	r3, #128	@ 0x80
 8000b58:	011b      	lsls	r3, r3, #4
 8000b5a:	4013      	ands	r3, r2
 8000b5c:	603b      	str	r3, [r7, #0]
 8000b5e:	683b      	ldr	r3, [r7, #0]
  htim1.Instance = TIM1;
 8000b60:	4b2c      	ldr	r3, [pc, #176]	@ (8000c14 <MX_TIM1_Init+0xf4>)
 8000b62:	4a2d      	ldr	r2, [pc, #180]	@ (8000c18 <MX_TIM1_Init+0xf8>)
 8000b64:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 999;
 8000b66:	4b2b      	ldr	r3, [pc, #172]	@ (8000c14 <MX_TIM1_Init+0xf4>)
 8000b68:	4a2c      	ldr	r2, [pc, #176]	@ (8000c1c <MX_TIM1_Init+0xfc>)
 8000b6a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b6c:	4b29      	ldr	r3, [pc, #164]	@ (8000c14 <MX_TIM1_Init+0xf4>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8000b72:	4b28      	ldr	r3, [pc, #160]	@ (8000c14 <MX_TIM1_Init+0xf4>)
 8000b74:	4a29      	ldr	r2, [pc, #164]	@ (8000c1c <MX_TIM1_Init+0xfc>)
 8000b76:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b78:	4b26      	ldr	r3, [pc, #152]	@ (8000c14 <MX_TIM1_Init+0xf4>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b7e:	4b25      	ldr	r3, [pc, #148]	@ (8000c14 <MX_TIM1_Init+0xf4>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b84:	4b23      	ldr	r3, [pc, #140]	@ (8000c14 <MX_TIM1_Init+0xf4>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	619a      	str	r2, [r3, #24]
  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000b8a:	4b22      	ldr	r3, [pc, #136]	@ (8000c14 <MX_TIM1_Init+0xf4>)
 8000b8c:	4a22      	ldr	r2, [pc, #136]	@ (8000c18 <MX_TIM1_Init+0xf8>)
 8000b8e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 3996;
 8000b90:	4b20      	ldr	r3, [pc, #128]	@ (8000c14 <MX_TIM1_Init+0xf4>)
 8000b92:	4a23      	ldr	r2, [pc, #140]	@ (8000c20 <MX_TIM1_Init+0x100>)
 8000b94:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b96:	4b1f      	ldr	r3, [pc, #124]	@ (8000c14 <MX_TIM1_Init+0xf4>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3999;
 8000b9c:	4b1d      	ldr	r3, [pc, #116]	@ (8000c14 <MX_TIM1_Init+0xf4>)
 8000b9e:	4a21      	ldr	r2, [pc, #132]	@ (8000c24 <MX_TIM1_Init+0x104>)
 8000ba0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ba2:	4b1c      	ldr	r3, [pc, #112]	@ (8000c14 <MX_TIM1_Init+0xf4>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ba8:	4b1a      	ldr	r3, [pc, #104]	@ (8000c14 <MX_TIM1_Init+0xf4>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bae:	4b19      	ldr	r3, [pc, #100]	@ (8000c14 <MX_TIM1_Init+0xf4>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000bb4:	4b17      	ldr	r3, [pc, #92]	@ (8000c14 <MX_TIM1_Init+0xf4>)
 8000bb6:	0018      	movs	r0, r3
 8000bb8:	f001 fcdc 	bl	8002574 <HAL_TIM_Base_Init>
 8000bbc:	1e03      	subs	r3, r0, #0
 8000bbe:	d001      	beq.n	8000bc4 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000bc0:	f000 f982 	bl	8000ec8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bc4:	2110      	movs	r1, #16
 8000bc6:	187b      	adds	r3, r7, r1
 8000bc8:	2280      	movs	r2, #128	@ 0x80
 8000bca:	0152      	lsls	r2, r2, #5
 8000bcc:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000bce:	187a      	adds	r2, r7, r1
 8000bd0:	4b10      	ldr	r3, [pc, #64]	@ (8000c14 <MX_TIM1_Init+0xf4>)
 8000bd2:	0011      	movs	r1, r2
 8000bd4:	0018      	movs	r0, r3
 8000bd6:	f001 feb7 	bl	8002948 <HAL_TIM_ConfigClockSource>
 8000bda:	1e03      	subs	r3, r0, #0
 8000bdc:	d001      	beq.n	8000be2 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8000bde:	f000 f973 	bl	8000ec8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000be2:	1d3b      	adds	r3, r7, #4
 8000be4:	2200      	movs	r2, #0
 8000be6:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000be8:	1d3b      	adds	r3, r7, #4
 8000bea:	2200      	movs	r2, #0
 8000bec:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bee:	1d3b      	adds	r3, r7, #4
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000bf4:	1d3a      	adds	r2, r7, #4
 8000bf6:	4b07      	ldr	r3, [pc, #28]	@ (8000c14 <MX_TIM1_Init+0xf4>)
 8000bf8:	0011      	movs	r1, r2
 8000bfa:	0018      	movs	r0, r3
 8000bfc:	f002 f8c4 	bl	8002d88 <HAL_TIMEx_MasterConfigSynchronization>
 8000c00:	1e03      	subs	r3, r0, #0
 8000c02:	d001      	beq.n	8000c08 <MX_TIM1_Init+0xe8>
  {
    Error_Handler();
 8000c04:	f000 f960 	bl	8000ec8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000c08:	46c0      	nop			@ (mov r8, r8)
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	b008      	add	sp, #32
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	40021000 	.word	0x40021000
 8000c14:	20000074 	.word	0x20000074
 8000c18:	40012c00 	.word	0x40012c00
 8000c1c:	000003e7 	.word	0x000003e7
 8000c20:	00000f9c 	.word	0x00000f9c
 8000c24:	00000f9f 	.word	0x00000f9f

08000c28 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c2c:	4b23      	ldr	r3, [pc, #140]	@ (8000cbc <MX_USART2_UART_Init+0x94>)
 8000c2e:	4a24      	ldr	r2, [pc, #144]	@ (8000cc0 <MX_USART2_UART_Init+0x98>)
 8000c30:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c32:	4b22      	ldr	r3, [pc, #136]	@ (8000cbc <MX_USART2_UART_Init+0x94>)
 8000c34:	22e1      	movs	r2, #225	@ 0xe1
 8000c36:	0252      	lsls	r2, r2, #9
 8000c38:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c3a:	4b20      	ldr	r3, [pc, #128]	@ (8000cbc <MX_USART2_UART_Init+0x94>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c40:	4b1e      	ldr	r3, [pc, #120]	@ (8000cbc <MX_USART2_UART_Init+0x94>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c46:	4b1d      	ldr	r3, [pc, #116]	@ (8000cbc <MX_USART2_UART_Init+0x94>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c4c:	4b1b      	ldr	r3, [pc, #108]	@ (8000cbc <MX_USART2_UART_Init+0x94>)
 8000c4e:	220c      	movs	r2, #12
 8000c50:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c52:	4b1a      	ldr	r3, [pc, #104]	@ (8000cbc <MX_USART2_UART_Init+0x94>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c58:	4b18      	ldr	r3, [pc, #96]	@ (8000cbc <MX_USART2_UART_Init+0x94>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c5e:	4b17      	ldr	r3, [pc, #92]	@ (8000cbc <MX_USART2_UART_Init+0x94>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c64:	4b15      	ldr	r3, [pc, #84]	@ (8000cbc <MX_USART2_UART_Init+0x94>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c6a:	4b14      	ldr	r3, [pc, #80]	@ (8000cbc <MX_USART2_UART_Init+0x94>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c70:	4b12      	ldr	r3, [pc, #72]	@ (8000cbc <MX_USART2_UART_Init+0x94>)
 8000c72:	0018      	movs	r0, r3
 8000c74:	f002 f90e 	bl	8002e94 <HAL_UART_Init>
 8000c78:	1e03      	subs	r3, r0, #0
 8000c7a:	d001      	beq.n	8000c80 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000c7c:	f000 f924 	bl	8000ec8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c80:	4b0e      	ldr	r3, [pc, #56]	@ (8000cbc <MX_USART2_UART_Init+0x94>)
 8000c82:	2100      	movs	r1, #0
 8000c84:	0018      	movs	r0, r3
 8000c86:	f002 fe87 	bl	8003998 <HAL_UARTEx_SetTxFifoThreshold>
 8000c8a:	1e03      	subs	r3, r0, #0
 8000c8c:	d001      	beq.n	8000c92 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000c8e:	f000 f91b 	bl	8000ec8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c92:	4b0a      	ldr	r3, [pc, #40]	@ (8000cbc <MX_USART2_UART_Init+0x94>)
 8000c94:	2100      	movs	r1, #0
 8000c96:	0018      	movs	r0, r3
 8000c98:	f002 febe 	bl	8003a18 <HAL_UARTEx_SetRxFifoThreshold>
 8000c9c:	1e03      	subs	r3, r0, #0
 8000c9e:	d001      	beq.n	8000ca4 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000ca0:	f000 f912 	bl	8000ec8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000ca4:	4b05      	ldr	r3, [pc, #20]	@ (8000cbc <MX_USART2_UART_Init+0x94>)
 8000ca6:	0018      	movs	r0, r3
 8000ca8:	f002 fe3c 	bl	8003924 <HAL_UARTEx_DisableFifoMode>
 8000cac:	1e03      	subs	r3, r0, #0
 8000cae:	d001      	beq.n	8000cb4 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000cb0:	f000 f90a 	bl	8000ec8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000cb4:	46c0      	nop			@ (mov r8, r8)
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	46c0      	nop			@ (mov r8, r8)
 8000cbc:	200000c0 	.word	0x200000c0
 8000cc0:	40004400 	.word	0x40004400

08000cc4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cc4:	b590      	push	{r4, r7, lr}
 8000cc6:	b08b      	sub	sp, #44	@ 0x2c
 8000cc8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cca:	2414      	movs	r4, #20
 8000ccc:	193b      	adds	r3, r7, r4
 8000cce:	0018      	movs	r0, r3
 8000cd0:	2314      	movs	r3, #20
 8000cd2:	001a      	movs	r2, r3
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	f002 ff3f 	bl	8003b58 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cda:	4b75      	ldr	r3, [pc, #468]	@ (8000eb0 <MX_GPIO_Init+0x1ec>)
 8000cdc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000cde:	4b74      	ldr	r3, [pc, #464]	@ (8000eb0 <MX_GPIO_Init+0x1ec>)
 8000ce0:	2102      	movs	r1, #2
 8000ce2:	430a      	orrs	r2, r1
 8000ce4:	635a      	str	r2, [r3, #52]	@ 0x34
 8000ce6:	4b72      	ldr	r3, [pc, #456]	@ (8000eb0 <MX_GPIO_Init+0x1ec>)
 8000ce8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000cea:	2202      	movs	r2, #2
 8000cec:	4013      	ands	r3, r2
 8000cee:	613b      	str	r3, [r7, #16]
 8000cf0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cf2:	4b6f      	ldr	r3, [pc, #444]	@ (8000eb0 <MX_GPIO_Init+0x1ec>)
 8000cf4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000cf6:	4b6e      	ldr	r3, [pc, #440]	@ (8000eb0 <MX_GPIO_Init+0x1ec>)
 8000cf8:	2108      	movs	r1, #8
 8000cfa:	430a      	orrs	r2, r1
 8000cfc:	635a      	str	r2, [r3, #52]	@ 0x34
 8000cfe:	4b6c      	ldr	r3, [pc, #432]	@ (8000eb0 <MX_GPIO_Init+0x1ec>)
 8000d00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d02:	2208      	movs	r2, #8
 8000d04:	4013      	ands	r3, r2
 8000d06:	60fb      	str	r3, [r7, #12]
 8000d08:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d0a:	4b69      	ldr	r3, [pc, #420]	@ (8000eb0 <MX_GPIO_Init+0x1ec>)
 8000d0c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000d0e:	4b68      	ldr	r3, [pc, #416]	@ (8000eb0 <MX_GPIO_Init+0x1ec>)
 8000d10:	2104      	movs	r1, #4
 8000d12:	430a      	orrs	r2, r1
 8000d14:	635a      	str	r2, [r3, #52]	@ 0x34
 8000d16:	4b66      	ldr	r3, [pc, #408]	@ (8000eb0 <MX_GPIO_Init+0x1ec>)
 8000d18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d1a:	2204      	movs	r2, #4
 8000d1c:	4013      	ands	r3, r2
 8000d1e:	60bb      	str	r3, [r7, #8]
 8000d20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d22:	4b63      	ldr	r3, [pc, #396]	@ (8000eb0 <MX_GPIO_Init+0x1ec>)
 8000d24:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000d26:	4b62      	ldr	r3, [pc, #392]	@ (8000eb0 <MX_GPIO_Init+0x1ec>)
 8000d28:	2101      	movs	r1, #1
 8000d2a:	430a      	orrs	r2, r1
 8000d2c:	635a      	str	r2, [r3, #52]	@ 0x34
 8000d2e:	4b60      	ldr	r3, [pc, #384]	@ (8000eb0 <MX_GPIO_Init+0x1ec>)
 8000d30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d32:	2201      	movs	r2, #1
 8000d34:	4013      	ands	r3, r2
 8000d36:	607b      	str	r3, [r7, #4]
 8000d38:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|D2_Pin|SevSegA_Pin|SevSegF_Pin
 8000d3a:	495e      	ldr	r1, [pc, #376]	@ (8000eb4 <MX_GPIO_Init+0x1f0>)
 8000d3c:	4b5e      	ldr	r3, [pc, #376]	@ (8000eb8 <MX_GPIO_Init+0x1f4>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	0018      	movs	r0, r3
 8000d42:	f000 fcf4 	bl	800172e <HAL_GPIO_WritePin>
                          |D1_Pin|LD2_Pin|LD10_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, D3_Pin|SevSegD_Pin|SevSegG_Pin|SevSegE_Pin
 8000d46:	23fc      	movs	r3, #252	@ 0xfc
 8000d48:	00d9      	lsls	r1, r3, #3
 8000d4a:	23a0      	movs	r3, #160	@ 0xa0
 8000d4c:	05db      	lsls	r3, r3, #23
 8000d4e:	2200      	movs	r2, #0
 8000d50:	0018      	movs	r0, r3
 8000d52:	f000 fcec 	bl	800172e <HAL_GPIO_WritePin>
                          |D4_Pin|GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8000d56:	2380      	movs	r3, #128	@ 0x80
 8000d58:	009b      	lsls	r3, r3, #2
 8000d5a:	4858      	ldr	r0, [pc, #352]	@ (8000ebc <MX_GPIO_Init+0x1f8>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	0019      	movs	r1, r3
 8000d60:	f000 fce5 	bl	800172e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SevSegC_Pin|SevSegB_Pin|BUZZER_Pin, GPIO_PIN_RESET);
 8000d64:	4b56      	ldr	r3, [pc, #344]	@ (8000ec0 <MX_GPIO_Init+0x1fc>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	21b0      	movs	r1, #176	@ 0xb0
 8000d6a:	0018      	movs	r0, r3
 8000d6c:	f000 fcdf 	bl	800172e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LD3_Pin D2_Pin SevSegA_Pin SevSegF_Pin
                           D1_Pin LD2_Pin LD10_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|D2_Pin|SevSegA_Pin|SevSegF_Pin
 8000d70:	193b      	adds	r3, r7, r4
 8000d72:	4a50      	ldr	r2, [pc, #320]	@ (8000eb4 <MX_GPIO_Init+0x1f0>)
 8000d74:	601a      	str	r2, [r3, #0]
                          |D1_Pin|LD2_Pin|LD10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d76:	193b      	adds	r3, r7, r4
 8000d78:	2201      	movs	r2, #1
 8000d7a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7c:	193b      	adds	r3, r7, r4
 8000d7e:	2200      	movs	r2, #0
 8000d80:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d82:	193b      	adds	r3, r7, r4
 8000d84:	2200      	movs	r2, #0
 8000d86:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d88:	193b      	adds	r3, r7, r4
 8000d8a:	4a4b      	ldr	r2, [pc, #300]	@ (8000eb8 <MX_GPIO_Init+0x1f4>)
 8000d8c:	0019      	movs	r1, r3
 8000d8e:	0010      	movs	r0, r2
 8000d90:	f000 fb4c 	bl	800142c <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8000d94:	0021      	movs	r1, r4
 8000d96:	187b      	adds	r3, r7, r1
 8000d98:	2280      	movs	r2, #128	@ 0x80
 8000d9a:	0192      	lsls	r2, r2, #6
 8000d9c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000d9e:	187b      	adds	r3, r7, r1
 8000da0:	2284      	movs	r2, #132	@ 0x84
 8000da2:	0392      	lsls	r2, r2, #14
 8000da4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da6:	187b      	adds	r3, r7, r1
 8000da8:	2200      	movs	r2, #0
 8000daa:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000dac:	000c      	movs	r4, r1
 8000dae:	187b      	adds	r3, r7, r1
 8000db0:	4a43      	ldr	r2, [pc, #268]	@ (8000ec0 <MX_GPIO_Init+0x1fc>)
 8000db2:	0019      	movs	r1, r3
 8000db4:	0010      	movs	r0, r2
 8000db6:	f000 fb39 	bl	800142c <HAL_GPIO_Init>

  /*Configure GPIO pins : D3_Pin SevSegD_Pin SevSegG_Pin SevSegE_Pin
                           D4_Pin PA5 */
  GPIO_InitStruct.Pin = D3_Pin|SevSegD_Pin|SevSegG_Pin|SevSegE_Pin
 8000dba:	0021      	movs	r1, r4
 8000dbc:	187b      	adds	r3, r7, r1
 8000dbe:	22fc      	movs	r2, #252	@ 0xfc
 8000dc0:	00d2      	lsls	r2, r2, #3
 8000dc2:	601a      	str	r2, [r3, #0]
                          |D4_Pin|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dc4:	000c      	movs	r4, r1
 8000dc6:	193b      	adds	r3, r7, r4
 8000dc8:	2201      	movs	r2, #1
 8000dca:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dcc:	193b      	adds	r3, r7, r4
 8000dce:	2200      	movs	r2, #0
 8000dd0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd2:	193b      	adds	r3, r7, r4
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dd8:	193a      	adds	r2, r7, r4
 8000dda:	23a0      	movs	r3, #160	@ 0xa0
 8000ddc:	05db      	lsls	r3, r3, #23
 8000dde:	0011      	movs	r1, r2
 8000de0:	0018      	movs	r0, r3
 8000de2:	f000 fb23 	bl	800142c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD1_Pin */
  GPIO_InitStruct.Pin = LD1_Pin;
 8000de6:	0021      	movs	r1, r4
 8000de8:	187b      	adds	r3, r7, r1
 8000dea:	2280      	movs	r2, #128	@ 0x80
 8000dec:	0092      	lsls	r2, r2, #2
 8000dee:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000df0:	000c      	movs	r4, r1
 8000df2:	193b      	adds	r3, r7, r4
 8000df4:	2201      	movs	r2, #1
 8000df6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df8:	193b      	adds	r3, r7, r4
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dfe:	193b      	adds	r3, r7, r4
 8000e00:	2200      	movs	r2, #0
 8000e02:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 8000e04:	193b      	adds	r3, r7, r4
 8000e06:	4a2d      	ldr	r2, [pc, #180]	@ (8000ebc <MX_GPIO_Init+0x1f8>)
 8000e08:	0019      	movs	r1, r3
 8000e0a:	0010      	movs	r0, r2
 8000e0c:	f000 fb0e 	bl	800142c <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_BUTTON_4_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_4_Pin;
 8000e10:	193b      	adds	r3, r7, r4
 8000e12:	2201      	movs	r2, #1
 8000e14:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e16:	193b      	adds	r3, r7, r4
 8000e18:	2200      	movs	r2, #0
 8000e1a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1c:	193b      	adds	r3, r7, r4
 8000e1e:	2200      	movs	r2, #0
 8000e20:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(USER_BUTTON_4_GPIO_Port, &GPIO_InitStruct);
 8000e22:	193b      	adds	r3, r7, r4
 8000e24:	4a26      	ldr	r2, [pc, #152]	@ (8000ec0 <MX_GPIO_Init+0x1fc>)
 8000e26:	0019      	movs	r1, r3
 8000e28:	0010      	movs	r0, r2
 8000e2a:	f000 faff 	bl	800142c <HAL_GPIO_Init>

  /*Configure GPIO pins : SevSegC_Pin SevSegB_Pin BUZZER_Pin */
  GPIO_InitStruct.Pin = SevSegC_Pin|SevSegB_Pin|BUZZER_Pin;
 8000e2e:	193b      	adds	r3, r7, r4
 8000e30:	22b0      	movs	r2, #176	@ 0xb0
 8000e32:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e34:	193b      	adds	r3, r7, r4
 8000e36:	2201      	movs	r2, #1
 8000e38:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3a:	193b      	adds	r3, r7, r4
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e40:	193b      	adds	r3, r7, r4
 8000e42:	2200      	movs	r2, #0
 8000e44:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e46:	193b      	adds	r3, r7, r4
 8000e48:	4a1d      	ldr	r2, [pc, #116]	@ (8000ec0 <MX_GPIO_Init+0x1fc>)
 8000e4a:	0019      	movs	r1, r3
 8000e4c:	0010      	movs	r0, r2
 8000e4e:	f000 faed 	bl	800142c <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_BUTTON_1_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_1_Pin;
 8000e52:	0021      	movs	r1, r4
 8000e54:	187b      	adds	r3, r7, r1
 8000e56:	2280      	movs	r2, #128	@ 0x80
 8000e58:	0052      	lsls	r2, r2, #1
 8000e5a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e5c:	000c      	movs	r4, r1
 8000e5e:	193b      	adds	r3, r7, r4
 8000e60:	2200      	movs	r2, #0
 8000e62:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e64:	193b      	adds	r3, r7, r4
 8000e66:	2201      	movs	r2, #1
 8000e68:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(USER_BUTTON_1_GPIO_Port, &GPIO_InitStruct);
 8000e6a:	193b      	adds	r3, r7, r4
 8000e6c:	4a13      	ldr	r2, [pc, #76]	@ (8000ebc <MX_GPIO_Init+0x1f8>)
 8000e6e:	0019      	movs	r1, r3
 8000e70:	0010      	movs	r0, r2
 8000e72:	f000 fadb 	bl	800142c <HAL_GPIO_Init>

  /*Configure GPIO pins : USER_BUTTON_2_Pin USER_BUTTON_3_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_2_Pin|USER_BUTTON_3_Pin;
 8000e76:	0021      	movs	r1, r4
 8000e78:	187b      	adds	r3, r7, r1
 8000e7a:	4a12      	ldr	r2, [pc, #72]	@ (8000ec4 <MX_GPIO_Init+0x200>)
 8000e7c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e7e:	187b      	adds	r3, r7, r1
 8000e80:	2200      	movs	r2, #0
 8000e82:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e84:	187b      	adds	r3, r7, r1
 8000e86:	2201      	movs	r2, #1
 8000e88:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e8a:	187b      	adds	r3, r7, r1
 8000e8c:	4a0a      	ldr	r2, [pc, #40]	@ (8000eb8 <MX_GPIO_Init+0x1f4>)
 8000e8e:	0019      	movs	r1, r3
 8000e90:	0010      	movs	r0, r2
 8000e92:	f000 facb 	bl	800142c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8000e96:	2200      	movs	r2, #0
 8000e98:	2100      	movs	r1, #0
 8000e9a:	2007      	movs	r0, #7
 8000e9c:	f000 fa94 	bl	80013c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000ea0:	2007      	movs	r0, #7
 8000ea2:	f000 faa6 	bl	80013f2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ea6:	46c0      	nop			@ (mov r8, r8)
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	b00b      	add	sp, #44	@ 0x2c
 8000eac:	bd90      	pop	{r4, r7, pc}
 8000eae:	46c0      	nop			@ (mov r8, r8)
 8000eb0:	40021000 	.word	0x40021000
 8000eb4:	00006478 	.word	0x00006478
 8000eb8:	50000400 	.word	0x50000400
 8000ebc:	50000c00 	.word	0x50000c00
 8000ec0:	50000800 	.word	0x50000800
 8000ec4:	00008004 	.word	0x00008004

08000ec8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ecc:	b672      	cpsid	i
}
 8000ece:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ed0:	46c0      	nop			@ (mov r8, r8)
 8000ed2:	e7fd      	b.n	8000ed0 <Error_Handler+0x8>

08000ed4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eda:	4b0f      	ldr	r3, [pc, #60]	@ (8000f18 <HAL_MspInit+0x44>)
 8000edc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000ede:	4b0e      	ldr	r3, [pc, #56]	@ (8000f18 <HAL_MspInit+0x44>)
 8000ee0:	2101      	movs	r1, #1
 8000ee2:	430a      	orrs	r2, r1
 8000ee4:	641a      	str	r2, [r3, #64]	@ 0x40
 8000ee6:	4b0c      	ldr	r3, [pc, #48]	@ (8000f18 <HAL_MspInit+0x44>)
 8000ee8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eea:	2201      	movs	r2, #1
 8000eec:	4013      	ands	r3, r2
 8000eee:	607b      	str	r3, [r7, #4]
 8000ef0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ef2:	4b09      	ldr	r3, [pc, #36]	@ (8000f18 <HAL_MspInit+0x44>)
 8000ef4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000ef6:	4b08      	ldr	r3, [pc, #32]	@ (8000f18 <HAL_MspInit+0x44>)
 8000ef8:	2180      	movs	r1, #128	@ 0x80
 8000efa:	0549      	lsls	r1, r1, #21
 8000efc:	430a      	orrs	r2, r1
 8000efe:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000f00:	4b05      	ldr	r3, [pc, #20]	@ (8000f18 <HAL_MspInit+0x44>)
 8000f02:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000f04:	2380      	movs	r3, #128	@ 0x80
 8000f06:	055b      	lsls	r3, r3, #21
 8000f08:	4013      	ands	r3, r2
 8000f0a:	603b      	str	r3, [r7, #0]
 8000f0c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f0e:	46c0      	nop			@ (mov r8, r8)
 8000f10:	46bd      	mov	sp, r7
 8000f12:	b002      	add	sp, #8
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	46c0      	nop			@ (mov r8, r8)
 8000f18:	40021000 	.word	0x40021000

08000f1c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f1c:	b590      	push	{r4, r7, lr}
 8000f1e:	b091      	sub	sp, #68	@ 0x44
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f24:	240c      	movs	r4, #12
 8000f26:	193b      	adds	r3, r7, r4
 8000f28:	0018      	movs	r0, r3
 8000f2a:	2334      	movs	r3, #52	@ 0x34
 8000f2c:	001a      	movs	r2, r3
 8000f2e:	2100      	movs	r1, #0
 8000f30:	f002 fe12 	bl	8003b58 <memset>
  if(htim_base->Instance==TIM1)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4a15      	ldr	r2, [pc, #84]	@ (8000f90 <HAL_TIM_Base_MspInit+0x74>)
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d124      	bne.n	8000f88 <HAL_TIM_Base_MspInit+0x6c>

  /* USER CODE END TIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8000f3e:	193b      	adds	r3, r7, r4
 8000f40:	2280      	movs	r2, #128	@ 0x80
 8000f42:	0392      	lsls	r2, r2, #14
 8000f44:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 8000f46:	193b      	adds	r3, r7, r4
 8000f48:	2200      	movs	r2, #0
 8000f4a:	629a      	str	r2, [r3, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f4c:	193b      	adds	r3, r7, r4
 8000f4e:	0018      	movs	r0, r3
 8000f50:	f001 f958 	bl	8002204 <HAL_RCCEx_PeriphCLKConfig>
 8000f54:	1e03      	subs	r3, r0, #0
 8000f56:	d001      	beq.n	8000f5c <HAL_TIM_Base_MspInit+0x40>
    {
      Error_Handler();
 8000f58:	f7ff ffb6 	bl	8000ec8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000f5c:	4b0d      	ldr	r3, [pc, #52]	@ (8000f94 <HAL_TIM_Base_MspInit+0x78>)
 8000f5e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000f60:	4b0c      	ldr	r3, [pc, #48]	@ (8000f94 <HAL_TIM_Base_MspInit+0x78>)
 8000f62:	2180      	movs	r1, #128	@ 0x80
 8000f64:	0109      	lsls	r1, r1, #4
 8000f66:	430a      	orrs	r2, r1
 8000f68:	641a      	str	r2, [r3, #64]	@ 0x40
 8000f6a:	4b0a      	ldr	r3, [pc, #40]	@ (8000f94 <HAL_TIM_Base_MspInit+0x78>)
 8000f6c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000f6e:	2380      	movs	r3, #128	@ 0x80
 8000f70:	011b      	lsls	r3, r3, #4
 8000f72:	4013      	ands	r3, r2
 8000f74:	60bb      	str	r3, [r7, #8]
 8000f76:	68bb      	ldr	r3, [r7, #8]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 8000f78:	2200      	movs	r2, #0
 8000f7a:	2100      	movs	r1, #0
 8000f7c:	200d      	movs	r0, #13
 8000f7e:	f000 fa23 	bl	80013c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8000f82:	200d      	movs	r0, #13
 8000f84:	f000 fa35 	bl	80013f2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8000f88:	46c0      	nop			@ (mov r8, r8)
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	b011      	add	sp, #68	@ 0x44
 8000f8e:	bd90      	pop	{r4, r7, pc}
 8000f90:	40012c00 	.word	0x40012c00
 8000f94:	40021000 	.word	0x40021000

08000f98 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f98:	b590      	push	{r4, r7, lr}
 8000f9a:	b097      	sub	sp, #92	@ 0x5c
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa0:	2344      	movs	r3, #68	@ 0x44
 8000fa2:	18fb      	adds	r3, r7, r3
 8000fa4:	0018      	movs	r0, r3
 8000fa6:	2314      	movs	r3, #20
 8000fa8:	001a      	movs	r2, r3
 8000faa:	2100      	movs	r1, #0
 8000fac:	f002 fdd4 	bl	8003b58 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fb0:	2410      	movs	r4, #16
 8000fb2:	193b      	adds	r3, r7, r4
 8000fb4:	0018      	movs	r0, r3
 8000fb6:	2334      	movs	r3, #52	@ 0x34
 8000fb8:	001a      	movs	r2, r3
 8000fba:	2100      	movs	r1, #0
 8000fbc:	f002 fdcc 	bl	8003b58 <memset>
  if(huart->Instance==USART2)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a22      	ldr	r2, [pc, #136]	@ (8001050 <HAL_UART_MspInit+0xb8>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d13d      	bne.n	8001046 <HAL_UART_MspInit+0xae>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000fca:	193b      	adds	r3, r7, r4
 8000fcc:	2202      	movs	r2, #2
 8000fce:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000fd0:	193b      	adds	r3, r7, r4
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fd6:	193b      	adds	r3, r7, r4
 8000fd8:	0018      	movs	r0, r3
 8000fda:	f001 f913 	bl	8002204 <HAL_RCCEx_PeriphCLKConfig>
 8000fde:	1e03      	subs	r3, r0, #0
 8000fe0:	d001      	beq.n	8000fe6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000fe2:	f7ff ff71 	bl	8000ec8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000fe6:	4b1b      	ldr	r3, [pc, #108]	@ (8001054 <HAL_UART_MspInit+0xbc>)
 8000fe8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000fea:	4b1a      	ldr	r3, [pc, #104]	@ (8001054 <HAL_UART_MspInit+0xbc>)
 8000fec:	2180      	movs	r1, #128	@ 0x80
 8000fee:	0289      	lsls	r1, r1, #10
 8000ff0:	430a      	orrs	r2, r1
 8000ff2:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000ff4:	4b17      	ldr	r3, [pc, #92]	@ (8001054 <HAL_UART_MspInit+0xbc>)
 8000ff6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000ff8:	2380      	movs	r3, #128	@ 0x80
 8000ffa:	029b      	lsls	r3, r3, #10
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	60fb      	str	r3, [r7, #12]
 8001000:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001002:	4b14      	ldr	r3, [pc, #80]	@ (8001054 <HAL_UART_MspInit+0xbc>)
 8001004:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001006:	4b13      	ldr	r3, [pc, #76]	@ (8001054 <HAL_UART_MspInit+0xbc>)
 8001008:	2108      	movs	r1, #8
 800100a:	430a      	orrs	r2, r1
 800100c:	635a      	str	r2, [r3, #52]	@ 0x34
 800100e:	4b11      	ldr	r3, [pc, #68]	@ (8001054 <HAL_UART_MspInit+0xbc>)
 8001010:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001012:	2208      	movs	r2, #8
 8001014:	4013      	ands	r3, r2
 8001016:	60bb      	str	r3, [r7, #8]
 8001018:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PD6     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_5;
 800101a:	2144      	movs	r1, #68	@ 0x44
 800101c:	187b      	adds	r3, r7, r1
 800101e:	2260      	movs	r2, #96	@ 0x60
 8001020:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001022:	187b      	adds	r3, r7, r1
 8001024:	2202      	movs	r2, #2
 8001026:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001028:	187b      	adds	r3, r7, r1
 800102a:	2200      	movs	r2, #0
 800102c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800102e:	187b      	adds	r3, r7, r1
 8001030:	2200      	movs	r2, #0
 8001032:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART2;
 8001034:	187b      	adds	r3, r7, r1
 8001036:	2200      	movs	r2, #0
 8001038:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800103a:	187b      	adds	r3, r7, r1
 800103c:	4a06      	ldr	r2, [pc, #24]	@ (8001058 <HAL_UART_MspInit+0xc0>)
 800103e:	0019      	movs	r1, r3
 8001040:	0010      	movs	r0, r2
 8001042:	f000 f9f3 	bl	800142c <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001046:	46c0      	nop			@ (mov r8, r8)
 8001048:	46bd      	mov	sp, r7
 800104a:	b017      	add	sp, #92	@ 0x5c
 800104c:	bd90      	pop	{r4, r7, pc}
 800104e:	46c0      	nop			@ (mov r8, r8)
 8001050:	40004400 	.word	0x40004400
 8001054:	40021000 	.word	0x40021000
 8001058:	50000c00 	.word	0x50000c00

0800105c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001060:	46c0      	nop			@ (mov r8, r8)
 8001062:	e7fd      	b.n	8001060 <NMI_Handler+0x4>

08001064 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001068:	46c0      	nop			@ (mov r8, r8)
 800106a:	e7fd      	b.n	8001068 <HardFault_Handler+0x4>

0800106c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001070:	46c0      	nop			@ (mov r8, r8)
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}

08001076 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001076:	b580      	push	{r7, lr}
 8001078:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800107a:	46c0      	nop			@ (mov r8, r8)
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}

08001080 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001084:	f000 f8b4 	bl	80011f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001088:	46c0      	nop			@ (mov r8, r8)
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}

0800108e <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800108e:	b580      	push	{r7, lr}
 8001090:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_BUTTON_Pin);
 8001092:	2380      	movs	r3, #128	@ 0x80
 8001094:	019b      	lsls	r3, r3, #6
 8001096:	0018      	movs	r0, r3
 8001098:	f000 fb66 	bl	8001768 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 800109c:	46c0      	nop			@ (mov r8, r8)
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
	...

080010a4 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80010a8:	4b03      	ldr	r3, [pc, #12]	@ (80010b8 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 80010aa:	0018      	movs	r0, r3
 80010ac:	f001 fb44 	bl	8002738 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 80010b0:	46c0      	nop			@ (mov r8, r8)
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	46c0      	nop			@ (mov r8, r8)
 80010b8:	20000074 	.word	0x20000074

080010bc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010c0:	46c0      	nop			@ (mov r8, r8)
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
	...

080010c8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80010c8:	480d      	ldr	r0, [pc, #52]	@ (8001100 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80010ca:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80010cc:	f7ff fff6 	bl	80010bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010d0:	480c      	ldr	r0, [pc, #48]	@ (8001104 <LoopForever+0x6>)
  ldr r1, =_edata
 80010d2:	490d      	ldr	r1, [pc, #52]	@ (8001108 <LoopForever+0xa>)
  ldr r2, =_sidata
 80010d4:	4a0d      	ldr	r2, [pc, #52]	@ (800110c <LoopForever+0xe>)
  movs r3, #0
 80010d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010d8:	e002      	b.n	80010e0 <LoopCopyDataInit>

080010da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010de:	3304      	adds	r3, #4

080010e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010e4:	d3f9      	bcc.n	80010da <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010e6:	4a0a      	ldr	r2, [pc, #40]	@ (8001110 <LoopForever+0x12>)
  ldr r4, =_ebss
 80010e8:	4c0a      	ldr	r4, [pc, #40]	@ (8001114 <LoopForever+0x16>)
  movs r3, #0
 80010ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010ec:	e001      	b.n	80010f2 <LoopFillZerobss>

080010ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010f0:	3204      	adds	r2, #4

080010f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010f4:	d3fb      	bcc.n	80010ee <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80010f6:	f002 fd37 	bl	8003b68 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80010fa:	f7ff fc47 	bl	800098c <main>

080010fe <LoopForever>:

LoopForever:
  b LoopForever
 80010fe:	e7fe      	b.n	80010fe <LoopForever>
  ldr   r0, =_estack
 8001100:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8001104:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001108:	20000058 	.word	0x20000058
  ldr r2, =_sidata
 800110c:	08003c60 	.word	0x08003c60
  ldr r2, =_sbss
 8001110:	20000058 	.word	0x20000058
  ldr r4, =_ebss
 8001114:	20000160 	.word	0x20000160

08001118 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001118:	e7fe      	b.n	8001118 <ADC1_COMP_IRQHandler>
	...

0800111c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001122:	1dfb      	adds	r3, r7, #7
 8001124:	2200      	movs	r2, #0
 8001126:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001128:	4b0b      	ldr	r3, [pc, #44]	@ (8001158 <HAL_Init+0x3c>)
 800112a:	681a      	ldr	r2, [r3, #0]
 800112c:	4b0a      	ldr	r3, [pc, #40]	@ (8001158 <HAL_Init+0x3c>)
 800112e:	2180      	movs	r1, #128	@ 0x80
 8001130:	0049      	lsls	r1, r1, #1
 8001132:	430a      	orrs	r2, r1
 8001134:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001136:	2003      	movs	r0, #3
 8001138:	f000 f810 	bl	800115c <HAL_InitTick>
 800113c:	1e03      	subs	r3, r0, #0
 800113e:	d003      	beq.n	8001148 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001140:	1dfb      	adds	r3, r7, #7
 8001142:	2201      	movs	r2, #1
 8001144:	701a      	strb	r2, [r3, #0]
 8001146:	e001      	b.n	800114c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001148:	f7ff fec4 	bl	8000ed4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800114c:	1dfb      	adds	r3, r7, #7
 800114e:	781b      	ldrb	r3, [r3, #0]
}
 8001150:	0018      	movs	r0, r3
 8001152:	46bd      	mov	sp, r7
 8001154:	b002      	add	sp, #8
 8001156:	bd80      	pop	{r7, pc}
 8001158:	40022000 	.word	0x40022000

0800115c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800115c:	b590      	push	{r4, r7, lr}
 800115e:	b085      	sub	sp, #20
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001164:	230f      	movs	r3, #15
 8001166:	18fb      	adds	r3, r7, r3
 8001168:	2200      	movs	r2, #0
 800116a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 800116c:	4b1d      	ldr	r3, [pc, #116]	@ (80011e4 <HAL_InitTick+0x88>)
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d02b      	beq.n	80011cc <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001174:	4b1c      	ldr	r3, [pc, #112]	@ (80011e8 <HAL_InitTick+0x8c>)
 8001176:	681c      	ldr	r4, [r3, #0]
 8001178:	4b1a      	ldr	r3, [pc, #104]	@ (80011e4 <HAL_InitTick+0x88>)
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	0019      	movs	r1, r3
 800117e:	23fa      	movs	r3, #250	@ 0xfa
 8001180:	0098      	lsls	r0, r3, #2
 8001182:	f7fe ffbf 	bl	8000104 <__udivsi3>
 8001186:	0003      	movs	r3, r0
 8001188:	0019      	movs	r1, r3
 800118a:	0020      	movs	r0, r4
 800118c:	f7fe ffba 	bl	8000104 <__udivsi3>
 8001190:	0003      	movs	r3, r0
 8001192:	0018      	movs	r0, r3
 8001194:	f000 f93d 	bl	8001412 <HAL_SYSTICK_Config>
 8001198:	1e03      	subs	r3, r0, #0
 800119a:	d112      	bne.n	80011c2 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	2b03      	cmp	r3, #3
 80011a0:	d80a      	bhi.n	80011b8 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011a2:	6879      	ldr	r1, [r7, #4]
 80011a4:	2301      	movs	r3, #1
 80011a6:	425b      	negs	r3, r3
 80011a8:	2200      	movs	r2, #0
 80011aa:	0018      	movs	r0, r3
 80011ac:	f000 f90c 	bl	80013c8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80011b0:	4b0e      	ldr	r3, [pc, #56]	@ (80011ec <HAL_InitTick+0x90>)
 80011b2:	687a      	ldr	r2, [r7, #4]
 80011b4:	601a      	str	r2, [r3, #0]
 80011b6:	e00d      	b.n	80011d4 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80011b8:	230f      	movs	r3, #15
 80011ba:	18fb      	adds	r3, r7, r3
 80011bc:	2201      	movs	r2, #1
 80011be:	701a      	strb	r2, [r3, #0]
 80011c0:	e008      	b.n	80011d4 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80011c2:	230f      	movs	r3, #15
 80011c4:	18fb      	adds	r3, r7, r3
 80011c6:	2201      	movs	r2, #1
 80011c8:	701a      	strb	r2, [r3, #0]
 80011ca:	e003      	b.n	80011d4 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80011cc:	230f      	movs	r3, #15
 80011ce:	18fb      	adds	r3, r7, r3
 80011d0:	2201      	movs	r2, #1
 80011d2:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80011d4:	230f      	movs	r3, #15
 80011d6:	18fb      	adds	r3, r7, r3
 80011d8:	781b      	ldrb	r3, [r3, #0]
}
 80011da:	0018      	movs	r0, r3
 80011dc:	46bd      	mov	sp, r7
 80011de:	b005      	add	sp, #20
 80011e0:	bd90      	pop	{r4, r7, pc}
 80011e2:	46c0      	nop			@ (mov r8, r8)
 80011e4:	20000054 	.word	0x20000054
 80011e8:	2000004c 	.word	0x2000004c
 80011ec:	20000050 	.word	0x20000050

080011f0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80011f4:	4b05      	ldr	r3, [pc, #20]	@ (800120c <HAL_IncTick+0x1c>)
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	001a      	movs	r2, r3
 80011fa:	4b05      	ldr	r3, [pc, #20]	@ (8001210 <HAL_IncTick+0x20>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	18d2      	adds	r2, r2, r3
 8001200:	4b03      	ldr	r3, [pc, #12]	@ (8001210 <HAL_IncTick+0x20>)
 8001202:	601a      	str	r2, [r3, #0]
}
 8001204:	46c0      	nop			@ (mov r8, r8)
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	46c0      	nop			@ (mov r8, r8)
 800120c:	20000054 	.word	0x20000054
 8001210:	2000015c 	.word	0x2000015c

08001214 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0
  return uwTick;
 8001218:	4b02      	ldr	r3, [pc, #8]	@ (8001224 <HAL_GetTick+0x10>)
 800121a:	681b      	ldr	r3, [r3, #0]
}
 800121c:	0018      	movs	r0, r3
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	46c0      	nop			@ (mov r8, r8)
 8001224:	2000015c 	.word	0x2000015c

08001228 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b084      	sub	sp, #16
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001230:	f7ff fff0 	bl	8001214 <HAL_GetTick>
 8001234:	0003      	movs	r3, r0
 8001236:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	3301      	adds	r3, #1
 8001240:	d005      	beq.n	800124e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001242:	4b0a      	ldr	r3, [pc, #40]	@ (800126c <HAL_Delay+0x44>)
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	001a      	movs	r2, r3
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	189b      	adds	r3, r3, r2
 800124c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800124e:	46c0      	nop			@ (mov r8, r8)
 8001250:	f7ff ffe0 	bl	8001214 <HAL_GetTick>
 8001254:	0002      	movs	r2, r0
 8001256:	68bb      	ldr	r3, [r7, #8]
 8001258:	1ad3      	subs	r3, r2, r3
 800125a:	68fa      	ldr	r2, [r7, #12]
 800125c:	429a      	cmp	r2, r3
 800125e:	d8f7      	bhi.n	8001250 <HAL_Delay+0x28>
  {
  }
}
 8001260:	46c0      	nop			@ (mov r8, r8)
 8001262:	46c0      	nop			@ (mov r8, r8)
 8001264:	46bd      	mov	sp, r7
 8001266:	b004      	add	sp, #16
 8001268:	bd80      	pop	{r7, pc}
 800126a:	46c0      	nop			@ (mov r8, r8)
 800126c:	20000054 	.word	0x20000054

08001270 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	0002      	movs	r2, r0
 8001278:	1dfb      	adds	r3, r7, #7
 800127a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800127c:	1dfb      	adds	r3, r7, #7
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	2b7f      	cmp	r3, #127	@ 0x7f
 8001282:	d809      	bhi.n	8001298 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001284:	1dfb      	adds	r3, r7, #7
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	001a      	movs	r2, r3
 800128a:	231f      	movs	r3, #31
 800128c:	401a      	ands	r2, r3
 800128e:	4b04      	ldr	r3, [pc, #16]	@ (80012a0 <__NVIC_EnableIRQ+0x30>)
 8001290:	2101      	movs	r1, #1
 8001292:	4091      	lsls	r1, r2
 8001294:	000a      	movs	r2, r1
 8001296:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001298:	46c0      	nop			@ (mov r8, r8)
 800129a:	46bd      	mov	sp, r7
 800129c:	b002      	add	sp, #8
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	e000e100 	.word	0xe000e100

080012a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012a4:	b590      	push	{r4, r7, lr}
 80012a6:	b083      	sub	sp, #12
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	0002      	movs	r2, r0
 80012ac:	6039      	str	r1, [r7, #0]
 80012ae:	1dfb      	adds	r3, r7, #7
 80012b0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80012b2:	1dfb      	adds	r3, r7, #7
 80012b4:	781b      	ldrb	r3, [r3, #0]
 80012b6:	2b7f      	cmp	r3, #127	@ 0x7f
 80012b8:	d828      	bhi.n	800130c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012ba:	4a2f      	ldr	r2, [pc, #188]	@ (8001378 <__NVIC_SetPriority+0xd4>)
 80012bc:	1dfb      	adds	r3, r7, #7
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	b25b      	sxtb	r3, r3
 80012c2:	089b      	lsrs	r3, r3, #2
 80012c4:	33c0      	adds	r3, #192	@ 0xc0
 80012c6:	009b      	lsls	r3, r3, #2
 80012c8:	589b      	ldr	r3, [r3, r2]
 80012ca:	1dfa      	adds	r2, r7, #7
 80012cc:	7812      	ldrb	r2, [r2, #0]
 80012ce:	0011      	movs	r1, r2
 80012d0:	2203      	movs	r2, #3
 80012d2:	400a      	ands	r2, r1
 80012d4:	00d2      	lsls	r2, r2, #3
 80012d6:	21ff      	movs	r1, #255	@ 0xff
 80012d8:	4091      	lsls	r1, r2
 80012da:	000a      	movs	r2, r1
 80012dc:	43d2      	mvns	r2, r2
 80012de:	401a      	ands	r2, r3
 80012e0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	019b      	lsls	r3, r3, #6
 80012e6:	22ff      	movs	r2, #255	@ 0xff
 80012e8:	401a      	ands	r2, r3
 80012ea:	1dfb      	adds	r3, r7, #7
 80012ec:	781b      	ldrb	r3, [r3, #0]
 80012ee:	0018      	movs	r0, r3
 80012f0:	2303      	movs	r3, #3
 80012f2:	4003      	ands	r3, r0
 80012f4:	00db      	lsls	r3, r3, #3
 80012f6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012f8:	481f      	ldr	r0, [pc, #124]	@ (8001378 <__NVIC_SetPriority+0xd4>)
 80012fa:	1dfb      	adds	r3, r7, #7
 80012fc:	781b      	ldrb	r3, [r3, #0]
 80012fe:	b25b      	sxtb	r3, r3
 8001300:	089b      	lsrs	r3, r3, #2
 8001302:	430a      	orrs	r2, r1
 8001304:	33c0      	adds	r3, #192	@ 0xc0
 8001306:	009b      	lsls	r3, r3, #2
 8001308:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800130a:	e031      	b.n	8001370 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800130c:	4a1b      	ldr	r2, [pc, #108]	@ (800137c <__NVIC_SetPriority+0xd8>)
 800130e:	1dfb      	adds	r3, r7, #7
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	0019      	movs	r1, r3
 8001314:	230f      	movs	r3, #15
 8001316:	400b      	ands	r3, r1
 8001318:	3b08      	subs	r3, #8
 800131a:	089b      	lsrs	r3, r3, #2
 800131c:	3306      	adds	r3, #6
 800131e:	009b      	lsls	r3, r3, #2
 8001320:	18d3      	adds	r3, r2, r3
 8001322:	3304      	adds	r3, #4
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	1dfa      	adds	r2, r7, #7
 8001328:	7812      	ldrb	r2, [r2, #0]
 800132a:	0011      	movs	r1, r2
 800132c:	2203      	movs	r2, #3
 800132e:	400a      	ands	r2, r1
 8001330:	00d2      	lsls	r2, r2, #3
 8001332:	21ff      	movs	r1, #255	@ 0xff
 8001334:	4091      	lsls	r1, r2
 8001336:	000a      	movs	r2, r1
 8001338:	43d2      	mvns	r2, r2
 800133a:	401a      	ands	r2, r3
 800133c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	019b      	lsls	r3, r3, #6
 8001342:	22ff      	movs	r2, #255	@ 0xff
 8001344:	401a      	ands	r2, r3
 8001346:	1dfb      	adds	r3, r7, #7
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	0018      	movs	r0, r3
 800134c:	2303      	movs	r3, #3
 800134e:	4003      	ands	r3, r0
 8001350:	00db      	lsls	r3, r3, #3
 8001352:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001354:	4809      	ldr	r0, [pc, #36]	@ (800137c <__NVIC_SetPriority+0xd8>)
 8001356:	1dfb      	adds	r3, r7, #7
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	001c      	movs	r4, r3
 800135c:	230f      	movs	r3, #15
 800135e:	4023      	ands	r3, r4
 8001360:	3b08      	subs	r3, #8
 8001362:	089b      	lsrs	r3, r3, #2
 8001364:	430a      	orrs	r2, r1
 8001366:	3306      	adds	r3, #6
 8001368:	009b      	lsls	r3, r3, #2
 800136a:	18c3      	adds	r3, r0, r3
 800136c:	3304      	adds	r3, #4
 800136e:	601a      	str	r2, [r3, #0]
}
 8001370:	46c0      	nop			@ (mov r8, r8)
 8001372:	46bd      	mov	sp, r7
 8001374:	b003      	add	sp, #12
 8001376:	bd90      	pop	{r4, r7, pc}
 8001378:	e000e100 	.word	0xe000e100
 800137c:	e000ed00 	.word	0xe000ed00

08001380 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	1e5a      	subs	r2, r3, #1
 800138c:	2380      	movs	r3, #128	@ 0x80
 800138e:	045b      	lsls	r3, r3, #17
 8001390:	429a      	cmp	r2, r3
 8001392:	d301      	bcc.n	8001398 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001394:	2301      	movs	r3, #1
 8001396:	e010      	b.n	80013ba <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001398:	4b0a      	ldr	r3, [pc, #40]	@ (80013c4 <SysTick_Config+0x44>)
 800139a:	687a      	ldr	r2, [r7, #4]
 800139c:	3a01      	subs	r2, #1
 800139e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013a0:	2301      	movs	r3, #1
 80013a2:	425b      	negs	r3, r3
 80013a4:	2103      	movs	r1, #3
 80013a6:	0018      	movs	r0, r3
 80013a8:	f7ff ff7c 	bl	80012a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013ac:	4b05      	ldr	r3, [pc, #20]	@ (80013c4 <SysTick_Config+0x44>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013b2:	4b04      	ldr	r3, [pc, #16]	@ (80013c4 <SysTick_Config+0x44>)
 80013b4:	2207      	movs	r2, #7
 80013b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013b8:	2300      	movs	r3, #0
}
 80013ba:	0018      	movs	r0, r3
 80013bc:	46bd      	mov	sp, r7
 80013be:	b002      	add	sp, #8
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	46c0      	nop			@ (mov r8, r8)
 80013c4:	e000e010 	.word	0xe000e010

080013c8 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b084      	sub	sp, #16
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	60b9      	str	r1, [r7, #8]
 80013d0:	607a      	str	r2, [r7, #4]
 80013d2:	210f      	movs	r1, #15
 80013d4:	187b      	adds	r3, r7, r1
 80013d6:	1c02      	adds	r2, r0, #0
 80013d8:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80013da:	68ba      	ldr	r2, [r7, #8]
 80013dc:	187b      	adds	r3, r7, r1
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	b25b      	sxtb	r3, r3
 80013e2:	0011      	movs	r1, r2
 80013e4:	0018      	movs	r0, r3
 80013e6:	f7ff ff5d 	bl	80012a4 <__NVIC_SetPriority>
}
 80013ea:	46c0      	nop			@ (mov r8, r8)
 80013ec:	46bd      	mov	sp, r7
 80013ee:	b004      	add	sp, #16
 80013f0:	bd80      	pop	{r7, pc}

080013f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013f2:	b580      	push	{r7, lr}
 80013f4:	b082      	sub	sp, #8
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	0002      	movs	r2, r0
 80013fa:	1dfb      	adds	r3, r7, #7
 80013fc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013fe:	1dfb      	adds	r3, r7, #7
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	b25b      	sxtb	r3, r3
 8001404:	0018      	movs	r0, r3
 8001406:	f7ff ff33 	bl	8001270 <__NVIC_EnableIRQ>
}
 800140a:	46c0      	nop			@ (mov r8, r8)
 800140c:	46bd      	mov	sp, r7
 800140e:	b002      	add	sp, #8
 8001410:	bd80      	pop	{r7, pc}

08001412 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001412:	b580      	push	{r7, lr}
 8001414:	b082      	sub	sp, #8
 8001416:	af00      	add	r7, sp, #0
 8001418:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	0018      	movs	r0, r3
 800141e:	f7ff ffaf 	bl	8001380 <SysTick_Config>
 8001422:	0003      	movs	r3, r0
}
 8001424:	0018      	movs	r0, r3
 8001426:	46bd      	mov	sp, r7
 8001428:	b002      	add	sp, #8
 800142a:	bd80      	pop	{r7, pc}

0800142c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b086      	sub	sp, #24
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
 8001434:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001436:	2300      	movs	r3, #0
 8001438:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800143a:	e147      	b.n	80016cc <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	2101      	movs	r1, #1
 8001442:	697a      	ldr	r2, [r7, #20]
 8001444:	4091      	lsls	r1, r2
 8001446:	000a      	movs	r2, r1
 8001448:	4013      	ands	r3, r2
 800144a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d100      	bne.n	8001454 <HAL_GPIO_Init+0x28>
 8001452:	e138      	b.n	80016c6 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	2203      	movs	r2, #3
 800145a:	4013      	ands	r3, r2
 800145c:	2b01      	cmp	r3, #1
 800145e:	d005      	beq.n	800146c <HAL_GPIO_Init+0x40>
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	2203      	movs	r2, #3
 8001466:	4013      	ands	r3, r2
 8001468:	2b02      	cmp	r3, #2
 800146a:	d130      	bne.n	80014ce <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	689b      	ldr	r3, [r3, #8]
 8001470:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001472:	697b      	ldr	r3, [r7, #20]
 8001474:	005b      	lsls	r3, r3, #1
 8001476:	2203      	movs	r2, #3
 8001478:	409a      	lsls	r2, r3
 800147a:	0013      	movs	r3, r2
 800147c:	43da      	mvns	r2, r3
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	4013      	ands	r3, r2
 8001482:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	68da      	ldr	r2, [r3, #12]
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	005b      	lsls	r3, r3, #1
 800148c:	409a      	lsls	r2, r3
 800148e:	0013      	movs	r3, r2
 8001490:	693a      	ldr	r2, [r7, #16]
 8001492:	4313      	orrs	r3, r2
 8001494:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	693a      	ldr	r2, [r7, #16]
 800149a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80014a2:	2201      	movs	r2, #1
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	409a      	lsls	r2, r3
 80014a8:	0013      	movs	r3, r2
 80014aa:	43da      	mvns	r2, r3
 80014ac:	693b      	ldr	r3, [r7, #16]
 80014ae:	4013      	ands	r3, r2
 80014b0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	091b      	lsrs	r3, r3, #4
 80014b8:	2201      	movs	r2, #1
 80014ba:	401a      	ands	r2, r3
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	409a      	lsls	r2, r3
 80014c0:	0013      	movs	r3, r2
 80014c2:	693a      	ldr	r2, [r7, #16]
 80014c4:	4313      	orrs	r3, r2
 80014c6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	693a      	ldr	r2, [r7, #16]
 80014cc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	2203      	movs	r2, #3
 80014d4:	4013      	ands	r3, r2
 80014d6:	2b03      	cmp	r3, #3
 80014d8:	d017      	beq.n	800150a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	68db      	ldr	r3, [r3, #12]
 80014de:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	005b      	lsls	r3, r3, #1
 80014e4:	2203      	movs	r2, #3
 80014e6:	409a      	lsls	r2, r3
 80014e8:	0013      	movs	r3, r2
 80014ea:	43da      	mvns	r2, r3
 80014ec:	693b      	ldr	r3, [r7, #16]
 80014ee:	4013      	ands	r3, r2
 80014f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	689a      	ldr	r2, [r3, #8]
 80014f6:	697b      	ldr	r3, [r7, #20]
 80014f8:	005b      	lsls	r3, r3, #1
 80014fa:	409a      	lsls	r2, r3
 80014fc:	0013      	movs	r3, r2
 80014fe:	693a      	ldr	r2, [r7, #16]
 8001500:	4313      	orrs	r3, r2
 8001502:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	693a      	ldr	r2, [r7, #16]
 8001508:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	2203      	movs	r2, #3
 8001510:	4013      	ands	r3, r2
 8001512:	2b02      	cmp	r3, #2
 8001514:	d123      	bne.n	800155e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	08da      	lsrs	r2, r3, #3
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	3208      	adds	r2, #8
 800151e:	0092      	lsls	r2, r2, #2
 8001520:	58d3      	ldr	r3, [r2, r3]
 8001522:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	2207      	movs	r2, #7
 8001528:	4013      	ands	r3, r2
 800152a:	009b      	lsls	r3, r3, #2
 800152c:	220f      	movs	r2, #15
 800152e:	409a      	lsls	r2, r3
 8001530:	0013      	movs	r3, r2
 8001532:	43da      	mvns	r2, r3
 8001534:	693b      	ldr	r3, [r7, #16]
 8001536:	4013      	ands	r3, r2
 8001538:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	691a      	ldr	r2, [r3, #16]
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	2107      	movs	r1, #7
 8001542:	400b      	ands	r3, r1
 8001544:	009b      	lsls	r3, r3, #2
 8001546:	409a      	lsls	r2, r3
 8001548:	0013      	movs	r3, r2
 800154a:	693a      	ldr	r2, [r7, #16]
 800154c:	4313      	orrs	r3, r2
 800154e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	08da      	lsrs	r2, r3, #3
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	3208      	adds	r2, #8
 8001558:	0092      	lsls	r2, r2, #2
 800155a:	6939      	ldr	r1, [r7, #16]
 800155c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	005b      	lsls	r3, r3, #1
 8001568:	2203      	movs	r2, #3
 800156a:	409a      	lsls	r2, r3
 800156c:	0013      	movs	r3, r2
 800156e:	43da      	mvns	r2, r3
 8001570:	693b      	ldr	r3, [r7, #16]
 8001572:	4013      	ands	r3, r2
 8001574:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	2203      	movs	r2, #3
 800157c:	401a      	ands	r2, r3
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	005b      	lsls	r3, r3, #1
 8001582:	409a      	lsls	r2, r3
 8001584:	0013      	movs	r3, r2
 8001586:	693a      	ldr	r2, [r7, #16]
 8001588:	4313      	orrs	r3, r2
 800158a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	693a      	ldr	r2, [r7, #16]
 8001590:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	685a      	ldr	r2, [r3, #4]
 8001596:	23c0      	movs	r3, #192	@ 0xc0
 8001598:	029b      	lsls	r3, r3, #10
 800159a:	4013      	ands	r3, r2
 800159c:	d100      	bne.n	80015a0 <HAL_GPIO_Init+0x174>
 800159e:	e092      	b.n	80016c6 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80015a0:	4a50      	ldr	r2, [pc, #320]	@ (80016e4 <HAL_GPIO_Init+0x2b8>)
 80015a2:	697b      	ldr	r3, [r7, #20]
 80015a4:	089b      	lsrs	r3, r3, #2
 80015a6:	3318      	adds	r3, #24
 80015a8:	009b      	lsls	r3, r3, #2
 80015aa:	589b      	ldr	r3, [r3, r2]
 80015ac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80015ae:	697b      	ldr	r3, [r7, #20]
 80015b0:	2203      	movs	r2, #3
 80015b2:	4013      	ands	r3, r2
 80015b4:	00db      	lsls	r3, r3, #3
 80015b6:	220f      	movs	r2, #15
 80015b8:	409a      	lsls	r2, r3
 80015ba:	0013      	movs	r3, r2
 80015bc:	43da      	mvns	r2, r3
 80015be:	693b      	ldr	r3, [r7, #16]
 80015c0:	4013      	ands	r3, r2
 80015c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80015c4:	687a      	ldr	r2, [r7, #4]
 80015c6:	23a0      	movs	r3, #160	@ 0xa0
 80015c8:	05db      	lsls	r3, r3, #23
 80015ca:	429a      	cmp	r2, r3
 80015cc:	d013      	beq.n	80015f6 <HAL_GPIO_Init+0x1ca>
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	4a45      	ldr	r2, [pc, #276]	@ (80016e8 <HAL_GPIO_Init+0x2bc>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d00d      	beq.n	80015f2 <HAL_GPIO_Init+0x1c6>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	4a44      	ldr	r2, [pc, #272]	@ (80016ec <HAL_GPIO_Init+0x2c0>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d007      	beq.n	80015ee <HAL_GPIO_Init+0x1c2>
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	4a43      	ldr	r2, [pc, #268]	@ (80016f0 <HAL_GPIO_Init+0x2c4>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d101      	bne.n	80015ea <HAL_GPIO_Init+0x1be>
 80015e6:	2303      	movs	r3, #3
 80015e8:	e006      	b.n	80015f8 <HAL_GPIO_Init+0x1cc>
 80015ea:	2305      	movs	r3, #5
 80015ec:	e004      	b.n	80015f8 <HAL_GPIO_Init+0x1cc>
 80015ee:	2302      	movs	r3, #2
 80015f0:	e002      	b.n	80015f8 <HAL_GPIO_Init+0x1cc>
 80015f2:	2301      	movs	r3, #1
 80015f4:	e000      	b.n	80015f8 <HAL_GPIO_Init+0x1cc>
 80015f6:	2300      	movs	r3, #0
 80015f8:	697a      	ldr	r2, [r7, #20]
 80015fa:	2103      	movs	r1, #3
 80015fc:	400a      	ands	r2, r1
 80015fe:	00d2      	lsls	r2, r2, #3
 8001600:	4093      	lsls	r3, r2
 8001602:	693a      	ldr	r2, [r7, #16]
 8001604:	4313      	orrs	r3, r2
 8001606:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001608:	4936      	ldr	r1, [pc, #216]	@ (80016e4 <HAL_GPIO_Init+0x2b8>)
 800160a:	697b      	ldr	r3, [r7, #20]
 800160c:	089b      	lsrs	r3, r3, #2
 800160e:	3318      	adds	r3, #24
 8001610:	009b      	lsls	r3, r3, #2
 8001612:	693a      	ldr	r2, [r7, #16]
 8001614:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001616:	4b33      	ldr	r3, [pc, #204]	@ (80016e4 <HAL_GPIO_Init+0x2b8>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	43da      	mvns	r2, r3
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	4013      	ands	r3, r2
 8001624:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	685a      	ldr	r2, [r3, #4]
 800162a:	2380      	movs	r3, #128	@ 0x80
 800162c:	035b      	lsls	r3, r3, #13
 800162e:	4013      	ands	r3, r2
 8001630:	d003      	beq.n	800163a <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8001632:	693a      	ldr	r2, [r7, #16]
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	4313      	orrs	r3, r2
 8001638:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800163a:	4b2a      	ldr	r3, [pc, #168]	@ (80016e4 <HAL_GPIO_Init+0x2b8>)
 800163c:	693a      	ldr	r2, [r7, #16]
 800163e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001640:	4b28      	ldr	r3, [pc, #160]	@ (80016e4 <HAL_GPIO_Init+0x2b8>)
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	43da      	mvns	r2, r3
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	4013      	ands	r3, r2
 800164e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	685a      	ldr	r2, [r3, #4]
 8001654:	2380      	movs	r3, #128	@ 0x80
 8001656:	039b      	lsls	r3, r3, #14
 8001658:	4013      	ands	r3, r2
 800165a:	d003      	beq.n	8001664 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 800165c:	693a      	ldr	r2, [r7, #16]
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	4313      	orrs	r3, r2
 8001662:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001664:	4b1f      	ldr	r3, [pc, #124]	@ (80016e4 <HAL_GPIO_Init+0x2b8>)
 8001666:	693a      	ldr	r2, [r7, #16]
 8001668:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800166a:	4a1e      	ldr	r2, [pc, #120]	@ (80016e4 <HAL_GPIO_Init+0x2b8>)
 800166c:	2384      	movs	r3, #132	@ 0x84
 800166e:	58d3      	ldr	r3, [r2, r3]
 8001670:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	43da      	mvns	r2, r3
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	4013      	ands	r3, r2
 800167a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	685a      	ldr	r2, [r3, #4]
 8001680:	2380      	movs	r3, #128	@ 0x80
 8001682:	029b      	lsls	r3, r3, #10
 8001684:	4013      	ands	r3, r2
 8001686:	d003      	beq.n	8001690 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001688:	693a      	ldr	r2, [r7, #16]
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	4313      	orrs	r3, r2
 800168e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001690:	4914      	ldr	r1, [pc, #80]	@ (80016e4 <HAL_GPIO_Init+0x2b8>)
 8001692:	2284      	movs	r2, #132	@ 0x84
 8001694:	693b      	ldr	r3, [r7, #16]
 8001696:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001698:	4a12      	ldr	r2, [pc, #72]	@ (80016e4 <HAL_GPIO_Init+0x2b8>)
 800169a:	2380      	movs	r3, #128	@ 0x80
 800169c:	58d3      	ldr	r3, [r2, r3]
 800169e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	43da      	mvns	r2, r3
 80016a4:	693b      	ldr	r3, [r7, #16]
 80016a6:	4013      	ands	r3, r2
 80016a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	685a      	ldr	r2, [r3, #4]
 80016ae:	2380      	movs	r3, #128	@ 0x80
 80016b0:	025b      	lsls	r3, r3, #9
 80016b2:	4013      	ands	r3, r2
 80016b4:	d003      	beq.n	80016be <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80016b6:	693a      	ldr	r2, [r7, #16]
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	4313      	orrs	r3, r2
 80016bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80016be:	4909      	ldr	r1, [pc, #36]	@ (80016e4 <HAL_GPIO_Init+0x2b8>)
 80016c0:	2280      	movs	r2, #128	@ 0x80
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	3301      	adds	r3, #1
 80016ca:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	681a      	ldr	r2, [r3, #0]
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	40da      	lsrs	r2, r3
 80016d4:	1e13      	subs	r3, r2, #0
 80016d6:	d000      	beq.n	80016da <HAL_GPIO_Init+0x2ae>
 80016d8:	e6b0      	b.n	800143c <HAL_GPIO_Init+0x10>
  }
}
 80016da:	46c0      	nop			@ (mov r8, r8)
 80016dc:	46c0      	nop			@ (mov r8, r8)
 80016de:	46bd      	mov	sp, r7
 80016e0:	b006      	add	sp, #24
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	40021800 	.word	0x40021800
 80016e8:	50000400 	.word	0x50000400
 80016ec:	50000800 	.word	0x50000800
 80016f0:	50000c00 	.word	0x50000c00

080016f4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b084      	sub	sp, #16
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
 80016fc:	000a      	movs	r2, r1
 80016fe:	1cbb      	adds	r3, r7, #2
 8001700:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	691b      	ldr	r3, [r3, #16]
 8001706:	1cba      	adds	r2, r7, #2
 8001708:	8812      	ldrh	r2, [r2, #0]
 800170a:	4013      	ands	r3, r2
 800170c:	d004      	beq.n	8001718 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800170e:	230f      	movs	r3, #15
 8001710:	18fb      	adds	r3, r7, r3
 8001712:	2201      	movs	r2, #1
 8001714:	701a      	strb	r2, [r3, #0]
 8001716:	e003      	b.n	8001720 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001718:	230f      	movs	r3, #15
 800171a:	18fb      	adds	r3, r7, r3
 800171c:	2200      	movs	r2, #0
 800171e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001720:	230f      	movs	r3, #15
 8001722:	18fb      	adds	r3, r7, r3
 8001724:	781b      	ldrb	r3, [r3, #0]
}
 8001726:	0018      	movs	r0, r3
 8001728:	46bd      	mov	sp, r7
 800172a:	b004      	add	sp, #16
 800172c:	bd80      	pop	{r7, pc}

0800172e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800172e:	b580      	push	{r7, lr}
 8001730:	b082      	sub	sp, #8
 8001732:	af00      	add	r7, sp, #0
 8001734:	6078      	str	r0, [r7, #4]
 8001736:	0008      	movs	r0, r1
 8001738:	0011      	movs	r1, r2
 800173a:	1cbb      	adds	r3, r7, #2
 800173c:	1c02      	adds	r2, r0, #0
 800173e:	801a      	strh	r2, [r3, #0]
 8001740:	1c7b      	adds	r3, r7, #1
 8001742:	1c0a      	adds	r2, r1, #0
 8001744:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001746:	1c7b      	adds	r3, r7, #1
 8001748:	781b      	ldrb	r3, [r3, #0]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d004      	beq.n	8001758 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800174e:	1cbb      	adds	r3, r7, #2
 8001750:	881a      	ldrh	r2, [r3, #0]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001756:	e003      	b.n	8001760 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001758:	1cbb      	adds	r3, r7, #2
 800175a:	881a      	ldrh	r2, [r3, #0]
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001760:	46c0      	nop			@ (mov r8, r8)
 8001762:	46bd      	mov	sp, r7
 8001764:	b002      	add	sp, #8
 8001766:	bd80      	pop	{r7, pc}

08001768 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
 800176e:	0002      	movs	r2, r0
 8001770:	1dbb      	adds	r3, r7, #6
 8001772:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8001774:	4b10      	ldr	r3, [pc, #64]	@ (80017b8 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8001776:	68db      	ldr	r3, [r3, #12]
 8001778:	1dba      	adds	r2, r7, #6
 800177a:	8812      	ldrh	r2, [r2, #0]
 800177c:	4013      	ands	r3, r2
 800177e:	d008      	beq.n	8001792 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8001780:	4b0d      	ldr	r3, [pc, #52]	@ (80017b8 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8001782:	1dba      	adds	r2, r7, #6
 8001784:	8812      	ldrh	r2, [r2, #0]
 8001786:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8001788:	1dbb      	adds	r3, r7, #6
 800178a:	881b      	ldrh	r3, [r3, #0]
 800178c:	0018      	movs	r0, r3
 800178e:	f000 f815 	bl	80017bc <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8001792:	4b09      	ldr	r3, [pc, #36]	@ (80017b8 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8001794:	691b      	ldr	r3, [r3, #16]
 8001796:	1dba      	adds	r2, r7, #6
 8001798:	8812      	ldrh	r2, [r2, #0]
 800179a:	4013      	ands	r3, r2
 800179c:	d008      	beq.n	80017b0 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 800179e:	4b06      	ldr	r3, [pc, #24]	@ (80017b8 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80017a0:	1dba      	adds	r2, r7, #6
 80017a2:	8812      	ldrh	r2, [r2, #0]
 80017a4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 80017a6:	1dbb      	adds	r3, r7, #6
 80017a8:	881b      	ldrh	r3, [r3, #0]
 80017aa:	0018      	movs	r0, r3
 80017ac:	f000 f810 	bl	80017d0 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 80017b0:	46c0      	nop			@ (mov r8, r8)
 80017b2:	46bd      	mov	sp, r7
 80017b4:	b002      	add	sp, #8
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	40021800 	.word	0x40021800

080017bc <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	0002      	movs	r2, r0
 80017c4:	1dbb      	adds	r3, r7, #6
 80017c6:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 80017c8:	46c0      	nop			@ (mov r8, r8)
 80017ca:	46bd      	mov	sp, r7
 80017cc:	b002      	add	sp, #8
 80017ce:	bd80      	pop	{r7, pc}

080017d0 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	0002      	movs	r2, r0
 80017d8:	1dbb      	adds	r3, r7, #6
 80017da:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 80017dc:	46c0      	nop			@ (mov r8, r8)
 80017de:	46bd      	mov	sp, r7
 80017e0:	b002      	add	sp, #8
 80017e2:	bd80      	pop	{r7, pc}

080017e4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b084      	sub	sp, #16
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80017ec:	4b19      	ldr	r3, [pc, #100]	@ (8001854 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a19      	ldr	r2, [pc, #100]	@ (8001858 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80017f2:	4013      	ands	r3, r2
 80017f4:	0019      	movs	r1, r3
 80017f6:	4b17      	ldr	r3, [pc, #92]	@ (8001854 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80017f8:	687a      	ldr	r2, [r7, #4]
 80017fa:	430a      	orrs	r2, r1
 80017fc:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80017fe:	687a      	ldr	r2, [r7, #4]
 8001800:	2380      	movs	r3, #128	@ 0x80
 8001802:	009b      	lsls	r3, r3, #2
 8001804:	429a      	cmp	r2, r3
 8001806:	d11f      	bne.n	8001848 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001808:	4b14      	ldr	r3, [pc, #80]	@ (800185c <HAL_PWREx_ControlVoltageScaling+0x78>)
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	0013      	movs	r3, r2
 800180e:	005b      	lsls	r3, r3, #1
 8001810:	189b      	adds	r3, r3, r2
 8001812:	005b      	lsls	r3, r3, #1
 8001814:	4912      	ldr	r1, [pc, #72]	@ (8001860 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001816:	0018      	movs	r0, r3
 8001818:	f7fe fc74 	bl	8000104 <__udivsi3>
 800181c:	0003      	movs	r3, r0
 800181e:	3301      	adds	r3, #1
 8001820:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001822:	e008      	b.n	8001836 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d003      	beq.n	8001832 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	3b01      	subs	r3, #1
 800182e:	60fb      	str	r3, [r7, #12]
 8001830:	e001      	b.n	8001836 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001832:	2303      	movs	r3, #3
 8001834:	e009      	b.n	800184a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001836:	4b07      	ldr	r3, [pc, #28]	@ (8001854 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001838:	695a      	ldr	r2, [r3, #20]
 800183a:	2380      	movs	r3, #128	@ 0x80
 800183c:	00db      	lsls	r3, r3, #3
 800183e:	401a      	ands	r2, r3
 8001840:	2380      	movs	r3, #128	@ 0x80
 8001842:	00db      	lsls	r3, r3, #3
 8001844:	429a      	cmp	r2, r3
 8001846:	d0ed      	beq.n	8001824 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001848:	2300      	movs	r3, #0
}
 800184a:	0018      	movs	r0, r3
 800184c:	46bd      	mov	sp, r7
 800184e:	b004      	add	sp, #16
 8001850:	bd80      	pop	{r7, pc}
 8001852:	46c0      	nop			@ (mov r8, r8)
 8001854:	40007000 	.word	0x40007000
 8001858:	fffff9ff 	.word	0xfffff9ff
 800185c:	2000004c 	.word	0x2000004c
 8001860:	000f4240 	.word	0x000f4240

08001864 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001868:	4b03      	ldr	r3, [pc, #12]	@ (8001878 <LL_RCC_GetAPB1Prescaler+0x14>)
 800186a:	689a      	ldr	r2, [r3, #8]
 800186c:	23e0      	movs	r3, #224	@ 0xe0
 800186e:	01db      	lsls	r3, r3, #7
 8001870:	4013      	ands	r3, r2
}
 8001872:	0018      	movs	r0, r3
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	40021000 	.word	0x40021000

0800187c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b088      	sub	sp, #32
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d101      	bne.n	800188e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	e2fe      	b.n	8001e8c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	2201      	movs	r2, #1
 8001894:	4013      	ands	r3, r2
 8001896:	d100      	bne.n	800189a <HAL_RCC_OscConfig+0x1e>
 8001898:	e07c      	b.n	8001994 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800189a:	4bc3      	ldr	r3, [pc, #780]	@ (8001ba8 <HAL_RCC_OscConfig+0x32c>)
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	2238      	movs	r2, #56	@ 0x38
 80018a0:	4013      	ands	r3, r2
 80018a2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80018a4:	4bc0      	ldr	r3, [pc, #768]	@ (8001ba8 <HAL_RCC_OscConfig+0x32c>)
 80018a6:	68db      	ldr	r3, [r3, #12]
 80018a8:	2203      	movs	r2, #3
 80018aa:	4013      	ands	r3, r2
 80018ac:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80018ae:	69bb      	ldr	r3, [r7, #24]
 80018b0:	2b10      	cmp	r3, #16
 80018b2:	d102      	bne.n	80018ba <HAL_RCC_OscConfig+0x3e>
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	2b03      	cmp	r3, #3
 80018b8:	d002      	beq.n	80018c0 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80018ba:	69bb      	ldr	r3, [r7, #24]
 80018bc:	2b08      	cmp	r3, #8
 80018be:	d10b      	bne.n	80018d8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018c0:	4bb9      	ldr	r3, [pc, #740]	@ (8001ba8 <HAL_RCC_OscConfig+0x32c>)
 80018c2:	681a      	ldr	r2, [r3, #0]
 80018c4:	2380      	movs	r3, #128	@ 0x80
 80018c6:	029b      	lsls	r3, r3, #10
 80018c8:	4013      	ands	r3, r2
 80018ca:	d062      	beq.n	8001992 <HAL_RCC_OscConfig+0x116>
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d15e      	bne.n	8001992 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80018d4:	2301      	movs	r3, #1
 80018d6:	e2d9      	b.n	8001e8c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	685a      	ldr	r2, [r3, #4]
 80018dc:	2380      	movs	r3, #128	@ 0x80
 80018de:	025b      	lsls	r3, r3, #9
 80018e0:	429a      	cmp	r2, r3
 80018e2:	d107      	bne.n	80018f4 <HAL_RCC_OscConfig+0x78>
 80018e4:	4bb0      	ldr	r3, [pc, #704]	@ (8001ba8 <HAL_RCC_OscConfig+0x32c>)
 80018e6:	681a      	ldr	r2, [r3, #0]
 80018e8:	4baf      	ldr	r3, [pc, #700]	@ (8001ba8 <HAL_RCC_OscConfig+0x32c>)
 80018ea:	2180      	movs	r1, #128	@ 0x80
 80018ec:	0249      	lsls	r1, r1, #9
 80018ee:	430a      	orrs	r2, r1
 80018f0:	601a      	str	r2, [r3, #0]
 80018f2:	e020      	b.n	8001936 <HAL_RCC_OscConfig+0xba>
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	685a      	ldr	r2, [r3, #4]
 80018f8:	23a0      	movs	r3, #160	@ 0xa0
 80018fa:	02db      	lsls	r3, r3, #11
 80018fc:	429a      	cmp	r2, r3
 80018fe:	d10e      	bne.n	800191e <HAL_RCC_OscConfig+0xa2>
 8001900:	4ba9      	ldr	r3, [pc, #676]	@ (8001ba8 <HAL_RCC_OscConfig+0x32c>)
 8001902:	681a      	ldr	r2, [r3, #0]
 8001904:	4ba8      	ldr	r3, [pc, #672]	@ (8001ba8 <HAL_RCC_OscConfig+0x32c>)
 8001906:	2180      	movs	r1, #128	@ 0x80
 8001908:	02c9      	lsls	r1, r1, #11
 800190a:	430a      	orrs	r2, r1
 800190c:	601a      	str	r2, [r3, #0]
 800190e:	4ba6      	ldr	r3, [pc, #664]	@ (8001ba8 <HAL_RCC_OscConfig+0x32c>)
 8001910:	681a      	ldr	r2, [r3, #0]
 8001912:	4ba5      	ldr	r3, [pc, #660]	@ (8001ba8 <HAL_RCC_OscConfig+0x32c>)
 8001914:	2180      	movs	r1, #128	@ 0x80
 8001916:	0249      	lsls	r1, r1, #9
 8001918:	430a      	orrs	r2, r1
 800191a:	601a      	str	r2, [r3, #0]
 800191c:	e00b      	b.n	8001936 <HAL_RCC_OscConfig+0xba>
 800191e:	4ba2      	ldr	r3, [pc, #648]	@ (8001ba8 <HAL_RCC_OscConfig+0x32c>)
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	4ba1      	ldr	r3, [pc, #644]	@ (8001ba8 <HAL_RCC_OscConfig+0x32c>)
 8001924:	49a1      	ldr	r1, [pc, #644]	@ (8001bac <HAL_RCC_OscConfig+0x330>)
 8001926:	400a      	ands	r2, r1
 8001928:	601a      	str	r2, [r3, #0]
 800192a:	4b9f      	ldr	r3, [pc, #636]	@ (8001ba8 <HAL_RCC_OscConfig+0x32c>)
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	4b9e      	ldr	r3, [pc, #632]	@ (8001ba8 <HAL_RCC_OscConfig+0x32c>)
 8001930:	499f      	ldr	r1, [pc, #636]	@ (8001bb0 <HAL_RCC_OscConfig+0x334>)
 8001932:	400a      	ands	r2, r1
 8001934:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d014      	beq.n	8001968 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800193e:	f7ff fc69 	bl	8001214 <HAL_GetTick>
 8001942:	0003      	movs	r3, r0
 8001944:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001946:	e008      	b.n	800195a <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001948:	f7ff fc64 	bl	8001214 <HAL_GetTick>
 800194c:	0002      	movs	r2, r0
 800194e:	693b      	ldr	r3, [r7, #16]
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	2b64      	cmp	r3, #100	@ 0x64
 8001954:	d901      	bls.n	800195a <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001956:	2303      	movs	r3, #3
 8001958:	e298      	b.n	8001e8c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800195a:	4b93      	ldr	r3, [pc, #588]	@ (8001ba8 <HAL_RCC_OscConfig+0x32c>)
 800195c:	681a      	ldr	r2, [r3, #0]
 800195e:	2380      	movs	r3, #128	@ 0x80
 8001960:	029b      	lsls	r3, r3, #10
 8001962:	4013      	ands	r3, r2
 8001964:	d0f0      	beq.n	8001948 <HAL_RCC_OscConfig+0xcc>
 8001966:	e015      	b.n	8001994 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001968:	f7ff fc54 	bl	8001214 <HAL_GetTick>
 800196c:	0003      	movs	r3, r0
 800196e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001970:	e008      	b.n	8001984 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001972:	f7ff fc4f 	bl	8001214 <HAL_GetTick>
 8001976:	0002      	movs	r2, r0
 8001978:	693b      	ldr	r3, [r7, #16]
 800197a:	1ad3      	subs	r3, r2, r3
 800197c:	2b64      	cmp	r3, #100	@ 0x64
 800197e:	d901      	bls.n	8001984 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001980:	2303      	movs	r3, #3
 8001982:	e283      	b.n	8001e8c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001984:	4b88      	ldr	r3, [pc, #544]	@ (8001ba8 <HAL_RCC_OscConfig+0x32c>)
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	2380      	movs	r3, #128	@ 0x80
 800198a:	029b      	lsls	r3, r3, #10
 800198c:	4013      	ands	r3, r2
 800198e:	d1f0      	bne.n	8001972 <HAL_RCC_OscConfig+0xf6>
 8001990:	e000      	b.n	8001994 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001992:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	2202      	movs	r2, #2
 800199a:	4013      	ands	r3, r2
 800199c:	d100      	bne.n	80019a0 <HAL_RCC_OscConfig+0x124>
 800199e:	e099      	b.n	8001ad4 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80019a0:	4b81      	ldr	r3, [pc, #516]	@ (8001ba8 <HAL_RCC_OscConfig+0x32c>)
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	2238      	movs	r2, #56	@ 0x38
 80019a6:	4013      	ands	r3, r2
 80019a8:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80019aa:	4b7f      	ldr	r3, [pc, #508]	@ (8001ba8 <HAL_RCC_OscConfig+0x32c>)
 80019ac:	68db      	ldr	r3, [r3, #12]
 80019ae:	2203      	movs	r2, #3
 80019b0:	4013      	ands	r3, r2
 80019b2:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80019b4:	69bb      	ldr	r3, [r7, #24]
 80019b6:	2b10      	cmp	r3, #16
 80019b8:	d102      	bne.n	80019c0 <HAL_RCC_OscConfig+0x144>
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	2b02      	cmp	r3, #2
 80019be:	d002      	beq.n	80019c6 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80019c0:	69bb      	ldr	r3, [r7, #24]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d135      	bne.n	8001a32 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019c6:	4b78      	ldr	r3, [pc, #480]	@ (8001ba8 <HAL_RCC_OscConfig+0x32c>)
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	2380      	movs	r3, #128	@ 0x80
 80019cc:	00db      	lsls	r3, r3, #3
 80019ce:	4013      	ands	r3, r2
 80019d0:	d005      	beq.n	80019de <HAL_RCC_OscConfig+0x162>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	68db      	ldr	r3, [r3, #12]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d101      	bne.n	80019de <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80019da:	2301      	movs	r3, #1
 80019dc:	e256      	b.n	8001e8c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019de:	4b72      	ldr	r3, [pc, #456]	@ (8001ba8 <HAL_RCC_OscConfig+0x32c>)
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	4a74      	ldr	r2, [pc, #464]	@ (8001bb4 <HAL_RCC_OscConfig+0x338>)
 80019e4:	4013      	ands	r3, r2
 80019e6:	0019      	movs	r1, r3
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	695b      	ldr	r3, [r3, #20]
 80019ec:	021a      	lsls	r2, r3, #8
 80019ee:	4b6e      	ldr	r3, [pc, #440]	@ (8001ba8 <HAL_RCC_OscConfig+0x32c>)
 80019f0:	430a      	orrs	r2, r1
 80019f2:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80019f4:	69bb      	ldr	r3, [r7, #24]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d112      	bne.n	8001a20 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80019fa:	4b6b      	ldr	r3, [pc, #428]	@ (8001ba8 <HAL_RCC_OscConfig+0x32c>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a6e      	ldr	r2, [pc, #440]	@ (8001bb8 <HAL_RCC_OscConfig+0x33c>)
 8001a00:	4013      	ands	r3, r2
 8001a02:	0019      	movs	r1, r3
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	691a      	ldr	r2, [r3, #16]
 8001a08:	4b67      	ldr	r3, [pc, #412]	@ (8001ba8 <HAL_RCC_OscConfig+0x32c>)
 8001a0a:	430a      	orrs	r2, r1
 8001a0c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001a0e:	4b66      	ldr	r3, [pc, #408]	@ (8001ba8 <HAL_RCC_OscConfig+0x32c>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	0adb      	lsrs	r3, r3, #11
 8001a14:	2207      	movs	r2, #7
 8001a16:	4013      	ands	r3, r2
 8001a18:	4a68      	ldr	r2, [pc, #416]	@ (8001bbc <HAL_RCC_OscConfig+0x340>)
 8001a1a:	40da      	lsrs	r2, r3
 8001a1c:	4b68      	ldr	r3, [pc, #416]	@ (8001bc0 <HAL_RCC_OscConfig+0x344>)
 8001a1e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001a20:	4b68      	ldr	r3, [pc, #416]	@ (8001bc4 <HAL_RCC_OscConfig+0x348>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	0018      	movs	r0, r3
 8001a26:	f7ff fb99 	bl	800115c <HAL_InitTick>
 8001a2a:	1e03      	subs	r3, r0, #0
 8001a2c:	d051      	beq.n	8001ad2 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e22c      	b.n	8001e8c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	68db      	ldr	r3, [r3, #12]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d030      	beq.n	8001a9c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001a3a:	4b5b      	ldr	r3, [pc, #364]	@ (8001ba8 <HAL_RCC_OscConfig+0x32c>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4a5e      	ldr	r2, [pc, #376]	@ (8001bb8 <HAL_RCC_OscConfig+0x33c>)
 8001a40:	4013      	ands	r3, r2
 8001a42:	0019      	movs	r1, r3
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	691a      	ldr	r2, [r3, #16]
 8001a48:	4b57      	ldr	r3, [pc, #348]	@ (8001ba8 <HAL_RCC_OscConfig+0x32c>)
 8001a4a:	430a      	orrs	r2, r1
 8001a4c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001a4e:	4b56      	ldr	r3, [pc, #344]	@ (8001ba8 <HAL_RCC_OscConfig+0x32c>)
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	4b55      	ldr	r3, [pc, #340]	@ (8001ba8 <HAL_RCC_OscConfig+0x32c>)
 8001a54:	2180      	movs	r1, #128	@ 0x80
 8001a56:	0049      	lsls	r1, r1, #1
 8001a58:	430a      	orrs	r2, r1
 8001a5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a5c:	f7ff fbda 	bl	8001214 <HAL_GetTick>
 8001a60:	0003      	movs	r3, r0
 8001a62:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a64:	e008      	b.n	8001a78 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a66:	f7ff fbd5 	bl	8001214 <HAL_GetTick>
 8001a6a:	0002      	movs	r2, r0
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	1ad3      	subs	r3, r2, r3
 8001a70:	2b02      	cmp	r3, #2
 8001a72:	d901      	bls.n	8001a78 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001a74:	2303      	movs	r3, #3
 8001a76:	e209      	b.n	8001e8c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a78:	4b4b      	ldr	r3, [pc, #300]	@ (8001ba8 <HAL_RCC_OscConfig+0x32c>)
 8001a7a:	681a      	ldr	r2, [r3, #0]
 8001a7c:	2380      	movs	r3, #128	@ 0x80
 8001a7e:	00db      	lsls	r3, r3, #3
 8001a80:	4013      	ands	r3, r2
 8001a82:	d0f0      	beq.n	8001a66 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a84:	4b48      	ldr	r3, [pc, #288]	@ (8001ba8 <HAL_RCC_OscConfig+0x32c>)
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	4a4a      	ldr	r2, [pc, #296]	@ (8001bb4 <HAL_RCC_OscConfig+0x338>)
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	0019      	movs	r1, r3
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	695b      	ldr	r3, [r3, #20]
 8001a92:	021a      	lsls	r2, r3, #8
 8001a94:	4b44      	ldr	r3, [pc, #272]	@ (8001ba8 <HAL_RCC_OscConfig+0x32c>)
 8001a96:	430a      	orrs	r2, r1
 8001a98:	605a      	str	r2, [r3, #4]
 8001a9a:	e01b      	b.n	8001ad4 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001a9c:	4b42      	ldr	r3, [pc, #264]	@ (8001ba8 <HAL_RCC_OscConfig+0x32c>)
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	4b41      	ldr	r3, [pc, #260]	@ (8001ba8 <HAL_RCC_OscConfig+0x32c>)
 8001aa2:	4949      	ldr	r1, [pc, #292]	@ (8001bc8 <HAL_RCC_OscConfig+0x34c>)
 8001aa4:	400a      	ands	r2, r1
 8001aa6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aa8:	f7ff fbb4 	bl	8001214 <HAL_GetTick>
 8001aac:	0003      	movs	r3, r0
 8001aae:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ab0:	e008      	b.n	8001ac4 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ab2:	f7ff fbaf 	bl	8001214 <HAL_GetTick>
 8001ab6:	0002      	movs	r2, r0
 8001ab8:	693b      	ldr	r3, [r7, #16]
 8001aba:	1ad3      	subs	r3, r2, r3
 8001abc:	2b02      	cmp	r3, #2
 8001abe:	d901      	bls.n	8001ac4 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001ac0:	2303      	movs	r3, #3
 8001ac2:	e1e3      	b.n	8001e8c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ac4:	4b38      	ldr	r3, [pc, #224]	@ (8001ba8 <HAL_RCC_OscConfig+0x32c>)
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	2380      	movs	r3, #128	@ 0x80
 8001aca:	00db      	lsls	r3, r3, #3
 8001acc:	4013      	ands	r3, r2
 8001ace:	d1f0      	bne.n	8001ab2 <HAL_RCC_OscConfig+0x236>
 8001ad0:	e000      	b.n	8001ad4 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ad2:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	2208      	movs	r2, #8
 8001ada:	4013      	ands	r3, r2
 8001adc:	d047      	beq.n	8001b6e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001ade:	4b32      	ldr	r3, [pc, #200]	@ (8001ba8 <HAL_RCC_OscConfig+0x32c>)
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	2238      	movs	r2, #56	@ 0x38
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	2b18      	cmp	r3, #24
 8001ae8:	d10a      	bne.n	8001b00 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001aea:	4b2f      	ldr	r3, [pc, #188]	@ (8001ba8 <HAL_RCC_OscConfig+0x32c>)
 8001aec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001aee:	2202      	movs	r2, #2
 8001af0:	4013      	ands	r3, r2
 8001af2:	d03c      	beq.n	8001b6e <HAL_RCC_OscConfig+0x2f2>
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	699b      	ldr	r3, [r3, #24]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d138      	bne.n	8001b6e <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001afc:	2301      	movs	r3, #1
 8001afe:	e1c5      	b.n	8001e8c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	699b      	ldr	r3, [r3, #24]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d019      	beq.n	8001b3c <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001b08:	4b27      	ldr	r3, [pc, #156]	@ (8001ba8 <HAL_RCC_OscConfig+0x32c>)
 8001b0a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001b0c:	4b26      	ldr	r3, [pc, #152]	@ (8001ba8 <HAL_RCC_OscConfig+0x32c>)
 8001b0e:	2101      	movs	r1, #1
 8001b10:	430a      	orrs	r2, r1
 8001b12:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b14:	f7ff fb7e 	bl	8001214 <HAL_GetTick>
 8001b18:	0003      	movs	r3, r0
 8001b1a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b1c:	e008      	b.n	8001b30 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b1e:	f7ff fb79 	bl	8001214 <HAL_GetTick>
 8001b22:	0002      	movs	r2, r0
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	1ad3      	subs	r3, r2, r3
 8001b28:	2b02      	cmp	r3, #2
 8001b2a:	d901      	bls.n	8001b30 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001b2c:	2303      	movs	r3, #3
 8001b2e:	e1ad      	b.n	8001e8c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b30:	4b1d      	ldr	r3, [pc, #116]	@ (8001ba8 <HAL_RCC_OscConfig+0x32c>)
 8001b32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b34:	2202      	movs	r2, #2
 8001b36:	4013      	ands	r3, r2
 8001b38:	d0f1      	beq.n	8001b1e <HAL_RCC_OscConfig+0x2a2>
 8001b3a:	e018      	b.n	8001b6e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001b3c:	4b1a      	ldr	r3, [pc, #104]	@ (8001ba8 <HAL_RCC_OscConfig+0x32c>)
 8001b3e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001b40:	4b19      	ldr	r3, [pc, #100]	@ (8001ba8 <HAL_RCC_OscConfig+0x32c>)
 8001b42:	2101      	movs	r1, #1
 8001b44:	438a      	bics	r2, r1
 8001b46:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b48:	f7ff fb64 	bl	8001214 <HAL_GetTick>
 8001b4c:	0003      	movs	r3, r0
 8001b4e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b50:	e008      	b.n	8001b64 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b52:	f7ff fb5f 	bl	8001214 <HAL_GetTick>
 8001b56:	0002      	movs	r2, r0
 8001b58:	693b      	ldr	r3, [r7, #16]
 8001b5a:	1ad3      	subs	r3, r2, r3
 8001b5c:	2b02      	cmp	r3, #2
 8001b5e:	d901      	bls.n	8001b64 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001b60:	2303      	movs	r3, #3
 8001b62:	e193      	b.n	8001e8c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b64:	4b10      	ldr	r3, [pc, #64]	@ (8001ba8 <HAL_RCC_OscConfig+0x32c>)
 8001b66:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b68:	2202      	movs	r2, #2
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	d1f1      	bne.n	8001b52 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	2204      	movs	r2, #4
 8001b74:	4013      	ands	r3, r2
 8001b76:	d100      	bne.n	8001b7a <HAL_RCC_OscConfig+0x2fe>
 8001b78:	e0c6      	b.n	8001d08 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b7a:	231f      	movs	r3, #31
 8001b7c:	18fb      	adds	r3, r7, r3
 8001b7e:	2200      	movs	r2, #0
 8001b80:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001b82:	4b09      	ldr	r3, [pc, #36]	@ (8001ba8 <HAL_RCC_OscConfig+0x32c>)
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	2238      	movs	r2, #56	@ 0x38
 8001b88:	4013      	ands	r3, r2
 8001b8a:	2b20      	cmp	r3, #32
 8001b8c:	d11e      	bne.n	8001bcc <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001b8e:	4b06      	ldr	r3, [pc, #24]	@ (8001ba8 <HAL_RCC_OscConfig+0x32c>)
 8001b90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b92:	2202      	movs	r2, #2
 8001b94:	4013      	ands	r3, r2
 8001b96:	d100      	bne.n	8001b9a <HAL_RCC_OscConfig+0x31e>
 8001b98:	e0b6      	b.n	8001d08 <HAL_RCC_OscConfig+0x48c>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	689b      	ldr	r3, [r3, #8]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d000      	beq.n	8001ba4 <HAL_RCC_OscConfig+0x328>
 8001ba2:	e0b1      	b.n	8001d08 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	e171      	b.n	8001e8c <HAL_RCC_OscConfig+0x610>
 8001ba8:	40021000 	.word	0x40021000
 8001bac:	fffeffff 	.word	0xfffeffff
 8001bb0:	fffbffff 	.word	0xfffbffff
 8001bb4:	ffff80ff 	.word	0xffff80ff
 8001bb8:	ffffc7ff 	.word	0xffffc7ff
 8001bbc:	00f42400 	.word	0x00f42400
 8001bc0:	2000004c 	.word	0x2000004c
 8001bc4:	20000050 	.word	0x20000050
 8001bc8:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001bcc:	4bb1      	ldr	r3, [pc, #708]	@ (8001e94 <HAL_RCC_OscConfig+0x618>)
 8001bce:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001bd0:	2380      	movs	r3, #128	@ 0x80
 8001bd2:	055b      	lsls	r3, r3, #21
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	d101      	bne.n	8001bdc <HAL_RCC_OscConfig+0x360>
 8001bd8:	2301      	movs	r3, #1
 8001bda:	e000      	b.n	8001bde <HAL_RCC_OscConfig+0x362>
 8001bdc:	2300      	movs	r3, #0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d011      	beq.n	8001c06 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001be2:	4bac      	ldr	r3, [pc, #688]	@ (8001e94 <HAL_RCC_OscConfig+0x618>)
 8001be4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001be6:	4bab      	ldr	r3, [pc, #684]	@ (8001e94 <HAL_RCC_OscConfig+0x618>)
 8001be8:	2180      	movs	r1, #128	@ 0x80
 8001bea:	0549      	lsls	r1, r1, #21
 8001bec:	430a      	orrs	r2, r1
 8001bee:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001bf0:	4ba8      	ldr	r3, [pc, #672]	@ (8001e94 <HAL_RCC_OscConfig+0x618>)
 8001bf2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001bf4:	2380      	movs	r3, #128	@ 0x80
 8001bf6:	055b      	lsls	r3, r3, #21
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	60fb      	str	r3, [r7, #12]
 8001bfc:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001bfe:	231f      	movs	r3, #31
 8001c00:	18fb      	adds	r3, r7, r3
 8001c02:	2201      	movs	r2, #1
 8001c04:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c06:	4ba4      	ldr	r3, [pc, #656]	@ (8001e98 <HAL_RCC_OscConfig+0x61c>)
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	2380      	movs	r3, #128	@ 0x80
 8001c0c:	005b      	lsls	r3, r3, #1
 8001c0e:	4013      	ands	r3, r2
 8001c10:	d11a      	bne.n	8001c48 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c12:	4ba1      	ldr	r3, [pc, #644]	@ (8001e98 <HAL_RCC_OscConfig+0x61c>)
 8001c14:	681a      	ldr	r2, [r3, #0]
 8001c16:	4ba0      	ldr	r3, [pc, #640]	@ (8001e98 <HAL_RCC_OscConfig+0x61c>)
 8001c18:	2180      	movs	r1, #128	@ 0x80
 8001c1a:	0049      	lsls	r1, r1, #1
 8001c1c:	430a      	orrs	r2, r1
 8001c1e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001c20:	f7ff faf8 	bl	8001214 <HAL_GetTick>
 8001c24:	0003      	movs	r3, r0
 8001c26:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c28:	e008      	b.n	8001c3c <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c2a:	f7ff faf3 	bl	8001214 <HAL_GetTick>
 8001c2e:	0002      	movs	r2, r0
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	1ad3      	subs	r3, r2, r3
 8001c34:	2b02      	cmp	r3, #2
 8001c36:	d901      	bls.n	8001c3c <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001c38:	2303      	movs	r3, #3
 8001c3a:	e127      	b.n	8001e8c <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c3c:	4b96      	ldr	r3, [pc, #600]	@ (8001e98 <HAL_RCC_OscConfig+0x61c>)
 8001c3e:	681a      	ldr	r2, [r3, #0]
 8001c40:	2380      	movs	r3, #128	@ 0x80
 8001c42:	005b      	lsls	r3, r3, #1
 8001c44:	4013      	ands	r3, r2
 8001c46:	d0f0      	beq.n	8001c2a <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	2b01      	cmp	r3, #1
 8001c4e:	d106      	bne.n	8001c5e <HAL_RCC_OscConfig+0x3e2>
 8001c50:	4b90      	ldr	r3, [pc, #576]	@ (8001e94 <HAL_RCC_OscConfig+0x618>)
 8001c52:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001c54:	4b8f      	ldr	r3, [pc, #572]	@ (8001e94 <HAL_RCC_OscConfig+0x618>)
 8001c56:	2101      	movs	r1, #1
 8001c58:	430a      	orrs	r2, r1
 8001c5a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001c5c:	e01c      	b.n	8001c98 <HAL_RCC_OscConfig+0x41c>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	2b05      	cmp	r3, #5
 8001c64:	d10c      	bne.n	8001c80 <HAL_RCC_OscConfig+0x404>
 8001c66:	4b8b      	ldr	r3, [pc, #556]	@ (8001e94 <HAL_RCC_OscConfig+0x618>)
 8001c68:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001c6a:	4b8a      	ldr	r3, [pc, #552]	@ (8001e94 <HAL_RCC_OscConfig+0x618>)
 8001c6c:	2104      	movs	r1, #4
 8001c6e:	430a      	orrs	r2, r1
 8001c70:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001c72:	4b88      	ldr	r3, [pc, #544]	@ (8001e94 <HAL_RCC_OscConfig+0x618>)
 8001c74:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001c76:	4b87      	ldr	r3, [pc, #540]	@ (8001e94 <HAL_RCC_OscConfig+0x618>)
 8001c78:	2101      	movs	r1, #1
 8001c7a:	430a      	orrs	r2, r1
 8001c7c:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001c7e:	e00b      	b.n	8001c98 <HAL_RCC_OscConfig+0x41c>
 8001c80:	4b84      	ldr	r3, [pc, #528]	@ (8001e94 <HAL_RCC_OscConfig+0x618>)
 8001c82:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001c84:	4b83      	ldr	r3, [pc, #524]	@ (8001e94 <HAL_RCC_OscConfig+0x618>)
 8001c86:	2101      	movs	r1, #1
 8001c88:	438a      	bics	r2, r1
 8001c8a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001c8c:	4b81      	ldr	r3, [pc, #516]	@ (8001e94 <HAL_RCC_OscConfig+0x618>)
 8001c8e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001c90:	4b80      	ldr	r3, [pc, #512]	@ (8001e94 <HAL_RCC_OscConfig+0x618>)
 8001c92:	2104      	movs	r1, #4
 8001c94:	438a      	bics	r2, r1
 8001c96:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d014      	beq.n	8001cca <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ca0:	f7ff fab8 	bl	8001214 <HAL_GetTick>
 8001ca4:	0003      	movs	r3, r0
 8001ca6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ca8:	e009      	b.n	8001cbe <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001caa:	f7ff fab3 	bl	8001214 <HAL_GetTick>
 8001cae:	0002      	movs	r2, r0
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	1ad3      	subs	r3, r2, r3
 8001cb4:	4a79      	ldr	r2, [pc, #484]	@ (8001e9c <HAL_RCC_OscConfig+0x620>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d901      	bls.n	8001cbe <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001cba:	2303      	movs	r3, #3
 8001cbc:	e0e6      	b.n	8001e8c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cbe:	4b75      	ldr	r3, [pc, #468]	@ (8001e94 <HAL_RCC_OscConfig+0x618>)
 8001cc0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cc2:	2202      	movs	r2, #2
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	d0f0      	beq.n	8001caa <HAL_RCC_OscConfig+0x42e>
 8001cc8:	e013      	b.n	8001cf2 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cca:	f7ff faa3 	bl	8001214 <HAL_GetTick>
 8001cce:	0003      	movs	r3, r0
 8001cd0:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001cd2:	e009      	b.n	8001ce8 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cd4:	f7ff fa9e 	bl	8001214 <HAL_GetTick>
 8001cd8:	0002      	movs	r2, r0
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	4a6f      	ldr	r2, [pc, #444]	@ (8001e9c <HAL_RCC_OscConfig+0x620>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d901      	bls.n	8001ce8 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001ce4:	2303      	movs	r3, #3
 8001ce6:	e0d1      	b.n	8001e8c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ce8:	4b6a      	ldr	r3, [pc, #424]	@ (8001e94 <HAL_RCC_OscConfig+0x618>)
 8001cea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cec:	2202      	movs	r2, #2
 8001cee:	4013      	ands	r3, r2
 8001cf0:	d1f0      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001cf2:	231f      	movs	r3, #31
 8001cf4:	18fb      	adds	r3, r7, r3
 8001cf6:	781b      	ldrb	r3, [r3, #0]
 8001cf8:	2b01      	cmp	r3, #1
 8001cfa:	d105      	bne.n	8001d08 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001cfc:	4b65      	ldr	r3, [pc, #404]	@ (8001e94 <HAL_RCC_OscConfig+0x618>)
 8001cfe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001d00:	4b64      	ldr	r3, [pc, #400]	@ (8001e94 <HAL_RCC_OscConfig+0x618>)
 8001d02:	4967      	ldr	r1, [pc, #412]	@ (8001ea0 <HAL_RCC_OscConfig+0x624>)
 8001d04:	400a      	ands	r2, r1
 8001d06:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	69db      	ldr	r3, [r3, #28]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d100      	bne.n	8001d12 <HAL_RCC_OscConfig+0x496>
 8001d10:	e0bb      	b.n	8001e8a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d12:	4b60      	ldr	r3, [pc, #384]	@ (8001e94 <HAL_RCC_OscConfig+0x618>)
 8001d14:	689b      	ldr	r3, [r3, #8]
 8001d16:	2238      	movs	r2, #56	@ 0x38
 8001d18:	4013      	ands	r3, r2
 8001d1a:	2b10      	cmp	r3, #16
 8001d1c:	d100      	bne.n	8001d20 <HAL_RCC_OscConfig+0x4a4>
 8001d1e:	e07b      	b.n	8001e18 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	69db      	ldr	r3, [r3, #28]
 8001d24:	2b02      	cmp	r3, #2
 8001d26:	d156      	bne.n	8001dd6 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d28:	4b5a      	ldr	r3, [pc, #360]	@ (8001e94 <HAL_RCC_OscConfig+0x618>)
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	4b59      	ldr	r3, [pc, #356]	@ (8001e94 <HAL_RCC_OscConfig+0x618>)
 8001d2e:	495d      	ldr	r1, [pc, #372]	@ (8001ea4 <HAL_RCC_OscConfig+0x628>)
 8001d30:	400a      	ands	r2, r1
 8001d32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d34:	f7ff fa6e 	bl	8001214 <HAL_GetTick>
 8001d38:	0003      	movs	r3, r0
 8001d3a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d3c:	e008      	b.n	8001d50 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d3e:	f7ff fa69 	bl	8001214 <HAL_GetTick>
 8001d42:	0002      	movs	r2, r0
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	1ad3      	subs	r3, r2, r3
 8001d48:	2b02      	cmp	r3, #2
 8001d4a:	d901      	bls.n	8001d50 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001d4c:	2303      	movs	r3, #3
 8001d4e:	e09d      	b.n	8001e8c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d50:	4b50      	ldr	r3, [pc, #320]	@ (8001e94 <HAL_RCC_OscConfig+0x618>)
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	2380      	movs	r3, #128	@ 0x80
 8001d56:	049b      	lsls	r3, r3, #18
 8001d58:	4013      	ands	r3, r2
 8001d5a:	d1f0      	bne.n	8001d3e <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d5c:	4b4d      	ldr	r3, [pc, #308]	@ (8001e94 <HAL_RCC_OscConfig+0x618>)
 8001d5e:	68db      	ldr	r3, [r3, #12]
 8001d60:	4a51      	ldr	r2, [pc, #324]	@ (8001ea8 <HAL_RCC_OscConfig+0x62c>)
 8001d62:	4013      	ands	r3, r2
 8001d64:	0019      	movs	r1, r3
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6a1a      	ldr	r2, [r3, #32]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d6e:	431a      	orrs	r2, r3
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d74:	021b      	lsls	r3, r3, #8
 8001d76:	431a      	orrs	r2, r3
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d7c:	431a      	orrs	r2, r3
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d82:	431a      	orrs	r2, r3
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d88:	431a      	orrs	r2, r3
 8001d8a:	4b42      	ldr	r3, [pc, #264]	@ (8001e94 <HAL_RCC_OscConfig+0x618>)
 8001d8c:	430a      	orrs	r2, r1
 8001d8e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d90:	4b40      	ldr	r3, [pc, #256]	@ (8001e94 <HAL_RCC_OscConfig+0x618>)
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	4b3f      	ldr	r3, [pc, #252]	@ (8001e94 <HAL_RCC_OscConfig+0x618>)
 8001d96:	2180      	movs	r1, #128	@ 0x80
 8001d98:	0449      	lsls	r1, r1, #17
 8001d9a:	430a      	orrs	r2, r1
 8001d9c:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001d9e:	4b3d      	ldr	r3, [pc, #244]	@ (8001e94 <HAL_RCC_OscConfig+0x618>)
 8001da0:	68da      	ldr	r2, [r3, #12]
 8001da2:	4b3c      	ldr	r3, [pc, #240]	@ (8001e94 <HAL_RCC_OscConfig+0x618>)
 8001da4:	2180      	movs	r1, #128	@ 0x80
 8001da6:	0549      	lsls	r1, r1, #21
 8001da8:	430a      	orrs	r2, r1
 8001daa:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dac:	f7ff fa32 	bl	8001214 <HAL_GetTick>
 8001db0:	0003      	movs	r3, r0
 8001db2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001db4:	e008      	b.n	8001dc8 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001db6:	f7ff fa2d 	bl	8001214 <HAL_GetTick>
 8001dba:	0002      	movs	r2, r0
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	1ad3      	subs	r3, r2, r3
 8001dc0:	2b02      	cmp	r3, #2
 8001dc2:	d901      	bls.n	8001dc8 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8001dc4:	2303      	movs	r3, #3
 8001dc6:	e061      	b.n	8001e8c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dc8:	4b32      	ldr	r3, [pc, #200]	@ (8001e94 <HAL_RCC_OscConfig+0x618>)
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	2380      	movs	r3, #128	@ 0x80
 8001dce:	049b      	lsls	r3, r3, #18
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	d0f0      	beq.n	8001db6 <HAL_RCC_OscConfig+0x53a>
 8001dd4:	e059      	b.n	8001e8a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dd6:	4b2f      	ldr	r3, [pc, #188]	@ (8001e94 <HAL_RCC_OscConfig+0x618>)
 8001dd8:	681a      	ldr	r2, [r3, #0]
 8001dda:	4b2e      	ldr	r3, [pc, #184]	@ (8001e94 <HAL_RCC_OscConfig+0x618>)
 8001ddc:	4931      	ldr	r1, [pc, #196]	@ (8001ea4 <HAL_RCC_OscConfig+0x628>)
 8001dde:	400a      	ands	r2, r1
 8001de0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001de2:	f7ff fa17 	bl	8001214 <HAL_GetTick>
 8001de6:	0003      	movs	r3, r0
 8001de8:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001dea:	e008      	b.n	8001dfe <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dec:	f7ff fa12 	bl	8001214 <HAL_GetTick>
 8001df0:	0002      	movs	r2, r0
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	2b02      	cmp	r3, #2
 8001df8:	d901      	bls.n	8001dfe <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	e046      	b.n	8001e8c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001dfe:	4b25      	ldr	r3, [pc, #148]	@ (8001e94 <HAL_RCC_OscConfig+0x618>)
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	2380      	movs	r3, #128	@ 0x80
 8001e04:	049b      	lsls	r3, r3, #18
 8001e06:	4013      	ands	r3, r2
 8001e08:	d1f0      	bne.n	8001dec <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001e0a:	4b22      	ldr	r3, [pc, #136]	@ (8001e94 <HAL_RCC_OscConfig+0x618>)
 8001e0c:	68da      	ldr	r2, [r3, #12]
 8001e0e:	4b21      	ldr	r3, [pc, #132]	@ (8001e94 <HAL_RCC_OscConfig+0x618>)
 8001e10:	4926      	ldr	r1, [pc, #152]	@ (8001eac <HAL_RCC_OscConfig+0x630>)
 8001e12:	400a      	ands	r2, r1
 8001e14:	60da      	str	r2, [r3, #12]
 8001e16:	e038      	b.n	8001e8a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	69db      	ldr	r3, [r3, #28]
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	d101      	bne.n	8001e24 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001e20:	2301      	movs	r3, #1
 8001e22:	e033      	b.n	8001e8c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001e24:	4b1b      	ldr	r3, [pc, #108]	@ (8001e94 <HAL_RCC_OscConfig+0x618>)
 8001e26:	68db      	ldr	r3, [r3, #12]
 8001e28:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	2203      	movs	r2, #3
 8001e2e:	401a      	ands	r2, r3
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6a1b      	ldr	r3, [r3, #32]
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d126      	bne.n	8001e86 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	2270      	movs	r2, #112	@ 0x70
 8001e3c:	401a      	ands	r2, r3
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e42:	429a      	cmp	r2, r3
 8001e44:	d11f      	bne.n	8001e86 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e46:	697a      	ldr	r2, [r7, #20]
 8001e48:	23fe      	movs	r3, #254	@ 0xfe
 8001e4a:	01db      	lsls	r3, r3, #7
 8001e4c:	401a      	ands	r2, r3
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e52:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001e54:	429a      	cmp	r2, r3
 8001e56:	d116      	bne.n	8001e86 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001e58:	697a      	ldr	r2, [r7, #20]
 8001e5a:	23f8      	movs	r3, #248	@ 0xf8
 8001e5c:	039b      	lsls	r3, r3, #14
 8001e5e:	401a      	ands	r2, r3
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e64:	429a      	cmp	r2, r3
 8001e66:	d10e      	bne.n	8001e86 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001e68:	697a      	ldr	r2, [r7, #20]
 8001e6a:	23e0      	movs	r3, #224	@ 0xe0
 8001e6c:	051b      	lsls	r3, r3, #20
 8001e6e:	401a      	ands	r2, r3
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d106      	bne.n	8001e86 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	0f5b      	lsrs	r3, r3, #29
 8001e7c:	075a      	lsls	r2, r3, #29
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001e82:	429a      	cmp	r2, r3
 8001e84:	d001      	beq.n	8001e8a <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	e000      	b.n	8001e8c <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8001e8a:	2300      	movs	r3, #0
}
 8001e8c:	0018      	movs	r0, r3
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	b008      	add	sp, #32
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	40021000 	.word	0x40021000
 8001e98:	40007000 	.word	0x40007000
 8001e9c:	00001388 	.word	0x00001388
 8001ea0:	efffffff 	.word	0xefffffff
 8001ea4:	feffffff 	.word	0xfeffffff
 8001ea8:	11c1808c 	.word	0x11c1808c
 8001eac:	eefefffc 	.word	0xeefefffc

08001eb0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b084      	sub	sp, #16
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
 8001eb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d101      	bne.n	8001ec4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	e0e9      	b.n	8002098 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ec4:	4b76      	ldr	r3, [pc, #472]	@ (80020a0 <HAL_RCC_ClockConfig+0x1f0>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	2207      	movs	r2, #7
 8001eca:	4013      	ands	r3, r2
 8001ecc:	683a      	ldr	r2, [r7, #0]
 8001ece:	429a      	cmp	r2, r3
 8001ed0:	d91e      	bls.n	8001f10 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ed2:	4b73      	ldr	r3, [pc, #460]	@ (80020a0 <HAL_RCC_ClockConfig+0x1f0>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	2207      	movs	r2, #7
 8001ed8:	4393      	bics	r3, r2
 8001eda:	0019      	movs	r1, r3
 8001edc:	4b70      	ldr	r3, [pc, #448]	@ (80020a0 <HAL_RCC_ClockConfig+0x1f0>)
 8001ede:	683a      	ldr	r2, [r7, #0]
 8001ee0:	430a      	orrs	r2, r1
 8001ee2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001ee4:	f7ff f996 	bl	8001214 <HAL_GetTick>
 8001ee8:	0003      	movs	r3, r0
 8001eea:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001eec:	e009      	b.n	8001f02 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001eee:	f7ff f991 	bl	8001214 <HAL_GetTick>
 8001ef2:	0002      	movs	r2, r0
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	1ad3      	subs	r3, r2, r3
 8001ef8:	4a6a      	ldr	r2, [pc, #424]	@ (80020a4 <HAL_RCC_ClockConfig+0x1f4>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d901      	bls.n	8001f02 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001efe:	2303      	movs	r3, #3
 8001f00:	e0ca      	b.n	8002098 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001f02:	4b67      	ldr	r3, [pc, #412]	@ (80020a0 <HAL_RCC_ClockConfig+0x1f0>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	2207      	movs	r2, #7
 8001f08:	4013      	ands	r3, r2
 8001f0a:	683a      	ldr	r2, [r7, #0]
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	d1ee      	bne.n	8001eee <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	2202      	movs	r2, #2
 8001f16:	4013      	ands	r3, r2
 8001f18:	d015      	beq.n	8001f46 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	2204      	movs	r2, #4
 8001f20:	4013      	ands	r3, r2
 8001f22:	d006      	beq.n	8001f32 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001f24:	4b60      	ldr	r3, [pc, #384]	@ (80020a8 <HAL_RCC_ClockConfig+0x1f8>)
 8001f26:	689a      	ldr	r2, [r3, #8]
 8001f28:	4b5f      	ldr	r3, [pc, #380]	@ (80020a8 <HAL_RCC_ClockConfig+0x1f8>)
 8001f2a:	21e0      	movs	r1, #224	@ 0xe0
 8001f2c:	01c9      	lsls	r1, r1, #7
 8001f2e:	430a      	orrs	r2, r1
 8001f30:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f32:	4b5d      	ldr	r3, [pc, #372]	@ (80020a8 <HAL_RCC_ClockConfig+0x1f8>)
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	4a5d      	ldr	r2, [pc, #372]	@ (80020ac <HAL_RCC_ClockConfig+0x1fc>)
 8001f38:	4013      	ands	r3, r2
 8001f3a:	0019      	movs	r1, r3
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	689a      	ldr	r2, [r3, #8]
 8001f40:	4b59      	ldr	r3, [pc, #356]	@ (80020a8 <HAL_RCC_ClockConfig+0x1f8>)
 8001f42:	430a      	orrs	r2, r1
 8001f44:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	d057      	beq.n	8002000 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	d107      	bne.n	8001f68 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f58:	4b53      	ldr	r3, [pc, #332]	@ (80020a8 <HAL_RCC_ClockConfig+0x1f8>)
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	2380      	movs	r3, #128	@ 0x80
 8001f5e:	029b      	lsls	r3, r3, #10
 8001f60:	4013      	ands	r3, r2
 8001f62:	d12b      	bne.n	8001fbc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001f64:	2301      	movs	r3, #1
 8001f66:	e097      	b.n	8002098 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	2b02      	cmp	r3, #2
 8001f6e:	d107      	bne.n	8001f80 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f70:	4b4d      	ldr	r3, [pc, #308]	@ (80020a8 <HAL_RCC_ClockConfig+0x1f8>)
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	2380      	movs	r3, #128	@ 0x80
 8001f76:	049b      	lsls	r3, r3, #18
 8001f78:	4013      	ands	r3, r2
 8001f7a:	d11f      	bne.n	8001fbc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	e08b      	b.n	8002098 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d107      	bne.n	8001f98 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f88:	4b47      	ldr	r3, [pc, #284]	@ (80020a8 <HAL_RCC_ClockConfig+0x1f8>)
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	2380      	movs	r3, #128	@ 0x80
 8001f8e:	00db      	lsls	r3, r3, #3
 8001f90:	4013      	ands	r3, r2
 8001f92:	d113      	bne.n	8001fbc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001f94:	2301      	movs	r3, #1
 8001f96:	e07f      	b.n	8002098 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	2b03      	cmp	r3, #3
 8001f9e:	d106      	bne.n	8001fae <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001fa0:	4b41      	ldr	r3, [pc, #260]	@ (80020a8 <HAL_RCC_ClockConfig+0x1f8>)
 8001fa2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001fa4:	2202      	movs	r2, #2
 8001fa6:	4013      	ands	r3, r2
 8001fa8:	d108      	bne.n	8001fbc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e074      	b.n	8002098 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fae:	4b3e      	ldr	r3, [pc, #248]	@ (80020a8 <HAL_RCC_ClockConfig+0x1f8>)
 8001fb0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fb2:	2202      	movs	r2, #2
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	d101      	bne.n	8001fbc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	e06d      	b.n	8002098 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001fbc:	4b3a      	ldr	r3, [pc, #232]	@ (80020a8 <HAL_RCC_ClockConfig+0x1f8>)
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	2207      	movs	r2, #7
 8001fc2:	4393      	bics	r3, r2
 8001fc4:	0019      	movs	r1, r3
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	685a      	ldr	r2, [r3, #4]
 8001fca:	4b37      	ldr	r3, [pc, #220]	@ (80020a8 <HAL_RCC_ClockConfig+0x1f8>)
 8001fcc:	430a      	orrs	r2, r1
 8001fce:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001fd0:	f7ff f920 	bl	8001214 <HAL_GetTick>
 8001fd4:	0003      	movs	r3, r0
 8001fd6:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fd8:	e009      	b.n	8001fee <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fda:	f7ff f91b 	bl	8001214 <HAL_GetTick>
 8001fde:	0002      	movs	r2, r0
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	1ad3      	subs	r3, r2, r3
 8001fe4:	4a2f      	ldr	r2, [pc, #188]	@ (80020a4 <HAL_RCC_ClockConfig+0x1f4>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d901      	bls.n	8001fee <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001fea:	2303      	movs	r3, #3
 8001fec:	e054      	b.n	8002098 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fee:	4b2e      	ldr	r3, [pc, #184]	@ (80020a8 <HAL_RCC_ClockConfig+0x1f8>)
 8001ff0:	689b      	ldr	r3, [r3, #8]
 8001ff2:	2238      	movs	r2, #56	@ 0x38
 8001ff4:	401a      	ands	r2, r3
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	00db      	lsls	r3, r3, #3
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d1ec      	bne.n	8001fda <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002000:	4b27      	ldr	r3, [pc, #156]	@ (80020a0 <HAL_RCC_ClockConfig+0x1f0>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	2207      	movs	r2, #7
 8002006:	4013      	ands	r3, r2
 8002008:	683a      	ldr	r2, [r7, #0]
 800200a:	429a      	cmp	r2, r3
 800200c:	d21e      	bcs.n	800204c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800200e:	4b24      	ldr	r3, [pc, #144]	@ (80020a0 <HAL_RCC_ClockConfig+0x1f0>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	2207      	movs	r2, #7
 8002014:	4393      	bics	r3, r2
 8002016:	0019      	movs	r1, r3
 8002018:	4b21      	ldr	r3, [pc, #132]	@ (80020a0 <HAL_RCC_ClockConfig+0x1f0>)
 800201a:	683a      	ldr	r2, [r7, #0]
 800201c:	430a      	orrs	r2, r1
 800201e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002020:	f7ff f8f8 	bl	8001214 <HAL_GetTick>
 8002024:	0003      	movs	r3, r0
 8002026:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002028:	e009      	b.n	800203e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800202a:	f7ff f8f3 	bl	8001214 <HAL_GetTick>
 800202e:	0002      	movs	r2, r0
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	1ad3      	subs	r3, r2, r3
 8002034:	4a1b      	ldr	r2, [pc, #108]	@ (80020a4 <HAL_RCC_ClockConfig+0x1f4>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d901      	bls.n	800203e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800203a:	2303      	movs	r3, #3
 800203c:	e02c      	b.n	8002098 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800203e:	4b18      	ldr	r3, [pc, #96]	@ (80020a0 <HAL_RCC_ClockConfig+0x1f0>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	2207      	movs	r2, #7
 8002044:	4013      	ands	r3, r2
 8002046:	683a      	ldr	r2, [r7, #0]
 8002048:	429a      	cmp	r2, r3
 800204a:	d1ee      	bne.n	800202a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	2204      	movs	r2, #4
 8002052:	4013      	ands	r3, r2
 8002054:	d009      	beq.n	800206a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002056:	4b14      	ldr	r3, [pc, #80]	@ (80020a8 <HAL_RCC_ClockConfig+0x1f8>)
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	4a15      	ldr	r2, [pc, #84]	@ (80020b0 <HAL_RCC_ClockConfig+0x200>)
 800205c:	4013      	ands	r3, r2
 800205e:	0019      	movs	r1, r3
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	68da      	ldr	r2, [r3, #12]
 8002064:	4b10      	ldr	r3, [pc, #64]	@ (80020a8 <HAL_RCC_ClockConfig+0x1f8>)
 8002066:	430a      	orrs	r2, r1
 8002068:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800206a:	f000 f829 	bl	80020c0 <HAL_RCC_GetSysClockFreq>
 800206e:	0001      	movs	r1, r0
 8002070:	4b0d      	ldr	r3, [pc, #52]	@ (80020a8 <HAL_RCC_ClockConfig+0x1f8>)
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	0a1b      	lsrs	r3, r3, #8
 8002076:	220f      	movs	r2, #15
 8002078:	401a      	ands	r2, r3
 800207a:	4b0e      	ldr	r3, [pc, #56]	@ (80020b4 <HAL_RCC_ClockConfig+0x204>)
 800207c:	0092      	lsls	r2, r2, #2
 800207e:	58d3      	ldr	r3, [r2, r3]
 8002080:	221f      	movs	r2, #31
 8002082:	4013      	ands	r3, r2
 8002084:	000a      	movs	r2, r1
 8002086:	40da      	lsrs	r2, r3
 8002088:	4b0b      	ldr	r3, [pc, #44]	@ (80020b8 <HAL_RCC_ClockConfig+0x208>)
 800208a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800208c:	4b0b      	ldr	r3, [pc, #44]	@ (80020bc <HAL_RCC_ClockConfig+0x20c>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	0018      	movs	r0, r3
 8002092:	f7ff f863 	bl	800115c <HAL_InitTick>
 8002096:	0003      	movs	r3, r0
}
 8002098:	0018      	movs	r0, r3
 800209a:	46bd      	mov	sp, r7
 800209c:	b004      	add	sp, #16
 800209e:	bd80      	pop	{r7, pc}
 80020a0:	40022000 	.word	0x40022000
 80020a4:	00001388 	.word	0x00001388
 80020a8:	40021000 	.word	0x40021000
 80020ac:	fffff0ff 	.word	0xfffff0ff
 80020b0:	ffff8fff 	.word	0xffff8fff
 80020b4:	08003bc8 	.word	0x08003bc8
 80020b8:	2000004c 	.word	0x2000004c
 80020bc:	20000050 	.word	0x20000050

080020c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b086      	sub	sp, #24
 80020c4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80020c6:	4b3c      	ldr	r3, [pc, #240]	@ (80021b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	2238      	movs	r2, #56	@ 0x38
 80020cc:	4013      	ands	r3, r2
 80020ce:	d10f      	bne.n	80020f0 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80020d0:	4b39      	ldr	r3, [pc, #228]	@ (80021b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	0adb      	lsrs	r3, r3, #11
 80020d6:	2207      	movs	r2, #7
 80020d8:	4013      	ands	r3, r2
 80020da:	2201      	movs	r2, #1
 80020dc:	409a      	lsls	r2, r3
 80020de:	0013      	movs	r3, r2
 80020e0:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80020e2:	6839      	ldr	r1, [r7, #0]
 80020e4:	4835      	ldr	r0, [pc, #212]	@ (80021bc <HAL_RCC_GetSysClockFreq+0xfc>)
 80020e6:	f7fe f80d 	bl	8000104 <__udivsi3>
 80020ea:	0003      	movs	r3, r0
 80020ec:	613b      	str	r3, [r7, #16]
 80020ee:	e05d      	b.n	80021ac <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80020f0:	4b31      	ldr	r3, [pc, #196]	@ (80021b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	2238      	movs	r2, #56	@ 0x38
 80020f6:	4013      	ands	r3, r2
 80020f8:	2b08      	cmp	r3, #8
 80020fa:	d102      	bne.n	8002102 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80020fc:	4b30      	ldr	r3, [pc, #192]	@ (80021c0 <HAL_RCC_GetSysClockFreq+0x100>)
 80020fe:	613b      	str	r3, [r7, #16]
 8002100:	e054      	b.n	80021ac <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002102:	4b2d      	ldr	r3, [pc, #180]	@ (80021b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	2238      	movs	r2, #56	@ 0x38
 8002108:	4013      	ands	r3, r2
 800210a:	2b10      	cmp	r3, #16
 800210c:	d138      	bne.n	8002180 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800210e:	4b2a      	ldr	r3, [pc, #168]	@ (80021b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002110:	68db      	ldr	r3, [r3, #12]
 8002112:	2203      	movs	r2, #3
 8002114:	4013      	ands	r3, r2
 8002116:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002118:	4b27      	ldr	r3, [pc, #156]	@ (80021b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800211a:	68db      	ldr	r3, [r3, #12]
 800211c:	091b      	lsrs	r3, r3, #4
 800211e:	2207      	movs	r2, #7
 8002120:	4013      	ands	r3, r2
 8002122:	3301      	adds	r3, #1
 8002124:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	2b03      	cmp	r3, #3
 800212a:	d10d      	bne.n	8002148 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800212c:	68b9      	ldr	r1, [r7, #8]
 800212e:	4824      	ldr	r0, [pc, #144]	@ (80021c0 <HAL_RCC_GetSysClockFreq+0x100>)
 8002130:	f7fd ffe8 	bl	8000104 <__udivsi3>
 8002134:	0003      	movs	r3, r0
 8002136:	0019      	movs	r1, r3
 8002138:	4b1f      	ldr	r3, [pc, #124]	@ (80021b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800213a:	68db      	ldr	r3, [r3, #12]
 800213c:	0a1b      	lsrs	r3, r3, #8
 800213e:	227f      	movs	r2, #127	@ 0x7f
 8002140:	4013      	ands	r3, r2
 8002142:	434b      	muls	r3, r1
 8002144:	617b      	str	r3, [r7, #20]
        break;
 8002146:	e00d      	b.n	8002164 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002148:	68b9      	ldr	r1, [r7, #8]
 800214a:	481c      	ldr	r0, [pc, #112]	@ (80021bc <HAL_RCC_GetSysClockFreq+0xfc>)
 800214c:	f7fd ffda 	bl	8000104 <__udivsi3>
 8002150:	0003      	movs	r3, r0
 8002152:	0019      	movs	r1, r3
 8002154:	4b18      	ldr	r3, [pc, #96]	@ (80021b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002156:	68db      	ldr	r3, [r3, #12]
 8002158:	0a1b      	lsrs	r3, r3, #8
 800215a:	227f      	movs	r2, #127	@ 0x7f
 800215c:	4013      	ands	r3, r2
 800215e:	434b      	muls	r3, r1
 8002160:	617b      	str	r3, [r7, #20]
        break;
 8002162:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002164:	4b14      	ldr	r3, [pc, #80]	@ (80021b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002166:	68db      	ldr	r3, [r3, #12]
 8002168:	0f5b      	lsrs	r3, r3, #29
 800216a:	2207      	movs	r2, #7
 800216c:	4013      	ands	r3, r2
 800216e:	3301      	adds	r3, #1
 8002170:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002172:	6879      	ldr	r1, [r7, #4]
 8002174:	6978      	ldr	r0, [r7, #20]
 8002176:	f7fd ffc5 	bl	8000104 <__udivsi3>
 800217a:	0003      	movs	r3, r0
 800217c:	613b      	str	r3, [r7, #16]
 800217e:	e015      	b.n	80021ac <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002180:	4b0d      	ldr	r3, [pc, #52]	@ (80021b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	2238      	movs	r2, #56	@ 0x38
 8002186:	4013      	ands	r3, r2
 8002188:	2b20      	cmp	r3, #32
 800218a:	d103      	bne.n	8002194 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800218c:	2380      	movs	r3, #128	@ 0x80
 800218e:	021b      	lsls	r3, r3, #8
 8002190:	613b      	str	r3, [r7, #16]
 8002192:	e00b      	b.n	80021ac <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002194:	4b08      	ldr	r3, [pc, #32]	@ (80021b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	2238      	movs	r2, #56	@ 0x38
 800219a:	4013      	ands	r3, r2
 800219c:	2b18      	cmp	r3, #24
 800219e:	d103      	bne.n	80021a8 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80021a0:	23fa      	movs	r3, #250	@ 0xfa
 80021a2:	01db      	lsls	r3, r3, #7
 80021a4:	613b      	str	r3, [r7, #16]
 80021a6:	e001      	b.n	80021ac <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80021a8:	2300      	movs	r3, #0
 80021aa:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80021ac:	693b      	ldr	r3, [r7, #16]
}
 80021ae:	0018      	movs	r0, r3
 80021b0:	46bd      	mov	sp, r7
 80021b2:	b006      	add	sp, #24
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	46c0      	nop			@ (mov r8, r8)
 80021b8:	40021000 	.word	0x40021000
 80021bc:	00f42400 	.word	0x00f42400
 80021c0:	007a1200 	.word	0x007a1200

080021c4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021c8:	4b02      	ldr	r3, [pc, #8]	@ (80021d4 <HAL_RCC_GetHCLKFreq+0x10>)
 80021ca:	681b      	ldr	r3, [r3, #0]
}
 80021cc:	0018      	movs	r0, r3
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	46c0      	nop			@ (mov r8, r8)
 80021d4:	2000004c 	.word	0x2000004c

080021d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021d8:	b5b0      	push	{r4, r5, r7, lr}
 80021da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80021dc:	f7ff fff2 	bl	80021c4 <HAL_RCC_GetHCLKFreq>
 80021e0:	0004      	movs	r4, r0
 80021e2:	f7ff fb3f 	bl	8001864 <LL_RCC_GetAPB1Prescaler>
 80021e6:	0003      	movs	r3, r0
 80021e8:	0b1a      	lsrs	r2, r3, #12
 80021ea:	4b05      	ldr	r3, [pc, #20]	@ (8002200 <HAL_RCC_GetPCLK1Freq+0x28>)
 80021ec:	0092      	lsls	r2, r2, #2
 80021ee:	58d3      	ldr	r3, [r2, r3]
 80021f0:	221f      	movs	r2, #31
 80021f2:	4013      	ands	r3, r2
 80021f4:	40dc      	lsrs	r4, r3
 80021f6:	0023      	movs	r3, r4
}
 80021f8:	0018      	movs	r0, r3
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bdb0      	pop	{r4, r5, r7, pc}
 80021fe:	46c0      	nop			@ (mov r8, r8)
 8002200:	08003c08 	.word	0x08003c08

08002204 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b086      	sub	sp, #24
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 800220c:	2313      	movs	r3, #19
 800220e:	18fb      	adds	r3, r7, r3
 8002210:	2200      	movs	r2, #0
 8002212:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002214:	2312      	movs	r3, #18
 8002216:	18fb      	adds	r3, r7, r3
 8002218:	2200      	movs	r2, #0
 800221a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	2380      	movs	r3, #128	@ 0x80
 8002222:	029b      	lsls	r3, r3, #10
 8002224:	4013      	ands	r3, r2
 8002226:	d100      	bne.n	800222a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002228:	e0a3      	b.n	8002372 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800222a:	2011      	movs	r0, #17
 800222c:	183b      	adds	r3, r7, r0
 800222e:	2200      	movs	r2, #0
 8002230:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002232:	4bc3      	ldr	r3, [pc, #780]	@ (8002540 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002234:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002236:	2380      	movs	r3, #128	@ 0x80
 8002238:	055b      	lsls	r3, r3, #21
 800223a:	4013      	ands	r3, r2
 800223c:	d110      	bne.n	8002260 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800223e:	4bc0      	ldr	r3, [pc, #768]	@ (8002540 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002240:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002242:	4bbf      	ldr	r3, [pc, #764]	@ (8002540 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002244:	2180      	movs	r1, #128	@ 0x80
 8002246:	0549      	lsls	r1, r1, #21
 8002248:	430a      	orrs	r2, r1
 800224a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800224c:	4bbc      	ldr	r3, [pc, #752]	@ (8002540 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800224e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002250:	2380      	movs	r3, #128	@ 0x80
 8002252:	055b      	lsls	r3, r3, #21
 8002254:	4013      	ands	r3, r2
 8002256:	60bb      	str	r3, [r7, #8]
 8002258:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800225a:	183b      	adds	r3, r7, r0
 800225c:	2201      	movs	r2, #1
 800225e:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002260:	4bb8      	ldr	r3, [pc, #736]	@ (8002544 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002262:	681a      	ldr	r2, [r3, #0]
 8002264:	4bb7      	ldr	r3, [pc, #732]	@ (8002544 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002266:	2180      	movs	r1, #128	@ 0x80
 8002268:	0049      	lsls	r1, r1, #1
 800226a:	430a      	orrs	r2, r1
 800226c:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800226e:	f7fe ffd1 	bl	8001214 <HAL_GetTick>
 8002272:	0003      	movs	r3, r0
 8002274:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002276:	e00b      	b.n	8002290 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002278:	f7fe ffcc 	bl	8001214 <HAL_GetTick>
 800227c:	0002      	movs	r2, r0
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	2b02      	cmp	r3, #2
 8002284:	d904      	bls.n	8002290 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8002286:	2313      	movs	r3, #19
 8002288:	18fb      	adds	r3, r7, r3
 800228a:	2203      	movs	r2, #3
 800228c:	701a      	strb	r2, [r3, #0]
        break;
 800228e:	e005      	b.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002290:	4bac      	ldr	r3, [pc, #688]	@ (8002544 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	2380      	movs	r3, #128	@ 0x80
 8002296:	005b      	lsls	r3, r3, #1
 8002298:	4013      	ands	r3, r2
 800229a:	d0ed      	beq.n	8002278 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 800229c:	2313      	movs	r3, #19
 800229e:	18fb      	adds	r3, r7, r3
 80022a0:	781b      	ldrb	r3, [r3, #0]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d154      	bne.n	8002350 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80022a6:	4ba6      	ldr	r3, [pc, #664]	@ (8002540 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022a8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80022aa:	23c0      	movs	r3, #192	@ 0xc0
 80022ac:	009b      	lsls	r3, r3, #2
 80022ae:	4013      	ands	r3, r2
 80022b0:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d019      	beq.n	80022ec <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022bc:	697a      	ldr	r2, [r7, #20]
 80022be:	429a      	cmp	r2, r3
 80022c0:	d014      	beq.n	80022ec <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80022c2:	4b9f      	ldr	r3, [pc, #636]	@ (8002540 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022c6:	4aa0      	ldr	r2, [pc, #640]	@ (8002548 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80022c8:	4013      	ands	r3, r2
 80022ca:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80022cc:	4b9c      	ldr	r3, [pc, #624]	@ (8002540 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022ce:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80022d0:	4b9b      	ldr	r3, [pc, #620]	@ (8002540 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022d2:	2180      	movs	r1, #128	@ 0x80
 80022d4:	0249      	lsls	r1, r1, #9
 80022d6:	430a      	orrs	r2, r1
 80022d8:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80022da:	4b99      	ldr	r3, [pc, #612]	@ (8002540 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022dc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80022de:	4b98      	ldr	r3, [pc, #608]	@ (8002540 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022e0:	499a      	ldr	r1, [pc, #616]	@ (800254c <HAL_RCCEx_PeriphCLKConfig+0x348>)
 80022e2:	400a      	ands	r2, r1
 80022e4:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80022e6:	4b96      	ldr	r3, [pc, #600]	@ (8002540 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022e8:	697a      	ldr	r2, [r7, #20]
 80022ea:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	2201      	movs	r2, #1
 80022f0:	4013      	ands	r3, r2
 80022f2:	d016      	beq.n	8002322 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022f4:	f7fe ff8e 	bl	8001214 <HAL_GetTick>
 80022f8:	0003      	movs	r3, r0
 80022fa:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022fc:	e00c      	b.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022fe:	f7fe ff89 	bl	8001214 <HAL_GetTick>
 8002302:	0002      	movs	r2, r0
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	1ad3      	subs	r3, r2, r3
 8002308:	4a91      	ldr	r2, [pc, #580]	@ (8002550 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d904      	bls.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800230e:	2313      	movs	r3, #19
 8002310:	18fb      	adds	r3, r7, r3
 8002312:	2203      	movs	r2, #3
 8002314:	701a      	strb	r2, [r3, #0]
            break;
 8002316:	e004      	b.n	8002322 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002318:	4b89      	ldr	r3, [pc, #548]	@ (8002540 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800231a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800231c:	2202      	movs	r2, #2
 800231e:	4013      	ands	r3, r2
 8002320:	d0ed      	beq.n	80022fe <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8002322:	2313      	movs	r3, #19
 8002324:	18fb      	adds	r3, r7, r3
 8002326:	781b      	ldrb	r3, [r3, #0]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d10a      	bne.n	8002342 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800232c:	4b84      	ldr	r3, [pc, #528]	@ (8002540 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800232e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002330:	4a85      	ldr	r2, [pc, #532]	@ (8002548 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002332:	4013      	ands	r3, r2
 8002334:	0019      	movs	r1, r3
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800233a:	4b81      	ldr	r3, [pc, #516]	@ (8002540 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800233c:	430a      	orrs	r2, r1
 800233e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002340:	e00c      	b.n	800235c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002342:	2312      	movs	r3, #18
 8002344:	18fb      	adds	r3, r7, r3
 8002346:	2213      	movs	r2, #19
 8002348:	18ba      	adds	r2, r7, r2
 800234a:	7812      	ldrb	r2, [r2, #0]
 800234c:	701a      	strb	r2, [r3, #0]
 800234e:	e005      	b.n	800235c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002350:	2312      	movs	r3, #18
 8002352:	18fb      	adds	r3, r7, r3
 8002354:	2213      	movs	r2, #19
 8002356:	18ba      	adds	r2, r7, r2
 8002358:	7812      	ldrb	r2, [r2, #0]
 800235a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800235c:	2311      	movs	r3, #17
 800235e:	18fb      	adds	r3, r7, r3
 8002360:	781b      	ldrb	r3, [r3, #0]
 8002362:	2b01      	cmp	r3, #1
 8002364:	d105      	bne.n	8002372 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002366:	4b76      	ldr	r3, [pc, #472]	@ (8002540 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002368:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800236a:	4b75      	ldr	r3, [pc, #468]	@ (8002540 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800236c:	4979      	ldr	r1, [pc, #484]	@ (8002554 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 800236e:	400a      	ands	r2, r1
 8002370:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	2201      	movs	r2, #1
 8002378:	4013      	ands	r3, r2
 800237a:	d009      	beq.n	8002390 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800237c:	4b70      	ldr	r3, [pc, #448]	@ (8002540 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800237e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002380:	2203      	movs	r2, #3
 8002382:	4393      	bics	r3, r2
 8002384:	0019      	movs	r1, r3
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	685a      	ldr	r2, [r3, #4]
 800238a:	4b6d      	ldr	r3, [pc, #436]	@ (8002540 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800238c:	430a      	orrs	r2, r1
 800238e:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	2202      	movs	r2, #2
 8002396:	4013      	ands	r3, r2
 8002398:	d009      	beq.n	80023ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800239a:	4b69      	ldr	r3, [pc, #420]	@ (8002540 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800239c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800239e:	220c      	movs	r2, #12
 80023a0:	4393      	bics	r3, r2
 80023a2:	0019      	movs	r1, r3
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	689a      	ldr	r2, [r3, #8]
 80023a8:	4b65      	ldr	r3, [pc, #404]	@ (8002540 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023aa:	430a      	orrs	r2, r1
 80023ac:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	2210      	movs	r2, #16
 80023b4:	4013      	ands	r3, r2
 80023b6:	d009      	beq.n	80023cc <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80023b8:	4b61      	ldr	r3, [pc, #388]	@ (8002540 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023bc:	4a66      	ldr	r2, [pc, #408]	@ (8002558 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 80023be:	4013      	ands	r3, r2
 80023c0:	0019      	movs	r1, r3
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	68da      	ldr	r2, [r3, #12]
 80023c6:	4b5e      	ldr	r3, [pc, #376]	@ (8002540 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023c8:	430a      	orrs	r2, r1
 80023ca:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	2380      	movs	r3, #128	@ 0x80
 80023d2:	009b      	lsls	r3, r3, #2
 80023d4:	4013      	ands	r3, r2
 80023d6:	d009      	beq.n	80023ec <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80023d8:	4b59      	ldr	r3, [pc, #356]	@ (8002540 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023dc:	4a5f      	ldr	r2, [pc, #380]	@ (800255c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80023de:	4013      	ands	r3, r2
 80023e0:	0019      	movs	r1, r3
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	699a      	ldr	r2, [r3, #24]
 80023e6:	4b56      	ldr	r3, [pc, #344]	@ (8002540 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023e8:	430a      	orrs	r2, r1
 80023ea:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	2380      	movs	r3, #128	@ 0x80
 80023f2:	00db      	lsls	r3, r3, #3
 80023f4:	4013      	ands	r3, r2
 80023f6:	d009      	beq.n	800240c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80023f8:	4b51      	ldr	r3, [pc, #324]	@ (8002540 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023fc:	4a58      	ldr	r2, [pc, #352]	@ (8002560 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80023fe:	4013      	ands	r3, r2
 8002400:	0019      	movs	r1, r3
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	69da      	ldr	r2, [r3, #28]
 8002406:	4b4e      	ldr	r3, [pc, #312]	@ (8002540 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002408:	430a      	orrs	r2, r1
 800240a:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	2220      	movs	r2, #32
 8002412:	4013      	ands	r3, r2
 8002414:	d009      	beq.n	800242a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002416:	4b4a      	ldr	r3, [pc, #296]	@ (8002540 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002418:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800241a:	4a52      	ldr	r2, [pc, #328]	@ (8002564 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 800241c:	4013      	ands	r3, r2
 800241e:	0019      	movs	r1, r3
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	691a      	ldr	r2, [r3, #16]
 8002424:	4b46      	ldr	r3, [pc, #280]	@ (8002540 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002426:	430a      	orrs	r2, r1
 8002428:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	2380      	movs	r3, #128	@ 0x80
 8002430:	01db      	lsls	r3, r3, #7
 8002432:	4013      	ands	r3, r2
 8002434:	d015      	beq.n	8002462 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002436:	4b42      	ldr	r3, [pc, #264]	@ (8002540 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002438:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	0899      	lsrs	r1, r3, #2
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6a1a      	ldr	r2, [r3, #32]
 8002442:	4b3f      	ldr	r3, [pc, #252]	@ (8002540 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002444:	430a      	orrs	r2, r1
 8002446:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6a1a      	ldr	r2, [r3, #32]
 800244c:	2380      	movs	r3, #128	@ 0x80
 800244e:	05db      	lsls	r3, r3, #23
 8002450:	429a      	cmp	r2, r3
 8002452:	d106      	bne.n	8002462 <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002454:	4b3a      	ldr	r3, [pc, #232]	@ (8002540 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002456:	68da      	ldr	r2, [r3, #12]
 8002458:	4b39      	ldr	r3, [pc, #228]	@ (8002540 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800245a:	2180      	movs	r1, #128	@ 0x80
 800245c:	0249      	lsls	r1, r1, #9
 800245e:	430a      	orrs	r2, r1
 8002460:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	2380      	movs	r3, #128	@ 0x80
 8002468:	031b      	lsls	r3, r3, #12
 800246a:	4013      	ands	r3, r2
 800246c:	d009      	beq.n	8002482 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800246e:	4b34      	ldr	r3, [pc, #208]	@ (8002540 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002470:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002472:	2240      	movs	r2, #64	@ 0x40
 8002474:	4393      	bics	r3, r2
 8002476:	0019      	movs	r1, r3
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800247c:	4b30      	ldr	r3, [pc, #192]	@ (8002540 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800247e:	430a      	orrs	r2, r1
 8002480:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	2380      	movs	r3, #128	@ 0x80
 8002488:	039b      	lsls	r3, r3, #14
 800248a:	4013      	ands	r3, r2
 800248c:	d016      	beq.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800248e:	4b2c      	ldr	r3, [pc, #176]	@ (8002540 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002490:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002492:	4a35      	ldr	r2, [pc, #212]	@ (8002568 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002494:	4013      	ands	r3, r2
 8002496:	0019      	movs	r1, r3
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800249c:	4b28      	ldr	r3, [pc, #160]	@ (8002540 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800249e:	430a      	orrs	r2, r1
 80024a0:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80024a6:	2380      	movs	r3, #128	@ 0x80
 80024a8:	03db      	lsls	r3, r3, #15
 80024aa:	429a      	cmp	r2, r3
 80024ac:	d106      	bne.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80024ae:	4b24      	ldr	r3, [pc, #144]	@ (8002540 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80024b0:	68da      	ldr	r2, [r3, #12]
 80024b2:	4b23      	ldr	r3, [pc, #140]	@ (8002540 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80024b4:	2180      	movs	r1, #128	@ 0x80
 80024b6:	0449      	lsls	r1, r1, #17
 80024b8:	430a      	orrs	r2, r1
 80024ba:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681a      	ldr	r2, [r3, #0]
 80024c0:	2380      	movs	r3, #128	@ 0x80
 80024c2:	03db      	lsls	r3, r3, #15
 80024c4:	4013      	ands	r3, r2
 80024c6:	d016      	beq.n	80024f6 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80024c8:	4b1d      	ldr	r3, [pc, #116]	@ (8002540 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80024ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024cc:	4a27      	ldr	r2, [pc, #156]	@ (800256c <HAL_RCCEx_PeriphCLKConfig+0x368>)
 80024ce:	4013      	ands	r3, r2
 80024d0:	0019      	movs	r1, r3
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80024d6:	4b1a      	ldr	r3, [pc, #104]	@ (8002540 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80024d8:	430a      	orrs	r2, r1
 80024da:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80024e0:	2380      	movs	r3, #128	@ 0x80
 80024e2:	045b      	lsls	r3, r3, #17
 80024e4:	429a      	cmp	r2, r3
 80024e6:	d106      	bne.n	80024f6 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80024e8:	4b15      	ldr	r3, [pc, #84]	@ (8002540 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80024ea:	68da      	ldr	r2, [r3, #12]
 80024ec:	4b14      	ldr	r3, [pc, #80]	@ (8002540 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80024ee:	2180      	movs	r1, #128	@ 0x80
 80024f0:	0449      	lsls	r1, r1, #17
 80024f2:	430a      	orrs	r2, r1
 80024f4:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	2380      	movs	r3, #128	@ 0x80
 80024fc:	011b      	lsls	r3, r3, #4
 80024fe:	4013      	ands	r3, r2
 8002500:	d016      	beq.n	8002530 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002502:	4b0f      	ldr	r3, [pc, #60]	@ (8002540 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002504:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002506:	4a1a      	ldr	r2, [pc, #104]	@ (8002570 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8002508:	4013      	ands	r3, r2
 800250a:	0019      	movs	r1, r3
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	695a      	ldr	r2, [r3, #20]
 8002510:	4b0b      	ldr	r3, [pc, #44]	@ (8002540 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002512:	430a      	orrs	r2, r1
 8002514:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	695a      	ldr	r2, [r3, #20]
 800251a:	2380      	movs	r3, #128	@ 0x80
 800251c:	01db      	lsls	r3, r3, #7
 800251e:	429a      	cmp	r2, r3
 8002520:	d106      	bne.n	8002530 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002522:	4b07      	ldr	r3, [pc, #28]	@ (8002540 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002524:	68da      	ldr	r2, [r3, #12]
 8002526:	4b06      	ldr	r3, [pc, #24]	@ (8002540 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002528:	2180      	movs	r1, #128	@ 0x80
 800252a:	0249      	lsls	r1, r1, #9
 800252c:	430a      	orrs	r2, r1
 800252e:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002530:	2312      	movs	r3, #18
 8002532:	18fb      	adds	r3, r7, r3
 8002534:	781b      	ldrb	r3, [r3, #0]
}
 8002536:	0018      	movs	r0, r3
 8002538:	46bd      	mov	sp, r7
 800253a:	b006      	add	sp, #24
 800253c:	bd80      	pop	{r7, pc}
 800253e:	46c0      	nop			@ (mov r8, r8)
 8002540:	40021000 	.word	0x40021000
 8002544:	40007000 	.word	0x40007000
 8002548:	fffffcff 	.word	0xfffffcff
 800254c:	fffeffff 	.word	0xfffeffff
 8002550:	00001388 	.word	0x00001388
 8002554:	efffffff 	.word	0xefffffff
 8002558:	fffff3ff 	.word	0xfffff3ff
 800255c:	fff3ffff 	.word	0xfff3ffff
 8002560:	ffcfffff 	.word	0xffcfffff
 8002564:	ffffcfff 	.word	0xffffcfff
 8002568:	ffbfffff 	.word	0xffbfffff
 800256c:	feffffff 	.word	0xfeffffff
 8002570:	ffff3fff 	.word	0xffff3fff

08002574 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b082      	sub	sp, #8
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d101      	bne.n	8002586 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	e04a      	b.n	800261c <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	223d      	movs	r2, #61	@ 0x3d
 800258a:	5c9b      	ldrb	r3, [r3, r2]
 800258c:	b2db      	uxtb	r3, r3
 800258e:	2b00      	cmp	r3, #0
 8002590:	d107      	bne.n	80025a2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	223c      	movs	r2, #60	@ 0x3c
 8002596:	2100      	movs	r1, #0
 8002598:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	0018      	movs	r0, r3
 800259e:	f7fe fcbd 	bl	8000f1c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	223d      	movs	r2, #61	@ 0x3d
 80025a6:	2102      	movs	r1, #2
 80025a8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	3304      	adds	r3, #4
 80025b2:	0019      	movs	r1, r3
 80025b4:	0010      	movs	r0, r2
 80025b6:	f000 fabd 	bl	8002b34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2248      	movs	r2, #72	@ 0x48
 80025be:	2101      	movs	r1, #1
 80025c0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	223e      	movs	r2, #62	@ 0x3e
 80025c6:	2101      	movs	r1, #1
 80025c8:	5499      	strb	r1, [r3, r2]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	223f      	movs	r2, #63	@ 0x3f
 80025ce:	2101      	movs	r1, #1
 80025d0:	5499      	strb	r1, [r3, r2]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2240      	movs	r2, #64	@ 0x40
 80025d6:	2101      	movs	r1, #1
 80025d8:	5499      	strb	r1, [r3, r2]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2241      	movs	r2, #65	@ 0x41
 80025de:	2101      	movs	r1, #1
 80025e0:	5499      	strb	r1, [r3, r2]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2242      	movs	r2, #66	@ 0x42
 80025e6:	2101      	movs	r1, #1
 80025e8:	5499      	strb	r1, [r3, r2]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2243      	movs	r2, #67	@ 0x43
 80025ee:	2101      	movs	r1, #1
 80025f0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2244      	movs	r2, #68	@ 0x44
 80025f6:	2101      	movs	r1, #1
 80025f8:	5499      	strb	r1, [r3, r2]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2245      	movs	r2, #69	@ 0x45
 80025fe:	2101      	movs	r1, #1
 8002600:	5499      	strb	r1, [r3, r2]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2246      	movs	r2, #70	@ 0x46
 8002606:	2101      	movs	r1, #1
 8002608:	5499      	strb	r1, [r3, r2]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2247      	movs	r2, #71	@ 0x47
 800260e:	2101      	movs	r1, #1
 8002610:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	223d      	movs	r2, #61	@ 0x3d
 8002616:	2101      	movs	r1, #1
 8002618:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800261a:	2300      	movs	r3, #0
}
 800261c:	0018      	movs	r0, r3
 800261e:	46bd      	mov	sp, r7
 8002620:	b002      	add	sp, #8
 8002622:	bd80      	pop	{r7, pc}

08002624 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b084      	sub	sp, #16
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	223d      	movs	r2, #61	@ 0x3d
 8002630:	5c9b      	ldrb	r3, [r3, r2]
 8002632:	b2db      	uxtb	r3, r3
 8002634:	2b01      	cmp	r3, #1
 8002636:	d001      	beq.n	800263c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002638:	2301      	movs	r3, #1
 800263a:	e042      	b.n	80026c2 <HAL_TIM_Base_Start_IT+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	223d      	movs	r2, #61	@ 0x3d
 8002640:	2102      	movs	r1, #2
 8002642:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	68da      	ldr	r2, [r3, #12]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	2101      	movs	r1, #1
 8002650:	430a      	orrs	r2, r1
 8002652:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a1c      	ldr	r2, [pc, #112]	@ (80026cc <HAL_TIM_Base_Start_IT+0xa8>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d00f      	beq.n	800267e <HAL_TIM_Base_Start_IT+0x5a>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	2380      	movs	r3, #128	@ 0x80
 8002664:	05db      	lsls	r3, r3, #23
 8002666:	429a      	cmp	r2, r3
 8002668:	d009      	beq.n	800267e <HAL_TIM_Base_Start_IT+0x5a>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a18      	ldr	r2, [pc, #96]	@ (80026d0 <HAL_TIM_Base_Start_IT+0xac>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d004      	beq.n	800267e <HAL_TIM_Base_Start_IT+0x5a>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a16      	ldr	r2, [pc, #88]	@ (80026d4 <HAL_TIM_Base_Start_IT+0xb0>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d116      	bne.n	80026ac <HAL_TIM_Base_Start_IT+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	4a14      	ldr	r2, [pc, #80]	@ (80026d8 <HAL_TIM_Base_Start_IT+0xb4>)
 8002686:	4013      	ands	r3, r2
 8002688:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	2b06      	cmp	r3, #6
 800268e:	d016      	beq.n	80026be <HAL_TIM_Base_Start_IT+0x9a>
 8002690:	68fa      	ldr	r2, [r7, #12]
 8002692:	2380      	movs	r3, #128	@ 0x80
 8002694:	025b      	lsls	r3, r3, #9
 8002696:	429a      	cmp	r2, r3
 8002698:	d011      	beq.n	80026be <HAL_TIM_Base_Start_IT+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	2101      	movs	r1, #1
 80026a6:	430a      	orrs	r2, r1
 80026a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026aa:	e008      	b.n	80026be <HAL_TIM_Base_Start_IT+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	2101      	movs	r1, #1
 80026b8:	430a      	orrs	r2, r1
 80026ba:	601a      	str	r2, [r3, #0]
 80026bc:	e000      	b.n	80026c0 <HAL_TIM_Base_Start_IT+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026be:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80026c0:	2300      	movs	r3, #0
}
 80026c2:	0018      	movs	r0, r3
 80026c4:	46bd      	mov	sp, r7
 80026c6:	b004      	add	sp, #16
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	46c0      	nop			@ (mov r8, r8)
 80026cc:	40012c00 	.word	0x40012c00
 80026d0:	40000400 	.word	0x40000400
 80026d4:	40014000 	.word	0x40014000
 80026d8:	00010007 	.word	0x00010007

080026dc <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b082      	sub	sp, #8
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	68da      	ldr	r2, [r3, #12]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	2101      	movs	r1, #1
 80026f0:	438a      	bics	r2, r1
 80026f2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	6a1b      	ldr	r3, [r3, #32]
 80026fa:	4a0d      	ldr	r2, [pc, #52]	@ (8002730 <HAL_TIM_Base_Stop_IT+0x54>)
 80026fc:	4013      	ands	r3, r2
 80026fe:	d10d      	bne.n	800271c <HAL_TIM_Base_Stop_IT+0x40>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	6a1b      	ldr	r3, [r3, #32]
 8002706:	4a0b      	ldr	r2, [pc, #44]	@ (8002734 <HAL_TIM_Base_Stop_IT+0x58>)
 8002708:	4013      	ands	r3, r2
 800270a:	d107      	bne.n	800271c <HAL_TIM_Base_Stop_IT+0x40>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	681a      	ldr	r2, [r3, #0]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	2101      	movs	r1, #1
 8002718:	438a      	bics	r2, r1
 800271a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	223d      	movs	r2, #61	@ 0x3d
 8002720:	2101      	movs	r1, #1
 8002722:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8002724:	2300      	movs	r3, #0
}
 8002726:	0018      	movs	r0, r3
 8002728:	46bd      	mov	sp, r7
 800272a:	b002      	add	sp, #8
 800272c:	bd80      	pop	{r7, pc}
 800272e:	46c0      	nop			@ (mov r8, r8)
 8002730:	00001111 	.word	0x00001111
 8002734:	00000444 	.word	0x00000444

08002738 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b084      	sub	sp, #16
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	68db      	ldr	r3, [r3, #12]
 8002746:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	691b      	ldr	r3, [r3, #16]
 800274e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	2202      	movs	r2, #2
 8002754:	4013      	ands	r3, r2
 8002756:	d021      	beq.n	800279c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	2202      	movs	r2, #2
 800275c:	4013      	ands	r3, r2
 800275e:	d01d      	beq.n	800279c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	2203      	movs	r2, #3
 8002766:	4252      	negs	r2, r2
 8002768:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2201      	movs	r2, #1
 800276e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	699b      	ldr	r3, [r3, #24]
 8002776:	2203      	movs	r2, #3
 8002778:	4013      	ands	r3, r2
 800277a:	d004      	beq.n	8002786 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	0018      	movs	r0, r3
 8002780:	f000 f9c0 	bl	8002b04 <HAL_TIM_IC_CaptureCallback>
 8002784:	e007      	b.n	8002796 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	0018      	movs	r0, r3
 800278a:	f000 f9b3 	bl	8002af4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	0018      	movs	r0, r3
 8002792:	f000 f9bf 	bl	8002b14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2200      	movs	r2, #0
 800279a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	2204      	movs	r2, #4
 80027a0:	4013      	ands	r3, r2
 80027a2:	d022      	beq.n	80027ea <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	2204      	movs	r2, #4
 80027a8:	4013      	ands	r3, r2
 80027aa:	d01e      	beq.n	80027ea <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	2205      	movs	r2, #5
 80027b2:	4252      	negs	r2, r2
 80027b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2202      	movs	r2, #2
 80027ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	699a      	ldr	r2, [r3, #24]
 80027c2:	23c0      	movs	r3, #192	@ 0xc0
 80027c4:	009b      	lsls	r3, r3, #2
 80027c6:	4013      	ands	r3, r2
 80027c8:	d004      	beq.n	80027d4 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	0018      	movs	r0, r3
 80027ce:	f000 f999 	bl	8002b04 <HAL_TIM_IC_CaptureCallback>
 80027d2:	e007      	b.n	80027e4 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	0018      	movs	r0, r3
 80027d8:	f000 f98c 	bl	8002af4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	0018      	movs	r0, r3
 80027e0:	f000 f998 	bl	8002b14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2200      	movs	r2, #0
 80027e8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	2208      	movs	r2, #8
 80027ee:	4013      	ands	r3, r2
 80027f0:	d021      	beq.n	8002836 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	2208      	movs	r2, #8
 80027f6:	4013      	ands	r3, r2
 80027f8:	d01d      	beq.n	8002836 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	2209      	movs	r2, #9
 8002800:	4252      	negs	r2, r2
 8002802:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2204      	movs	r2, #4
 8002808:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	69db      	ldr	r3, [r3, #28]
 8002810:	2203      	movs	r2, #3
 8002812:	4013      	ands	r3, r2
 8002814:	d004      	beq.n	8002820 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	0018      	movs	r0, r3
 800281a:	f000 f973 	bl	8002b04 <HAL_TIM_IC_CaptureCallback>
 800281e:	e007      	b.n	8002830 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	0018      	movs	r0, r3
 8002824:	f000 f966 	bl	8002af4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	0018      	movs	r0, r3
 800282c:	f000 f972 	bl	8002b14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2200      	movs	r2, #0
 8002834:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	2210      	movs	r2, #16
 800283a:	4013      	ands	r3, r2
 800283c:	d022      	beq.n	8002884 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	2210      	movs	r2, #16
 8002842:	4013      	ands	r3, r2
 8002844:	d01e      	beq.n	8002884 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	2211      	movs	r2, #17
 800284c:	4252      	negs	r2, r2
 800284e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2208      	movs	r2, #8
 8002854:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	69da      	ldr	r2, [r3, #28]
 800285c:	23c0      	movs	r3, #192	@ 0xc0
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	4013      	ands	r3, r2
 8002862:	d004      	beq.n	800286e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	0018      	movs	r0, r3
 8002868:	f000 f94c 	bl	8002b04 <HAL_TIM_IC_CaptureCallback>
 800286c:	e007      	b.n	800287e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	0018      	movs	r0, r3
 8002872:	f000 f93f 	bl	8002af4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	0018      	movs	r0, r3
 800287a:	f000 f94b 	bl	8002b14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2200      	movs	r2, #0
 8002882:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	2201      	movs	r2, #1
 8002888:	4013      	ands	r3, r2
 800288a:	d00c      	beq.n	80028a6 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	2201      	movs	r2, #1
 8002890:	4013      	ands	r3, r2
 8002892:	d008      	beq.n	80028a6 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	2202      	movs	r2, #2
 800289a:	4252      	negs	r2, r2
 800289c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	0018      	movs	r0, r3
 80028a2:	f7fe f863 	bl	800096c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	2280      	movs	r2, #128	@ 0x80
 80028aa:	4013      	ands	r3, r2
 80028ac:	d104      	bne.n	80028b8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80028ae:	68ba      	ldr	r2, [r7, #8]
 80028b0:	2380      	movs	r3, #128	@ 0x80
 80028b2:	019b      	lsls	r3, r3, #6
 80028b4:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80028b6:	d00b      	beq.n	80028d0 <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	2280      	movs	r2, #128	@ 0x80
 80028bc:	4013      	ands	r3, r2
 80028be:	d007      	beq.n	80028d0 <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a1e      	ldr	r2, [pc, #120]	@ (8002940 <HAL_TIM_IRQHandler+0x208>)
 80028c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	0018      	movs	r0, r3
 80028cc:	f000 fad2 	bl	8002e74 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80028d0:	68ba      	ldr	r2, [r7, #8]
 80028d2:	2380      	movs	r3, #128	@ 0x80
 80028d4:	005b      	lsls	r3, r3, #1
 80028d6:	4013      	ands	r3, r2
 80028d8:	d00b      	beq.n	80028f2 <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	2280      	movs	r2, #128	@ 0x80
 80028de:	4013      	ands	r3, r2
 80028e0:	d007      	beq.n	80028f2 <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a17      	ldr	r2, [pc, #92]	@ (8002944 <HAL_TIM_IRQHandler+0x20c>)
 80028e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	0018      	movs	r0, r3
 80028ee:	f000 fac9 	bl	8002e84 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	2240      	movs	r2, #64	@ 0x40
 80028f6:	4013      	ands	r3, r2
 80028f8:	d00c      	beq.n	8002914 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	2240      	movs	r2, #64	@ 0x40
 80028fe:	4013      	ands	r3, r2
 8002900:	d008      	beq.n	8002914 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	2241      	movs	r2, #65	@ 0x41
 8002908:	4252      	negs	r2, r2
 800290a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	0018      	movs	r0, r3
 8002910:	f000 f908 	bl	8002b24 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	2220      	movs	r2, #32
 8002918:	4013      	ands	r3, r2
 800291a:	d00c      	beq.n	8002936 <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	2220      	movs	r2, #32
 8002920:	4013      	ands	r3, r2
 8002922:	d008      	beq.n	8002936 <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	2221      	movs	r2, #33	@ 0x21
 800292a:	4252      	negs	r2, r2
 800292c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	0018      	movs	r0, r3
 8002932:	f000 fa97 	bl	8002e64 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002936:	46c0      	nop			@ (mov r8, r8)
 8002938:	46bd      	mov	sp, r7
 800293a:	b004      	add	sp, #16
 800293c:	bd80      	pop	{r7, pc}
 800293e:	46c0      	nop			@ (mov r8, r8)
 8002940:	ffffdf7f 	.word	0xffffdf7f
 8002944:	fffffeff 	.word	0xfffffeff

08002948 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b084      	sub	sp, #16
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
 8002950:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002952:	230f      	movs	r3, #15
 8002954:	18fb      	adds	r3, r7, r3
 8002956:	2200      	movs	r2, #0
 8002958:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	223c      	movs	r2, #60	@ 0x3c
 800295e:	5c9b      	ldrb	r3, [r3, r2]
 8002960:	2b01      	cmp	r3, #1
 8002962:	d101      	bne.n	8002968 <HAL_TIM_ConfigClockSource+0x20>
 8002964:	2302      	movs	r3, #2
 8002966:	e0bc      	b.n	8002ae2 <HAL_TIM_ConfigClockSource+0x19a>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	223c      	movs	r2, #60	@ 0x3c
 800296c:	2101      	movs	r1, #1
 800296e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	223d      	movs	r2, #61	@ 0x3d
 8002974:	2102      	movs	r1, #2
 8002976:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	689b      	ldr	r3, [r3, #8]
 800297e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	4a5a      	ldr	r2, [pc, #360]	@ (8002aec <HAL_TIM_ConfigClockSource+0x1a4>)
 8002984:	4013      	ands	r3, r2
 8002986:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	4a59      	ldr	r2, [pc, #356]	@ (8002af0 <HAL_TIM_ConfigClockSource+0x1a8>)
 800298c:	4013      	ands	r3, r2
 800298e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	68ba      	ldr	r2, [r7, #8]
 8002996:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	2280      	movs	r2, #128	@ 0x80
 800299e:	0192      	lsls	r2, r2, #6
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d040      	beq.n	8002a26 <HAL_TIM_ConfigClockSource+0xde>
 80029a4:	2280      	movs	r2, #128	@ 0x80
 80029a6:	0192      	lsls	r2, r2, #6
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d900      	bls.n	80029ae <HAL_TIM_ConfigClockSource+0x66>
 80029ac:	e088      	b.n	8002ac0 <HAL_TIM_ConfigClockSource+0x178>
 80029ae:	2280      	movs	r2, #128	@ 0x80
 80029b0:	0152      	lsls	r2, r2, #5
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d100      	bne.n	80029b8 <HAL_TIM_ConfigClockSource+0x70>
 80029b6:	e088      	b.n	8002aca <HAL_TIM_ConfigClockSource+0x182>
 80029b8:	2280      	movs	r2, #128	@ 0x80
 80029ba:	0152      	lsls	r2, r2, #5
 80029bc:	4293      	cmp	r3, r2
 80029be:	d900      	bls.n	80029c2 <HAL_TIM_ConfigClockSource+0x7a>
 80029c0:	e07e      	b.n	8002ac0 <HAL_TIM_ConfigClockSource+0x178>
 80029c2:	2b70      	cmp	r3, #112	@ 0x70
 80029c4:	d018      	beq.n	80029f8 <HAL_TIM_ConfigClockSource+0xb0>
 80029c6:	d900      	bls.n	80029ca <HAL_TIM_ConfigClockSource+0x82>
 80029c8:	e07a      	b.n	8002ac0 <HAL_TIM_ConfigClockSource+0x178>
 80029ca:	2b60      	cmp	r3, #96	@ 0x60
 80029cc:	d04f      	beq.n	8002a6e <HAL_TIM_ConfigClockSource+0x126>
 80029ce:	d900      	bls.n	80029d2 <HAL_TIM_ConfigClockSource+0x8a>
 80029d0:	e076      	b.n	8002ac0 <HAL_TIM_ConfigClockSource+0x178>
 80029d2:	2b50      	cmp	r3, #80	@ 0x50
 80029d4:	d03b      	beq.n	8002a4e <HAL_TIM_ConfigClockSource+0x106>
 80029d6:	d900      	bls.n	80029da <HAL_TIM_ConfigClockSource+0x92>
 80029d8:	e072      	b.n	8002ac0 <HAL_TIM_ConfigClockSource+0x178>
 80029da:	2b40      	cmp	r3, #64	@ 0x40
 80029dc:	d057      	beq.n	8002a8e <HAL_TIM_ConfigClockSource+0x146>
 80029de:	d900      	bls.n	80029e2 <HAL_TIM_ConfigClockSource+0x9a>
 80029e0:	e06e      	b.n	8002ac0 <HAL_TIM_ConfigClockSource+0x178>
 80029e2:	2b30      	cmp	r3, #48	@ 0x30
 80029e4:	d063      	beq.n	8002aae <HAL_TIM_ConfigClockSource+0x166>
 80029e6:	d86b      	bhi.n	8002ac0 <HAL_TIM_ConfigClockSource+0x178>
 80029e8:	2b20      	cmp	r3, #32
 80029ea:	d060      	beq.n	8002aae <HAL_TIM_ConfigClockSource+0x166>
 80029ec:	d868      	bhi.n	8002ac0 <HAL_TIM_ConfigClockSource+0x178>
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d05d      	beq.n	8002aae <HAL_TIM_ConfigClockSource+0x166>
 80029f2:	2b10      	cmp	r3, #16
 80029f4:	d05b      	beq.n	8002aae <HAL_TIM_ConfigClockSource+0x166>
 80029f6:	e063      	b.n	8002ac0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002a08:	f000 f99e 	bl	8002d48 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	2277      	movs	r2, #119	@ 0x77
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	68ba      	ldr	r2, [r7, #8]
 8002a22:	609a      	str	r2, [r3, #8]
      break;
 8002a24:	e052      	b.n	8002acc <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002a36:	f000 f987 	bl	8002d48 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	689a      	ldr	r2, [r3, #8]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	2180      	movs	r1, #128	@ 0x80
 8002a46:	01c9      	lsls	r1, r1, #7
 8002a48:	430a      	orrs	r2, r1
 8002a4a:	609a      	str	r2, [r3, #8]
      break;
 8002a4c:	e03e      	b.n	8002acc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a5a:	001a      	movs	r2, r3
 8002a5c:	f000 f8f8 	bl	8002c50 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	2150      	movs	r1, #80	@ 0x50
 8002a66:	0018      	movs	r0, r3
 8002a68:	f000 f952 	bl	8002d10 <TIM_ITRx_SetConfig>
      break;
 8002a6c:	e02e      	b.n	8002acc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a7a:	001a      	movs	r2, r3
 8002a7c:	f000 f916 	bl	8002cac <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	2160      	movs	r1, #96	@ 0x60
 8002a86:	0018      	movs	r0, r3
 8002a88:	f000 f942 	bl	8002d10 <TIM_ITRx_SetConfig>
      break;
 8002a8c:	e01e      	b.n	8002acc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a9a:	001a      	movs	r2, r3
 8002a9c:	f000 f8d8 	bl	8002c50 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	2140      	movs	r1, #64	@ 0x40
 8002aa6:	0018      	movs	r0, r3
 8002aa8:	f000 f932 	bl	8002d10 <TIM_ITRx_SetConfig>
      break;
 8002aac:	e00e      	b.n	8002acc <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	0019      	movs	r1, r3
 8002ab8:	0010      	movs	r0, r2
 8002aba:	f000 f929 	bl	8002d10 <TIM_ITRx_SetConfig>
      break;
 8002abe:	e005      	b.n	8002acc <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8002ac0:	230f      	movs	r3, #15
 8002ac2:	18fb      	adds	r3, r7, r3
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	701a      	strb	r2, [r3, #0]
      break;
 8002ac8:	e000      	b.n	8002acc <HAL_TIM_ConfigClockSource+0x184>
      break;
 8002aca:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	223d      	movs	r2, #61	@ 0x3d
 8002ad0:	2101      	movs	r1, #1
 8002ad2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	223c      	movs	r2, #60	@ 0x3c
 8002ad8:	2100      	movs	r1, #0
 8002ada:	5499      	strb	r1, [r3, r2]

  return status;
 8002adc:	230f      	movs	r3, #15
 8002ade:	18fb      	adds	r3, r7, r3
 8002ae0:	781b      	ldrb	r3, [r3, #0]
}
 8002ae2:	0018      	movs	r0, r3
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	b004      	add	sp, #16
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	46c0      	nop			@ (mov r8, r8)
 8002aec:	ffceff88 	.word	0xffceff88
 8002af0:	ffff00ff 	.word	0xffff00ff

08002af4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b082      	sub	sp, #8
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002afc:	46c0      	nop			@ (mov r8, r8)
 8002afe:	46bd      	mov	sp, r7
 8002b00:	b002      	add	sp, #8
 8002b02:	bd80      	pop	{r7, pc}

08002b04 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b082      	sub	sp, #8
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002b0c:	46c0      	nop			@ (mov r8, r8)
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	b002      	add	sp, #8
 8002b12:	bd80      	pop	{r7, pc}

08002b14 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b082      	sub	sp, #8
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002b1c:	46c0      	nop			@ (mov r8, r8)
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	b002      	add	sp, #8
 8002b22:	bd80      	pop	{r7, pc}

08002b24 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b082      	sub	sp, #8
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002b2c:	46c0      	nop			@ (mov r8, r8)
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	b002      	add	sp, #8
 8002b32:	bd80      	pop	{r7, pc}

08002b34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b084      	sub	sp, #16
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
 8002b3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	4a3b      	ldr	r2, [pc, #236]	@ (8002c34 <TIM_Base_SetConfig+0x100>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d008      	beq.n	8002b5e <TIM_Base_SetConfig+0x2a>
 8002b4c:	687a      	ldr	r2, [r7, #4]
 8002b4e:	2380      	movs	r3, #128	@ 0x80
 8002b50:	05db      	lsls	r3, r3, #23
 8002b52:	429a      	cmp	r2, r3
 8002b54:	d003      	beq.n	8002b5e <TIM_Base_SetConfig+0x2a>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	4a37      	ldr	r2, [pc, #220]	@ (8002c38 <TIM_Base_SetConfig+0x104>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d108      	bne.n	8002b70 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	2270      	movs	r2, #112	@ 0x70
 8002b62:	4393      	bics	r3, r2
 8002b64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	68fa      	ldr	r2, [r7, #12]
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	4a30      	ldr	r2, [pc, #192]	@ (8002c34 <TIM_Base_SetConfig+0x100>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d018      	beq.n	8002baa <TIM_Base_SetConfig+0x76>
 8002b78:	687a      	ldr	r2, [r7, #4]
 8002b7a:	2380      	movs	r3, #128	@ 0x80
 8002b7c:	05db      	lsls	r3, r3, #23
 8002b7e:	429a      	cmp	r2, r3
 8002b80:	d013      	beq.n	8002baa <TIM_Base_SetConfig+0x76>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	4a2c      	ldr	r2, [pc, #176]	@ (8002c38 <TIM_Base_SetConfig+0x104>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d00f      	beq.n	8002baa <TIM_Base_SetConfig+0x76>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	4a2b      	ldr	r2, [pc, #172]	@ (8002c3c <TIM_Base_SetConfig+0x108>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d00b      	beq.n	8002baa <TIM_Base_SetConfig+0x76>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	4a2a      	ldr	r2, [pc, #168]	@ (8002c40 <TIM_Base_SetConfig+0x10c>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d007      	beq.n	8002baa <TIM_Base_SetConfig+0x76>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	4a29      	ldr	r2, [pc, #164]	@ (8002c44 <TIM_Base_SetConfig+0x110>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d003      	beq.n	8002baa <TIM_Base_SetConfig+0x76>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	4a28      	ldr	r2, [pc, #160]	@ (8002c48 <TIM_Base_SetConfig+0x114>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d108      	bne.n	8002bbc <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	4a27      	ldr	r2, [pc, #156]	@ (8002c4c <TIM_Base_SetConfig+0x118>)
 8002bae:	4013      	ands	r3, r2
 8002bb0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	68db      	ldr	r3, [r3, #12]
 8002bb6:	68fa      	ldr	r2, [r7, #12]
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	2280      	movs	r2, #128	@ 0x80
 8002bc0:	4393      	bics	r3, r2
 8002bc2:	001a      	movs	r2, r3
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	695b      	ldr	r3, [r3, #20]
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	68fa      	ldr	r2, [r7, #12]
 8002bd0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	689a      	ldr	r2, [r3, #8]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	4a13      	ldr	r2, [pc, #76]	@ (8002c34 <TIM_Base_SetConfig+0x100>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d00b      	beq.n	8002c02 <TIM_Base_SetConfig+0xce>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	4a14      	ldr	r2, [pc, #80]	@ (8002c40 <TIM_Base_SetConfig+0x10c>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d007      	beq.n	8002c02 <TIM_Base_SetConfig+0xce>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	4a13      	ldr	r2, [pc, #76]	@ (8002c44 <TIM_Base_SetConfig+0x110>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d003      	beq.n	8002c02 <TIM_Base_SetConfig+0xce>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	4a12      	ldr	r2, [pc, #72]	@ (8002c48 <TIM_Base_SetConfig+0x114>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d103      	bne.n	8002c0a <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	691a      	ldr	r2, [r3, #16]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2201      	movs	r2, #1
 8002c0e:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	691b      	ldr	r3, [r3, #16]
 8002c14:	2201      	movs	r2, #1
 8002c16:	4013      	ands	r3, r2
 8002c18:	2b01      	cmp	r3, #1
 8002c1a:	d106      	bne.n	8002c2a <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	691b      	ldr	r3, [r3, #16]
 8002c20:	2201      	movs	r2, #1
 8002c22:	4393      	bics	r3, r2
 8002c24:	001a      	movs	r2, r3
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	611a      	str	r2, [r3, #16]
  }
}
 8002c2a:	46c0      	nop			@ (mov r8, r8)
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	b004      	add	sp, #16
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	46c0      	nop			@ (mov r8, r8)
 8002c34:	40012c00 	.word	0x40012c00
 8002c38:	40000400 	.word	0x40000400
 8002c3c:	40002000 	.word	0x40002000
 8002c40:	40014000 	.word	0x40014000
 8002c44:	40014400 	.word	0x40014400
 8002c48:	40014800 	.word	0x40014800
 8002c4c:	fffffcff 	.word	0xfffffcff

08002c50 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b086      	sub	sp, #24
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	60f8      	str	r0, [r7, #12]
 8002c58:	60b9      	str	r1, [r7, #8]
 8002c5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	6a1b      	ldr	r3, [r3, #32]
 8002c60:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	6a1b      	ldr	r3, [r3, #32]
 8002c66:	2201      	movs	r2, #1
 8002c68:	4393      	bics	r3, r2
 8002c6a:	001a      	movs	r2, r3
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	699b      	ldr	r3, [r3, #24]
 8002c74:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	22f0      	movs	r2, #240	@ 0xf0
 8002c7a:	4393      	bics	r3, r2
 8002c7c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	011b      	lsls	r3, r3, #4
 8002c82:	693a      	ldr	r2, [r7, #16]
 8002c84:	4313      	orrs	r3, r2
 8002c86:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	220a      	movs	r2, #10
 8002c8c:	4393      	bics	r3, r2
 8002c8e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002c90:	697a      	ldr	r2, [r7, #20]
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	4313      	orrs	r3, r2
 8002c96:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	693a      	ldr	r2, [r7, #16]
 8002c9c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	697a      	ldr	r2, [r7, #20]
 8002ca2:	621a      	str	r2, [r3, #32]
}
 8002ca4:	46c0      	nop			@ (mov r8, r8)
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	b006      	add	sp, #24
 8002caa:	bd80      	pop	{r7, pc}

08002cac <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b086      	sub	sp, #24
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	60f8      	str	r0, [r7, #12]
 8002cb4:	60b9      	str	r1, [r7, #8]
 8002cb6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	6a1b      	ldr	r3, [r3, #32]
 8002cbc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	6a1b      	ldr	r3, [r3, #32]
 8002cc2:	2210      	movs	r2, #16
 8002cc4:	4393      	bics	r3, r2
 8002cc6:	001a      	movs	r2, r3
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	699b      	ldr	r3, [r3, #24]
 8002cd0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	4a0d      	ldr	r2, [pc, #52]	@ (8002d0c <TIM_TI2_ConfigInputStage+0x60>)
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	031b      	lsls	r3, r3, #12
 8002cde:	693a      	ldr	r2, [r7, #16]
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	22a0      	movs	r2, #160	@ 0xa0
 8002ce8:	4393      	bics	r3, r2
 8002cea:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	011b      	lsls	r3, r3, #4
 8002cf0:	697a      	ldr	r2, [r7, #20]
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	693a      	ldr	r2, [r7, #16]
 8002cfa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	697a      	ldr	r2, [r7, #20]
 8002d00:	621a      	str	r2, [r3, #32]
}
 8002d02:	46c0      	nop			@ (mov r8, r8)
 8002d04:	46bd      	mov	sp, r7
 8002d06:	b006      	add	sp, #24
 8002d08:	bd80      	pop	{r7, pc}
 8002d0a:	46c0      	nop			@ (mov r8, r8)
 8002d0c:	ffff0fff 	.word	0xffff0fff

08002d10 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b084      	sub	sp, #16
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
 8002d18:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	4a08      	ldr	r2, [pc, #32]	@ (8002d44 <TIM_ITRx_SetConfig+0x34>)
 8002d24:	4013      	ands	r3, r2
 8002d26:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002d28:	683a      	ldr	r2, [r7, #0]
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	2207      	movs	r2, #7
 8002d30:	4313      	orrs	r3, r2
 8002d32:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	68fa      	ldr	r2, [r7, #12]
 8002d38:	609a      	str	r2, [r3, #8]
}
 8002d3a:	46c0      	nop			@ (mov r8, r8)
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	b004      	add	sp, #16
 8002d40:	bd80      	pop	{r7, pc}
 8002d42:	46c0      	nop			@ (mov r8, r8)
 8002d44:	ffcfff8f 	.word	0xffcfff8f

08002d48 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b086      	sub	sp, #24
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	60f8      	str	r0, [r7, #12]
 8002d50:	60b9      	str	r1, [r7, #8]
 8002d52:	607a      	str	r2, [r7, #4]
 8002d54:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	4a09      	ldr	r2, [pc, #36]	@ (8002d84 <TIM_ETR_SetConfig+0x3c>)
 8002d60:	4013      	ands	r3, r2
 8002d62:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	021a      	lsls	r2, r3, #8
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	431a      	orrs	r2, r3
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	697a      	ldr	r2, [r7, #20]
 8002d72:	4313      	orrs	r3, r2
 8002d74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	697a      	ldr	r2, [r7, #20]
 8002d7a:	609a      	str	r2, [r3, #8]
}
 8002d7c:	46c0      	nop			@ (mov r8, r8)
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	b006      	add	sp, #24
 8002d82:	bd80      	pop	{r7, pc}
 8002d84:	ffff00ff 	.word	0xffff00ff

08002d88 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b084      	sub	sp, #16
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
 8002d90:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	223c      	movs	r2, #60	@ 0x3c
 8002d96:	5c9b      	ldrb	r3, [r3, r2]
 8002d98:	2b01      	cmp	r3, #1
 8002d9a:	d101      	bne.n	8002da0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002d9c:	2302      	movs	r3, #2
 8002d9e:	e055      	b.n	8002e4c <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	223c      	movs	r2, #60	@ 0x3c
 8002da4:	2101      	movs	r1, #1
 8002da6:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	223d      	movs	r2, #61	@ 0x3d
 8002dac:	2102      	movs	r1, #2
 8002dae:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a23      	ldr	r2, [pc, #140]	@ (8002e54 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d108      	bne.n	8002ddc <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	4a22      	ldr	r2, [pc, #136]	@ (8002e58 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002dce:	4013      	ands	r3, r2
 8002dd0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	68fa      	ldr	r2, [r7, #12]
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	2270      	movs	r2, #112	@ 0x70
 8002de0:	4393      	bics	r3, r2
 8002de2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	68fa      	ldr	r2, [r7, #12]
 8002dea:	4313      	orrs	r3, r2
 8002dec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	68fa      	ldr	r2, [r7, #12]
 8002df4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a16      	ldr	r2, [pc, #88]	@ (8002e54 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d00f      	beq.n	8002e20 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681a      	ldr	r2, [r3, #0]
 8002e04:	2380      	movs	r3, #128	@ 0x80
 8002e06:	05db      	lsls	r3, r3, #23
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	d009      	beq.n	8002e20 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a12      	ldr	r2, [pc, #72]	@ (8002e5c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d004      	beq.n	8002e20 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a11      	ldr	r2, [pc, #68]	@ (8002e60 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d10c      	bne.n	8002e3a <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	2280      	movs	r2, #128	@ 0x80
 8002e24:	4393      	bics	r3, r2
 8002e26:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	68ba      	ldr	r2, [r7, #8]
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	68ba      	ldr	r2, [r7, #8]
 8002e38:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	223d      	movs	r2, #61	@ 0x3d
 8002e3e:	2101      	movs	r1, #1
 8002e40:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	223c      	movs	r2, #60	@ 0x3c
 8002e46:	2100      	movs	r1, #0
 8002e48:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002e4a:	2300      	movs	r3, #0
}
 8002e4c:	0018      	movs	r0, r3
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	b004      	add	sp, #16
 8002e52:	bd80      	pop	{r7, pc}
 8002e54:	40012c00 	.word	0x40012c00
 8002e58:	ff0fffff 	.word	0xff0fffff
 8002e5c:	40000400 	.word	0x40000400
 8002e60:	40014000 	.word	0x40014000

08002e64 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b082      	sub	sp, #8
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002e6c:	46c0      	nop			@ (mov r8, r8)
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	b002      	add	sp, #8
 8002e72:	bd80      	pop	{r7, pc}

08002e74 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b082      	sub	sp, #8
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002e7c:	46c0      	nop			@ (mov r8, r8)
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	b002      	add	sp, #8
 8002e82:	bd80      	pop	{r7, pc}

08002e84 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b082      	sub	sp, #8
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002e8c:	46c0      	nop			@ (mov r8, r8)
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	b002      	add	sp, #8
 8002e92:	bd80      	pop	{r7, pc}

08002e94 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b082      	sub	sp, #8
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d101      	bne.n	8002ea6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e046      	b.n	8002f34 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2288      	movs	r2, #136	@ 0x88
 8002eaa:	589b      	ldr	r3, [r3, r2]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d107      	bne.n	8002ec0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2284      	movs	r2, #132	@ 0x84
 8002eb4:	2100      	movs	r1, #0
 8002eb6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	0018      	movs	r0, r3
 8002ebc:	f7fe f86c 	bl	8000f98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2288      	movs	r2, #136	@ 0x88
 8002ec4:	2124      	movs	r1, #36	@ 0x24
 8002ec6:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	681a      	ldr	r2, [r3, #0]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	2101      	movs	r1, #1
 8002ed4:	438a      	bics	r2, r1
 8002ed6:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d003      	beq.n	8002ee8 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	0018      	movs	r0, r3
 8002ee4:	f000 faea 	bl	80034bc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	0018      	movs	r0, r3
 8002eec:	f000 f828 	bl	8002f40 <UART_SetConfig>
 8002ef0:	0003      	movs	r3, r0
 8002ef2:	2b01      	cmp	r3, #1
 8002ef4:	d101      	bne.n	8002efa <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e01c      	b.n	8002f34 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	685a      	ldr	r2, [r3, #4]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	490d      	ldr	r1, [pc, #52]	@ (8002f3c <HAL_UART_Init+0xa8>)
 8002f06:	400a      	ands	r2, r1
 8002f08:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	689a      	ldr	r2, [r3, #8]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	212a      	movs	r1, #42	@ 0x2a
 8002f16:	438a      	bics	r2, r1
 8002f18:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	2101      	movs	r1, #1
 8002f26:	430a      	orrs	r2, r1
 8002f28:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	0018      	movs	r0, r3
 8002f2e:	f000 fb79 	bl	8003624 <UART_CheckIdleState>
 8002f32:	0003      	movs	r3, r0
}
 8002f34:	0018      	movs	r0, r3
 8002f36:	46bd      	mov	sp, r7
 8002f38:	b002      	add	sp, #8
 8002f3a:	bd80      	pop	{r7, pc}
 8002f3c:	ffffb7ff 	.word	0xffffb7ff

08002f40 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f40:	b5b0      	push	{r4, r5, r7, lr}
 8002f42:	b090      	sub	sp, #64	@ 0x40
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002f48:	231a      	movs	r3, #26
 8002f4a:	2220      	movs	r2, #32
 8002f4c:	189b      	adds	r3, r3, r2
 8002f4e:	19db      	adds	r3, r3, r7
 8002f50:	2200      	movs	r2, #0
 8002f52:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002f54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f56:	689a      	ldr	r2, [r3, #8]
 8002f58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f5a:	691b      	ldr	r3, [r3, #16]
 8002f5c:	431a      	orrs	r2, r3
 8002f5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f60:	695b      	ldr	r3, [r3, #20]
 8002f62:	431a      	orrs	r2, r3
 8002f64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f66:	69db      	ldr	r3, [r3, #28]
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002f6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4aaf      	ldr	r2, [pc, #700]	@ (8003230 <UART_SetConfig+0x2f0>)
 8002f74:	4013      	ands	r3, r2
 8002f76:	0019      	movs	r1, r3
 8002f78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f7e:	430b      	orrs	r3, r1
 8002f80:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	4aaa      	ldr	r2, [pc, #680]	@ (8003234 <UART_SetConfig+0x2f4>)
 8002f8a:	4013      	ands	r3, r2
 8002f8c:	0018      	movs	r0, r3
 8002f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f90:	68d9      	ldr	r1, [r3, #12]
 8002f92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f94:	681a      	ldr	r2, [r3, #0]
 8002f96:	0003      	movs	r3, r0
 8002f98:	430b      	orrs	r3, r1
 8002f9a:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002f9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f9e:	699b      	ldr	r3, [r3, #24]
 8002fa0:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4aa4      	ldr	r2, [pc, #656]	@ (8003238 <UART_SetConfig+0x2f8>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d004      	beq.n	8002fb6 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002fac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fae:	6a1b      	ldr	r3, [r3, #32]
 8002fb0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	4a9f      	ldr	r2, [pc, #636]	@ (800323c <UART_SetConfig+0x2fc>)
 8002fbe:	4013      	ands	r3, r2
 8002fc0:	0019      	movs	r1, r3
 8002fc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002fc8:	430b      	orrs	r3, r1
 8002fca:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002fcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fd2:	220f      	movs	r2, #15
 8002fd4:	4393      	bics	r3, r2
 8002fd6:	0018      	movs	r0, r3
 8002fd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fda:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002fdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	0003      	movs	r3, r0
 8002fe2:	430b      	orrs	r3, r1
 8002fe4:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002fe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a95      	ldr	r2, [pc, #596]	@ (8003240 <UART_SetConfig+0x300>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d131      	bne.n	8003054 <UART_SetConfig+0x114>
 8002ff0:	4b94      	ldr	r3, [pc, #592]	@ (8003244 <UART_SetConfig+0x304>)
 8002ff2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ff4:	2203      	movs	r2, #3
 8002ff6:	4013      	ands	r3, r2
 8002ff8:	2b03      	cmp	r3, #3
 8002ffa:	d01d      	beq.n	8003038 <UART_SetConfig+0xf8>
 8002ffc:	d823      	bhi.n	8003046 <UART_SetConfig+0x106>
 8002ffe:	2b02      	cmp	r3, #2
 8003000:	d00c      	beq.n	800301c <UART_SetConfig+0xdc>
 8003002:	d820      	bhi.n	8003046 <UART_SetConfig+0x106>
 8003004:	2b00      	cmp	r3, #0
 8003006:	d002      	beq.n	800300e <UART_SetConfig+0xce>
 8003008:	2b01      	cmp	r3, #1
 800300a:	d00e      	beq.n	800302a <UART_SetConfig+0xea>
 800300c:	e01b      	b.n	8003046 <UART_SetConfig+0x106>
 800300e:	231b      	movs	r3, #27
 8003010:	2220      	movs	r2, #32
 8003012:	189b      	adds	r3, r3, r2
 8003014:	19db      	adds	r3, r3, r7
 8003016:	2200      	movs	r2, #0
 8003018:	701a      	strb	r2, [r3, #0]
 800301a:	e0b4      	b.n	8003186 <UART_SetConfig+0x246>
 800301c:	231b      	movs	r3, #27
 800301e:	2220      	movs	r2, #32
 8003020:	189b      	adds	r3, r3, r2
 8003022:	19db      	adds	r3, r3, r7
 8003024:	2202      	movs	r2, #2
 8003026:	701a      	strb	r2, [r3, #0]
 8003028:	e0ad      	b.n	8003186 <UART_SetConfig+0x246>
 800302a:	231b      	movs	r3, #27
 800302c:	2220      	movs	r2, #32
 800302e:	189b      	adds	r3, r3, r2
 8003030:	19db      	adds	r3, r3, r7
 8003032:	2204      	movs	r2, #4
 8003034:	701a      	strb	r2, [r3, #0]
 8003036:	e0a6      	b.n	8003186 <UART_SetConfig+0x246>
 8003038:	231b      	movs	r3, #27
 800303a:	2220      	movs	r2, #32
 800303c:	189b      	adds	r3, r3, r2
 800303e:	19db      	adds	r3, r3, r7
 8003040:	2208      	movs	r2, #8
 8003042:	701a      	strb	r2, [r3, #0]
 8003044:	e09f      	b.n	8003186 <UART_SetConfig+0x246>
 8003046:	231b      	movs	r3, #27
 8003048:	2220      	movs	r2, #32
 800304a:	189b      	adds	r3, r3, r2
 800304c:	19db      	adds	r3, r3, r7
 800304e:	2210      	movs	r2, #16
 8003050:	701a      	strb	r2, [r3, #0]
 8003052:	e098      	b.n	8003186 <UART_SetConfig+0x246>
 8003054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a7b      	ldr	r2, [pc, #492]	@ (8003248 <UART_SetConfig+0x308>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d131      	bne.n	80030c2 <UART_SetConfig+0x182>
 800305e:	4b79      	ldr	r3, [pc, #484]	@ (8003244 <UART_SetConfig+0x304>)
 8003060:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003062:	220c      	movs	r2, #12
 8003064:	4013      	ands	r3, r2
 8003066:	2b0c      	cmp	r3, #12
 8003068:	d01d      	beq.n	80030a6 <UART_SetConfig+0x166>
 800306a:	d823      	bhi.n	80030b4 <UART_SetConfig+0x174>
 800306c:	2b08      	cmp	r3, #8
 800306e:	d00c      	beq.n	800308a <UART_SetConfig+0x14a>
 8003070:	d820      	bhi.n	80030b4 <UART_SetConfig+0x174>
 8003072:	2b00      	cmp	r3, #0
 8003074:	d002      	beq.n	800307c <UART_SetConfig+0x13c>
 8003076:	2b04      	cmp	r3, #4
 8003078:	d00e      	beq.n	8003098 <UART_SetConfig+0x158>
 800307a:	e01b      	b.n	80030b4 <UART_SetConfig+0x174>
 800307c:	231b      	movs	r3, #27
 800307e:	2220      	movs	r2, #32
 8003080:	189b      	adds	r3, r3, r2
 8003082:	19db      	adds	r3, r3, r7
 8003084:	2200      	movs	r2, #0
 8003086:	701a      	strb	r2, [r3, #0]
 8003088:	e07d      	b.n	8003186 <UART_SetConfig+0x246>
 800308a:	231b      	movs	r3, #27
 800308c:	2220      	movs	r2, #32
 800308e:	189b      	adds	r3, r3, r2
 8003090:	19db      	adds	r3, r3, r7
 8003092:	2202      	movs	r2, #2
 8003094:	701a      	strb	r2, [r3, #0]
 8003096:	e076      	b.n	8003186 <UART_SetConfig+0x246>
 8003098:	231b      	movs	r3, #27
 800309a:	2220      	movs	r2, #32
 800309c:	189b      	adds	r3, r3, r2
 800309e:	19db      	adds	r3, r3, r7
 80030a0:	2204      	movs	r2, #4
 80030a2:	701a      	strb	r2, [r3, #0]
 80030a4:	e06f      	b.n	8003186 <UART_SetConfig+0x246>
 80030a6:	231b      	movs	r3, #27
 80030a8:	2220      	movs	r2, #32
 80030aa:	189b      	adds	r3, r3, r2
 80030ac:	19db      	adds	r3, r3, r7
 80030ae:	2208      	movs	r2, #8
 80030b0:	701a      	strb	r2, [r3, #0]
 80030b2:	e068      	b.n	8003186 <UART_SetConfig+0x246>
 80030b4:	231b      	movs	r3, #27
 80030b6:	2220      	movs	r2, #32
 80030b8:	189b      	adds	r3, r3, r2
 80030ba:	19db      	adds	r3, r3, r7
 80030bc:	2210      	movs	r2, #16
 80030be:	701a      	strb	r2, [r3, #0]
 80030c0:	e061      	b.n	8003186 <UART_SetConfig+0x246>
 80030c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a61      	ldr	r2, [pc, #388]	@ (800324c <UART_SetConfig+0x30c>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d106      	bne.n	80030da <UART_SetConfig+0x19a>
 80030cc:	231b      	movs	r3, #27
 80030ce:	2220      	movs	r2, #32
 80030d0:	189b      	adds	r3, r3, r2
 80030d2:	19db      	adds	r3, r3, r7
 80030d4:	2200      	movs	r2, #0
 80030d6:	701a      	strb	r2, [r3, #0]
 80030d8:	e055      	b.n	8003186 <UART_SetConfig+0x246>
 80030da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a5c      	ldr	r2, [pc, #368]	@ (8003250 <UART_SetConfig+0x310>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d106      	bne.n	80030f2 <UART_SetConfig+0x1b2>
 80030e4:	231b      	movs	r3, #27
 80030e6:	2220      	movs	r2, #32
 80030e8:	189b      	adds	r3, r3, r2
 80030ea:	19db      	adds	r3, r3, r7
 80030ec:	2200      	movs	r2, #0
 80030ee:	701a      	strb	r2, [r3, #0]
 80030f0:	e049      	b.n	8003186 <UART_SetConfig+0x246>
 80030f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a50      	ldr	r2, [pc, #320]	@ (8003238 <UART_SetConfig+0x2f8>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d13e      	bne.n	800317a <UART_SetConfig+0x23a>
 80030fc:	4b51      	ldr	r3, [pc, #324]	@ (8003244 <UART_SetConfig+0x304>)
 80030fe:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003100:	23c0      	movs	r3, #192	@ 0xc0
 8003102:	011b      	lsls	r3, r3, #4
 8003104:	4013      	ands	r3, r2
 8003106:	22c0      	movs	r2, #192	@ 0xc0
 8003108:	0112      	lsls	r2, r2, #4
 800310a:	4293      	cmp	r3, r2
 800310c:	d027      	beq.n	800315e <UART_SetConfig+0x21e>
 800310e:	22c0      	movs	r2, #192	@ 0xc0
 8003110:	0112      	lsls	r2, r2, #4
 8003112:	4293      	cmp	r3, r2
 8003114:	d82a      	bhi.n	800316c <UART_SetConfig+0x22c>
 8003116:	2280      	movs	r2, #128	@ 0x80
 8003118:	0112      	lsls	r2, r2, #4
 800311a:	4293      	cmp	r3, r2
 800311c:	d011      	beq.n	8003142 <UART_SetConfig+0x202>
 800311e:	2280      	movs	r2, #128	@ 0x80
 8003120:	0112      	lsls	r2, r2, #4
 8003122:	4293      	cmp	r3, r2
 8003124:	d822      	bhi.n	800316c <UART_SetConfig+0x22c>
 8003126:	2b00      	cmp	r3, #0
 8003128:	d004      	beq.n	8003134 <UART_SetConfig+0x1f4>
 800312a:	2280      	movs	r2, #128	@ 0x80
 800312c:	00d2      	lsls	r2, r2, #3
 800312e:	4293      	cmp	r3, r2
 8003130:	d00e      	beq.n	8003150 <UART_SetConfig+0x210>
 8003132:	e01b      	b.n	800316c <UART_SetConfig+0x22c>
 8003134:	231b      	movs	r3, #27
 8003136:	2220      	movs	r2, #32
 8003138:	189b      	adds	r3, r3, r2
 800313a:	19db      	adds	r3, r3, r7
 800313c:	2200      	movs	r2, #0
 800313e:	701a      	strb	r2, [r3, #0]
 8003140:	e021      	b.n	8003186 <UART_SetConfig+0x246>
 8003142:	231b      	movs	r3, #27
 8003144:	2220      	movs	r2, #32
 8003146:	189b      	adds	r3, r3, r2
 8003148:	19db      	adds	r3, r3, r7
 800314a:	2202      	movs	r2, #2
 800314c:	701a      	strb	r2, [r3, #0]
 800314e:	e01a      	b.n	8003186 <UART_SetConfig+0x246>
 8003150:	231b      	movs	r3, #27
 8003152:	2220      	movs	r2, #32
 8003154:	189b      	adds	r3, r3, r2
 8003156:	19db      	adds	r3, r3, r7
 8003158:	2204      	movs	r2, #4
 800315a:	701a      	strb	r2, [r3, #0]
 800315c:	e013      	b.n	8003186 <UART_SetConfig+0x246>
 800315e:	231b      	movs	r3, #27
 8003160:	2220      	movs	r2, #32
 8003162:	189b      	adds	r3, r3, r2
 8003164:	19db      	adds	r3, r3, r7
 8003166:	2208      	movs	r2, #8
 8003168:	701a      	strb	r2, [r3, #0]
 800316a:	e00c      	b.n	8003186 <UART_SetConfig+0x246>
 800316c:	231b      	movs	r3, #27
 800316e:	2220      	movs	r2, #32
 8003170:	189b      	adds	r3, r3, r2
 8003172:	19db      	adds	r3, r3, r7
 8003174:	2210      	movs	r2, #16
 8003176:	701a      	strb	r2, [r3, #0]
 8003178:	e005      	b.n	8003186 <UART_SetConfig+0x246>
 800317a:	231b      	movs	r3, #27
 800317c:	2220      	movs	r2, #32
 800317e:	189b      	adds	r3, r3, r2
 8003180:	19db      	adds	r3, r3, r7
 8003182:	2210      	movs	r2, #16
 8003184:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a2b      	ldr	r2, [pc, #172]	@ (8003238 <UART_SetConfig+0x2f8>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d000      	beq.n	8003192 <UART_SetConfig+0x252>
 8003190:	e0a9      	b.n	80032e6 <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003192:	231b      	movs	r3, #27
 8003194:	2220      	movs	r2, #32
 8003196:	189b      	adds	r3, r3, r2
 8003198:	19db      	adds	r3, r3, r7
 800319a:	781b      	ldrb	r3, [r3, #0]
 800319c:	2b08      	cmp	r3, #8
 800319e:	d015      	beq.n	80031cc <UART_SetConfig+0x28c>
 80031a0:	dc18      	bgt.n	80031d4 <UART_SetConfig+0x294>
 80031a2:	2b04      	cmp	r3, #4
 80031a4:	d00d      	beq.n	80031c2 <UART_SetConfig+0x282>
 80031a6:	dc15      	bgt.n	80031d4 <UART_SetConfig+0x294>
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d002      	beq.n	80031b2 <UART_SetConfig+0x272>
 80031ac:	2b02      	cmp	r3, #2
 80031ae:	d005      	beq.n	80031bc <UART_SetConfig+0x27c>
 80031b0:	e010      	b.n	80031d4 <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80031b2:	f7ff f811 	bl	80021d8 <HAL_RCC_GetPCLK1Freq>
 80031b6:	0003      	movs	r3, r0
 80031b8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80031ba:	e014      	b.n	80031e6 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80031bc:	4b25      	ldr	r3, [pc, #148]	@ (8003254 <UART_SetConfig+0x314>)
 80031be:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80031c0:	e011      	b.n	80031e6 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80031c2:	f7fe ff7d 	bl	80020c0 <HAL_RCC_GetSysClockFreq>
 80031c6:	0003      	movs	r3, r0
 80031c8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80031ca:	e00c      	b.n	80031e6 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80031cc:	2380      	movs	r3, #128	@ 0x80
 80031ce:	021b      	lsls	r3, r3, #8
 80031d0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80031d2:	e008      	b.n	80031e6 <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 80031d4:	2300      	movs	r3, #0
 80031d6:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 80031d8:	231a      	movs	r3, #26
 80031da:	2220      	movs	r2, #32
 80031dc:	189b      	adds	r3, r3, r2
 80031de:	19db      	adds	r3, r3, r7
 80031e0:	2201      	movs	r2, #1
 80031e2:	701a      	strb	r2, [r3, #0]
        break;
 80031e4:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80031e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d100      	bne.n	80031ee <UART_SetConfig+0x2ae>
 80031ec:	e14b      	b.n	8003486 <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80031ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031f0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80031f2:	4b19      	ldr	r3, [pc, #100]	@ (8003258 <UART_SetConfig+0x318>)
 80031f4:	0052      	lsls	r2, r2, #1
 80031f6:	5ad3      	ldrh	r3, [r2, r3]
 80031f8:	0019      	movs	r1, r3
 80031fa:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80031fc:	f7fc ff82 	bl	8000104 <__udivsi3>
 8003200:	0003      	movs	r3, r0
 8003202:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003204:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003206:	685a      	ldr	r2, [r3, #4]
 8003208:	0013      	movs	r3, r2
 800320a:	005b      	lsls	r3, r3, #1
 800320c:	189b      	adds	r3, r3, r2
 800320e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003210:	429a      	cmp	r2, r3
 8003212:	d305      	bcc.n	8003220 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003214:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800321a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800321c:	429a      	cmp	r2, r3
 800321e:	d91d      	bls.n	800325c <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8003220:	231a      	movs	r3, #26
 8003222:	2220      	movs	r2, #32
 8003224:	189b      	adds	r3, r3, r2
 8003226:	19db      	adds	r3, r3, r7
 8003228:	2201      	movs	r2, #1
 800322a:	701a      	strb	r2, [r3, #0]
 800322c:	e12b      	b.n	8003486 <UART_SetConfig+0x546>
 800322e:	46c0      	nop			@ (mov r8, r8)
 8003230:	cfff69f3 	.word	0xcfff69f3
 8003234:	ffffcfff 	.word	0xffffcfff
 8003238:	40008000 	.word	0x40008000
 800323c:	11fff4ff 	.word	0x11fff4ff
 8003240:	40013800 	.word	0x40013800
 8003244:	40021000 	.word	0x40021000
 8003248:	40004400 	.word	0x40004400
 800324c:	40004800 	.word	0x40004800
 8003250:	40004c00 	.word	0x40004c00
 8003254:	00f42400 	.word	0x00f42400
 8003258:	08003c28 	.word	0x08003c28
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800325c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800325e:	61bb      	str	r3, [r7, #24]
 8003260:	2300      	movs	r3, #0
 8003262:	61fb      	str	r3, [r7, #28]
 8003264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003266:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003268:	4b92      	ldr	r3, [pc, #584]	@ (80034b4 <UART_SetConfig+0x574>)
 800326a:	0052      	lsls	r2, r2, #1
 800326c:	5ad3      	ldrh	r3, [r2, r3]
 800326e:	613b      	str	r3, [r7, #16]
 8003270:	2300      	movs	r3, #0
 8003272:	617b      	str	r3, [r7, #20]
 8003274:	693a      	ldr	r2, [r7, #16]
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	69b8      	ldr	r0, [r7, #24]
 800327a:	69f9      	ldr	r1, [r7, #28]
 800327c:	f7fd f8b8 	bl	80003f0 <__aeabi_uldivmod>
 8003280:	0002      	movs	r2, r0
 8003282:	000b      	movs	r3, r1
 8003284:	0e11      	lsrs	r1, r2, #24
 8003286:	021d      	lsls	r5, r3, #8
 8003288:	430d      	orrs	r5, r1
 800328a:	0214      	lsls	r4, r2, #8
 800328c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	085b      	lsrs	r3, r3, #1
 8003292:	60bb      	str	r3, [r7, #8]
 8003294:	2300      	movs	r3, #0
 8003296:	60fb      	str	r3, [r7, #12]
 8003298:	68b8      	ldr	r0, [r7, #8]
 800329a:	68f9      	ldr	r1, [r7, #12]
 800329c:	1900      	adds	r0, r0, r4
 800329e:	4169      	adcs	r1, r5
 80032a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	603b      	str	r3, [r7, #0]
 80032a6:	2300      	movs	r3, #0
 80032a8:	607b      	str	r3, [r7, #4]
 80032aa:	683a      	ldr	r2, [r7, #0]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	f7fd f89f 	bl	80003f0 <__aeabi_uldivmod>
 80032b2:	0002      	movs	r2, r0
 80032b4:	000b      	movs	r3, r1
 80032b6:	0013      	movs	r3, r2
 80032b8:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80032ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80032bc:	23c0      	movs	r3, #192	@ 0xc0
 80032be:	009b      	lsls	r3, r3, #2
 80032c0:	429a      	cmp	r2, r3
 80032c2:	d309      	bcc.n	80032d8 <UART_SetConfig+0x398>
 80032c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80032c6:	2380      	movs	r3, #128	@ 0x80
 80032c8:	035b      	lsls	r3, r3, #13
 80032ca:	429a      	cmp	r2, r3
 80032cc:	d204      	bcs.n	80032d8 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 80032ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80032d4:	60da      	str	r2, [r3, #12]
 80032d6:	e0d6      	b.n	8003486 <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 80032d8:	231a      	movs	r3, #26
 80032da:	2220      	movs	r2, #32
 80032dc:	189b      	adds	r3, r3, r2
 80032de:	19db      	adds	r3, r3, r7
 80032e0:	2201      	movs	r2, #1
 80032e2:	701a      	strb	r2, [r3, #0]
 80032e4:	e0cf      	b.n	8003486 <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80032e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032e8:	69da      	ldr	r2, [r3, #28]
 80032ea:	2380      	movs	r3, #128	@ 0x80
 80032ec:	021b      	lsls	r3, r3, #8
 80032ee:	429a      	cmp	r2, r3
 80032f0:	d000      	beq.n	80032f4 <UART_SetConfig+0x3b4>
 80032f2:	e070      	b.n	80033d6 <UART_SetConfig+0x496>
  {
    switch (clocksource)
 80032f4:	231b      	movs	r3, #27
 80032f6:	2220      	movs	r2, #32
 80032f8:	189b      	adds	r3, r3, r2
 80032fa:	19db      	adds	r3, r3, r7
 80032fc:	781b      	ldrb	r3, [r3, #0]
 80032fe:	2b08      	cmp	r3, #8
 8003300:	d015      	beq.n	800332e <UART_SetConfig+0x3ee>
 8003302:	dc18      	bgt.n	8003336 <UART_SetConfig+0x3f6>
 8003304:	2b04      	cmp	r3, #4
 8003306:	d00d      	beq.n	8003324 <UART_SetConfig+0x3e4>
 8003308:	dc15      	bgt.n	8003336 <UART_SetConfig+0x3f6>
 800330a:	2b00      	cmp	r3, #0
 800330c:	d002      	beq.n	8003314 <UART_SetConfig+0x3d4>
 800330e:	2b02      	cmp	r3, #2
 8003310:	d005      	beq.n	800331e <UART_SetConfig+0x3de>
 8003312:	e010      	b.n	8003336 <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003314:	f7fe ff60 	bl	80021d8 <HAL_RCC_GetPCLK1Freq>
 8003318:	0003      	movs	r3, r0
 800331a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800331c:	e014      	b.n	8003348 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800331e:	4b66      	ldr	r3, [pc, #408]	@ (80034b8 <UART_SetConfig+0x578>)
 8003320:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003322:	e011      	b.n	8003348 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003324:	f7fe fecc 	bl	80020c0 <HAL_RCC_GetSysClockFreq>
 8003328:	0003      	movs	r3, r0
 800332a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800332c:	e00c      	b.n	8003348 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800332e:	2380      	movs	r3, #128	@ 0x80
 8003330:	021b      	lsls	r3, r3, #8
 8003332:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003334:	e008      	b.n	8003348 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8003336:	2300      	movs	r3, #0
 8003338:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800333a:	231a      	movs	r3, #26
 800333c:	2220      	movs	r2, #32
 800333e:	189b      	adds	r3, r3, r2
 8003340:	19db      	adds	r3, r3, r7
 8003342:	2201      	movs	r2, #1
 8003344:	701a      	strb	r2, [r3, #0]
        break;
 8003346:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003348:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800334a:	2b00      	cmp	r3, #0
 800334c:	d100      	bne.n	8003350 <UART_SetConfig+0x410>
 800334e:	e09a      	b.n	8003486 <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003350:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003352:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003354:	4b57      	ldr	r3, [pc, #348]	@ (80034b4 <UART_SetConfig+0x574>)
 8003356:	0052      	lsls	r2, r2, #1
 8003358:	5ad3      	ldrh	r3, [r2, r3]
 800335a:	0019      	movs	r1, r3
 800335c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800335e:	f7fc fed1 	bl	8000104 <__udivsi3>
 8003362:	0003      	movs	r3, r0
 8003364:	005a      	lsls	r2, r3, #1
 8003366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	085b      	lsrs	r3, r3, #1
 800336c:	18d2      	adds	r2, r2, r3
 800336e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	0019      	movs	r1, r3
 8003374:	0010      	movs	r0, r2
 8003376:	f7fc fec5 	bl	8000104 <__udivsi3>
 800337a:	0003      	movs	r3, r0
 800337c:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800337e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003380:	2b0f      	cmp	r3, #15
 8003382:	d921      	bls.n	80033c8 <UART_SetConfig+0x488>
 8003384:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003386:	2380      	movs	r3, #128	@ 0x80
 8003388:	025b      	lsls	r3, r3, #9
 800338a:	429a      	cmp	r2, r3
 800338c:	d21c      	bcs.n	80033c8 <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800338e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003390:	b29a      	uxth	r2, r3
 8003392:	200e      	movs	r0, #14
 8003394:	2420      	movs	r4, #32
 8003396:	1903      	adds	r3, r0, r4
 8003398:	19db      	adds	r3, r3, r7
 800339a:	210f      	movs	r1, #15
 800339c:	438a      	bics	r2, r1
 800339e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80033a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033a2:	085b      	lsrs	r3, r3, #1
 80033a4:	b29b      	uxth	r3, r3
 80033a6:	2207      	movs	r2, #7
 80033a8:	4013      	ands	r3, r2
 80033aa:	b299      	uxth	r1, r3
 80033ac:	1903      	adds	r3, r0, r4
 80033ae:	19db      	adds	r3, r3, r7
 80033b0:	1902      	adds	r2, r0, r4
 80033b2:	19d2      	adds	r2, r2, r7
 80033b4:	8812      	ldrh	r2, [r2, #0]
 80033b6:	430a      	orrs	r2, r1
 80033b8:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80033ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	1902      	adds	r2, r0, r4
 80033c0:	19d2      	adds	r2, r2, r7
 80033c2:	8812      	ldrh	r2, [r2, #0]
 80033c4:	60da      	str	r2, [r3, #12]
 80033c6:	e05e      	b.n	8003486 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 80033c8:	231a      	movs	r3, #26
 80033ca:	2220      	movs	r2, #32
 80033cc:	189b      	adds	r3, r3, r2
 80033ce:	19db      	adds	r3, r3, r7
 80033d0:	2201      	movs	r2, #1
 80033d2:	701a      	strb	r2, [r3, #0]
 80033d4:	e057      	b.n	8003486 <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 80033d6:	231b      	movs	r3, #27
 80033d8:	2220      	movs	r2, #32
 80033da:	189b      	adds	r3, r3, r2
 80033dc:	19db      	adds	r3, r3, r7
 80033de:	781b      	ldrb	r3, [r3, #0]
 80033e0:	2b08      	cmp	r3, #8
 80033e2:	d015      	beq.n	8003410 <UART_SetConfig+0x4d0>
 80033e4:	dc18      	bgt.n	8003418 <UART_SetConfig+0x4d8>
 80033e6:	2b04      	cmp	r3, #4
 80033e8:	d00d      	beq.n	8003406 <UART_SetConfig+0x4c6>
 80033ea:	dc15      	bgt.n	8003418 <UART_SetConfig+0x4d8>
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d002      	beq.n	80033f6 <UART_SetConfig+0x4b6>
 80033f0:	2b02      	cmp	r3, #2
 80033f2:	d005      	beq.n	8003400 <UART_SetConfig+0x4c0>
 80033f4:	e010      	b.n	8003418 <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80033f6:	f7fe feef 	bl	80021d8 <HAL_RCC_GetPCLK1Freq>
 80033fa:	0003      	movs	r3, r0
 80033fc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80033fe:	e014      	b.n	800342a <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003400:	4b2d      	ldr	r3, [pc, #180]	@ (80034b8 <UART_SetConfig+0x578>)
 8003402:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003404:	e011      	b.n	800342a <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003406:	f7fe fe5b 	bl	80020c0 <HAL_RCC_GetSysClockFreq>
 800340a:	0003      	movs	r3, r0
 800340c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800340e:	e00c      	b.n	800342a <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003410:	2380      	movs	r3, #128	@ 0x80
 8003412:	021b      	lsls	r3, r3, #8
 8003414:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003416:	e008      	b.n	800342a <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 8003418:	2300      	movs	r3, #0
 800341a:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800341c:	231a      	movs	r3, #26
 800341e:	2220      	movs	r2, #32
 8003420:	189b      	adds	r3, r3, r2
 8003422:	19db      	adds	r3, r3, r7
 8003424:	2201      	movs	r2, #1
 8003426:	701a      	strb	r2, [r3, #0]
        break;
 8003428:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 800342a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800342c:	2b00      	cmp	r3, #0
 800342e:	d02a      	beq.n	8003486 <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003432:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003434:	4b1f      	ldr	r3, [pc, #124]	@ (80034b4 <UART_SetConfig+0x574>)
 8003436:	0052      	lsls	r2, r2, #1
 8003438:	5ad3      	ldrh	r3, [r2, r3]
 800343a:	0019      	movs	r1, r3
 800343c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800343e:	f7fc fe61 	bl	8000104 <__udivsi3>
 8003442:	0003      	movs	r3, r0
 8003444:	001a      	movs	r2, r3
 8003446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	085b      	lsrs	r3, r3, #1
 800344c:	18d2      	adds	r2, r2, r3
 800344e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	0019      	movs	r1, r3
 8003454:	0010      	movs	r0, r2
 8003456:	f7fc fe55 	bl	8000104 <__udivsi3>
 800345a:	0003      	movs	r3, r0
 800345c:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800345e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003460:	2b0f      	cmp	r3, #15
 8003462:	d90a      	bls.n	800347a <UART_SetConfig+0x53a>
 8003464:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003466:	2380      	movs	r3, #128	@ 0x80
 8003468:	025b      	lsls	r3, r3, #9
 800346a:	429a      	cmp	r2, r3
 800346c:	d205      	bcs.n	800347a <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800346e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003470:	b29a      	uxth	r2, r3
 8003472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	60da      	str	r2, [r3, #12]
 8003478:	e005      	b.n	8003486 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 800347a:	231a      	movs	r3, #26
 800347c:	2220      	movs	r2, #32
 800347e:	189b      	adds	r3, r3, r2
 8003480:	19db      	adds	r3, r3, r7
 8003482:	2201      	movs	r2, #1
 8003484:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003488:	226a      	movs	r2, #106	@ 0x6a
 800348a:	2101      	movs	r1, #1
 800348c:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800348e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003490:	2268      	movs	r2, #104	@ 0x68
 8003492:	2101      	movs	r1, #1
 8003494:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003498:	2200      	movs	r2, #0
 800349a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800349c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800349e:	2200      	movs	r2, #0
 80034a0:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80034a2:	231a      	movs	r3, #26
 80034a4:	2220      	movs	r2, #32
 80034a6:	189b      	adds	r3, r3, r2
 80034a8:	19db      	adds	r3, r3, r7
 80034aa:	781b      	ldrb	r3, [r3, #0]
}
 80034ac:	0018      	movs	r0, r3
 80034ae:	46bd      	mov	sp, r7
 80034b0:	b010      	add	sp, #64	@ 0x40
 80034b2:	bdb0      	pop	{r4, r5, r7, pc}
 80034b4:	08003c28 	.word	0x08003c28
 80034b8:	00f42400 	.word	0x00f42400

080034bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b082      	sub	sp, #8
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034c8:	2208      	movs	r2, #8
 80034ca:	4013      	ands	r3, r2
 80034cc:	d00b      	beq.n	80034e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	4a4a      	ldr	r2, [pc, #296]	@ (8003600 <UART_AdvFeatureConfig+0x144>)
 80034d6:	4013      	ands	r3, r2
 80034d8:	0019      	movs	r1, r3
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	430a      	orrs	r2, r1
 80034e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034ea:	2201      	movs	r2, #1
 80034ec:	4013      	ands	r3, r2
 80034ee:	d00b      	beq.n	8003508 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	4a43      	ldr	r2, [pc, #268]	@ (8003604 <UART_AdvFeatureConfig+0x148>)
 80034f8:	4013      	ands	r3, r2
 80034fa:	0019      	movs	r1, r3
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	430a      	orrs	r2, r1
 8003506:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800350c:	2202      	movs	r2, #2
 800350e:	4013      	ands	r3, r2
 8003510:	d00b      	beq.n	800352a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	4a3b      	ldr	r2, [pc, #236]	@ (8003608 <UART_AdvFeatureConfig+0x14c>)
 800351a:	4013      	ands	r3, r2
 800351c:	0019      	movs	r1, r3
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	430a      	orrs	r2, r1
 8003528:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800352e:	2204      	movs	r2, #4
 8003530:	4013      	ands	r3, r2
 8003532:	d00b      	beq.n	800354c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	4a34      	ldr	r2, [pc, #208]	@ (800360c <UART_AdvFeatureConfig+0x150>)
 800353c:	4013      	ands	r3, r2
 800353e:	0019      	movs	r1, r3
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	430a      	orrs	r2, r1
 800354a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003550:	2210      	movs	r2, #16
 8003552:	4013      	ands	r3, r2
 8003554:	d00b      	beq.n	800356e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	4a2c      	ldr	r2, [pc, #176]	@ (8003610 <UART_AdvFeatureConfig+0x154>)
 800355e:	4013      	ands	r3, r2
 8003560:	0019      	movs	r1, r3
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	430a      	orrs	r2, r1
 800356c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003572:	2220      	movs	r2, #32
 8003574:	4013      	ands	r3, r2
 8003576:	d00b      	beq.n	8003590 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	689b      	ldr	r3, [r3, #8]
 800357e:	4a25      	ldr	r2, [pc, #148]	@ (8003614 <UART_AdvFeatureConfig+0x158>)
 8003580:	4013      	ands	r3, r2
 8003582:	0019      	movs	r1, r3
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	430a      	orrs	r2, r1
 800358e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003594:	2240      	movs	r2, #64	@ 0x40
 8003596:	4013      	ands	r3, r2
 8003598:	d01d      	beq.n	80035d6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	4a1d      	ldr	r2, [pc, #116]	@ (8003618 <UART_AdvFeatureConfig+0x15c>)
 80035a2:	4013      	ands	r3, r2
 80035a4:	0019      	movs	r1, r3
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	430a      	orrs	r2, r1
 80035b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80035b6:	2380      	movs	r3, #128	@ 0x80
 80035b8:	035b      	lsls	r3, r3, #13
 80035ba:	429a      	cmp	r2, r3
 80035bc:	d10b      	bne.n	80035d6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	4a15      	ldr	r2, [pc, #84]	@ (800361c <UART_AdvFeatureConfig+0x160>)
 80035c6:	4013      	ands	r3, r2
 80035c8:	0019      	movs	r1, r3
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	430a      	orrs	r2, r1
 80035d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035da:	2280      	movs	r2, #128	@ 0x80
 80035dc:	4013      	ands	r3, r2
 80035de:	d00b      	beq.n	80035f8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	4a0e      	ldr	r2, [pc, #56]	@ (8003620 <UART_AdvFeatureConfig+0x164>)
 80035e8:	4013      	ands	r3, r2
 80035ea:	0019      	movs	r1, r3
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	430a      	orrs	r2, r1
 80035f6:	605a      	str	r2, [r3, #4]
  }
}
 80035f8:	46c0      	nop			@ (mov r8, r8)
 80035fa:	46bd      	mov	sp, r7
 80035fc:	b002      	add	sp, #8
 80035fe:	bd80      	pop	{r7, pc}
 8003600:	ffff7fff 	.word	0xffff7fff
 8003604:	fffdffff 	.word	0xfffdffff
 8003608:	fffeffff 	.word	0xfffeffff
 800360c:	fffbffff 	.word	0xfffbffff
 8003610:	ffffefff 	.word	0xffffefff
 8003614:	ffffdfff 	.word	0xffffdfff
 8003618:	ffefffff 	.word	0xffefffff
 800361c:	ff9fffff 	.word	0xff9fffff
 8003620:	fff7ffff 	.word	0xfff7ffff

08003624 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b092      	sub	sp, #72	@ 0x48
 8003628:	af02      	add	r7, sp, #8
 800362a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2290      	movs	r2, #144	@ 0x90
 8003630:	2100      	movs	r1, #0
 8003632:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003634:	f7fd fdee 	bl	8001214 <HAL_GetTick>
 8003638:	0003      	movs	r3, r0
 800363a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	2208      	movs	r2, #8
 8003644:	4013      	ands	r3, r2
 8003646:	2b08      	cmp	r3, #8
 8003648:	d12d      	bne.n	80036a6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800364a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800364c:	2280      	movs	r2, #128	@ 0x80
 800364e:	0391      	lsls	r1, r2, #14
 8003650:	6878      	ldr	r0, [r7, #4]
 8003652:	4a47      	ldr	r2, [pc, #284]	@ (8003770 <UART_CheckIdleState+0x14c>)
 8003654:	9200      	str	r2, [sp, #0]
 8003656:	2200      	movs	r2, #0
 8003658:	f000 f88e 	bl	8003778 <UART_WaitOnFlagUntilTimeout>
 800365c:	1e03      	subs	r3, r0, #0
 800365e:	d022      	beq.n	80036a6 <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003660:	f3ef 8310 	mrs	r3, PRIMASK
 8003664:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003668:	63bb      	str	r3, [r7, #56]	@ 0x38
 800366a:	2301      	movs	r3, #1
 800366c:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800366e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003670:	f383 8810 	msr	PRIMASK, r3
}
 8003674:	46c0      	nop			@ (mov r8, r8)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	681a      	ldr	r2, [r3, #0]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	2180      	movs	r1, #128	@ 0x80
 8003682:	438a      	bics	r2, r1
 8003684:	601a      	str	r2, [r3, #0]
 8003686:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003688:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800368a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800368c:	f383 8810 	msr	PRIMASK, r3
}
 8003690:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2288      	movs	r2, #136	@ 0x88
 8003696:	2120      	movs	r1, #32
 8003698:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2284      	movs	r2, #132	@ 0x84
 800369e:	2100      	movs	r1, #0
 80036a0:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80036a2:	2303      	movs	r3, #3
 80036a4:	e060      	b.n	8003768 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	2204      	movs	r2, #4
 80036ae:	4013      	ands	r3, r2
 80036b0:	2b04      	cmp	r3, #4
 80036b2:	d146      	bne.n	8003742 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80036b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80036b6:	2280      	movs	r2, #128	@ 0x80
 80036b8:	03d1      	lsls	r1, r2, #15
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	4a2c      	ldr	r2, [pc, #176]	@ (8003770 <UART_CheckIdleState+0x14c>)
 80036be:	9200      	str	r2, [sp, #0]
 80036c0:	2200      	movs	r2, #0
 80036c2:	f000 f859 	bl	8003778 <UART_WaitOnFlagUntilTimeout>
 80036c6:	1e03      	subs	r3, r0, #0
 80036c8:	d03b      	beq.n	8003742 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036ca:	f3ef 8310 	mrs	r3, PRIMASK
 80036ce:	60fb      	str	r3, [r7, #12]
  return(result);
 80036d0:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80036d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80036d4:	2301      	movs	r3, #1
 80036d6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	f383 8810 	msr	PRIMASK, r3
}
 80036de:	46c0      	nop			@ (mov r8, r8)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	681a      	ldr	r2, [r3, #0]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4922      	ldr	r1, [pc, #136]	@ (8003774 <UART_CheckIdleState+0x150>)
 80036ec:	400a      	ands	r2, r1
 80036ee:	601a      	str	r2, [r3, #0]
 80036f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036f2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036f4:	697b      	ldr	r3, [r7, #20]
 80036f6:	f383 8810 	msr	PRIMASK, r3
}
 80036fa:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036fc:	f3ef 8310 	mrs	r3, PRIMASK
 8003700:	61bb      	str	r3, [r7, #24]
  return(result);
 8003702:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003704:	633b      	str	r3, [r7, #48]	@ 0x30
 8003706:	2301      	movs	r3, #1
 8003708:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800370a:	69fb      	ldr	r3, [r7, #28]
 800370c:	f383 8810 	msr	PRIMASK, r3
}
 8003710:	46c0      	nop			@ (mov r8, r8)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	689a      	ldr	r2, [r3, #8]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	2101      	movs	r1, #1
 800371e:	438a      	bics	r2, r1
 8003720:	609a      	str	r2, [r3, #8]
 8003722:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003724:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003726:	6a3b      	ldr	r3, [r7, #32]
 8003728:	f383 8810 	msr	PRIMASK, r3
}
 800372c:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	228c      	movs	r2, #140	@ 0x8c
 8003732:	2120      	movs	r1, #32
 8003734:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2284      	movs	r2, #132	@ 0x84
 800373a:	2100      	movs	r1, #0
 800373c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800373e:	2303      	movs	r3, #3
 8003740:	e012      	b.n	8003768 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2288      	movs	r2, #136	@ 0x88
 8003746:	2120      	movs	r1, #32
 8003748:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	228c      	movs	r2, #140	@ 0x8c
 800374e:	2120      	movs	r1, #32
 8003750:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2200      	movs	r2, #0
 8003756:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2200      	movs	r2, #0
 800375c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2284      	movs	r2, #132	@ 0x84
 8003762:	2100      	movs	r1, #0
 8003764:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003766:	2300      	movs	r3, #0
}
 8003768:	0018      	movs	r0, r3
 800376a:	46bd      	mov	sp, r7
 800376c:	b010      	add	sp, #64	@ 0x40
 800376e:	bd80      	pop	{r7, pc}
 8003770:	01ffffff 	.word	0x01ffffff
 8003774:	fffffedf 	.word	0xfffffedf

08003778 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b084      	sub	sp, #16
 800377c:	af00      	add	r7, sp, #0
 800377e:	60f8      	str	r0, [r7, #12]
 8003780:	60b9      	str	r1, [r7, #8]
 8003782:	603b      	str	r3, [r7, #0]
 8003784:	1dfb      	adds	r3, r7, #7
 8003786:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003788:	e051      	b.n	800382e <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800378a:	69bb      	ldr	r3, [r7, #24]
 800378c:	3301      	adds	r3, #1
 800378e:	d04e      	beq.n	800382e <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003790:	f7fd fd40 	bl	8001214 <HAL_GetTick>
 8003794:	0002      	movs	r2, r0
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	1ad3      	subs	r3, r2, r3
 800379a:	69ba      	ldr	r2, [r7, #24]
 800379c:	429a      	cmp	r2, r3
 800379e:	d302      	bcc.n	80037a6 <UART_WaitOnFlagUntilTimeout+0x2e>
 80037a0:	69bb      	ldr	r3, [r7, #24]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d101      	bne.n	80037aa <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80037a6:	2303      	movs	r3, #3
 80037a8:	e051      	b.n	800384e <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	2204      	movs	r2, #4
 80037b2:	4013      	ands	r3, r2
 80037b4:	d03b      	beq.n	800382e <UART_WaitOnFlagUntilTimeout+0xb6>
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	2b80      	cmp	r3, #128	@ 0x80
 80037ba:	d038      	beq.n	800382e <UART_WaitOnFlagUntilTimeout+0xb6>
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	2b40      	cmp	r3, #64	@ 0x40
 80037c0:	d035      	beq.n	800382e <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	69db      	ldr	r3, [r3, #28]
 80037c8:	2208      	movs	r2, #8
 80037ca:	4013      	ands	r3, r2
 80037cc:	2b08      	cmp	r3, #8
 80037ce:	d111      	bne.n	80037f4 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	2208      	movs	r2, #8
 80037d6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	0018      	movs	r0, r3
 80037dc:	f000 f83c 	bl	8003858 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	2290      	movs	r2, #144	@ 0x90
 80037e4:	2108      	movs	r1, #8
 80037e6:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2284      	movs	r2, #132	@ 0x84
 80037ec:	2100      	movs	r1, #0
 80037ee:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80037f0:	2301      	movs	r3, #1
 80037f2:	e02c      	b.n	800384e <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	69da      	ldr	r2, [r3, #28]
 80037fa:	2380      	movs	r3, #128	@ 0x80
 80037fc:	011b      	lsls	r3, r3, #4
 80037fe:	401a      	ands	r2, r3
 8003800:	2380      	movs	r3, #128	@ 0x80
 8003802:	011b      	lsls	r3, r3, #4
 8003804:	429a      	cmp	r2, r3
 8003806:	d112      	bne.n	800382e <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	2280      	movs	r2, #128	@ 0x80
 800380e:	0112      	lsls	r2, r2, #4
 8003810:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	0018      	movs	r0, r3
 8003816:	f000 f81f 	bl	8003858 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	2290      	movs	r2, #144	@ 0x90
 800381e:	2120      	movs	r1, #32
 8003820:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2284      	movs	r2, #132	@ 0x84
 8003826:	2100      	movs	r1, #0
 8003828:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800382a:	2303      	movs	r3, #3
 800382c:	e00f      	b.n	800384e <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	69db      	ldr	r3, [r3, #28]
 8003834:	68ba      	ldr	r2, [r7, #8]
 8003836:	4013      	ands	r3, r2
 8003838:	68ba      	ldr	r2, [r7, #8]
 800383a:	1ad3      	subs	r3, r2, r3
 800383c:	425a      	negs	r2, r3
 800383e:	4153      	adcs	r3, r2
 8003840:	b2db      	uxtb	r3, r3
 8003842:	001a      	movs	r2, r3
 8003844:	1dfb      	adds	r3, r7, #7
 8003846:	781b      	ldrb	r3, [r3, #0]
 8003848:	429a      	cmp	r2, r3
 800384a:	d09e      	beq.n	800378a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800384c:	2300      	movs	r3, #0
}
 800384e:	0018      	movs	r0, r3
 8003850:	46bd      	mov	sp, r7
 8003852:	b004      	add	sp, #16
 8003854:	bd80      	pop	{r7, pc}
	...

08003858 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b08e      	sub	sp, #56	@ 0x38
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003860:	f3ef 8310 	mrs	r3, PRIMASK
 8003864:	617b      	str	r3, [r7, #20]
  return(result);
 8003866:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003868:	637b      	str	r3, [r7, #52]	@ 0x34
 800386a:	2301      	movs	r3, #1
 800386c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800386e:	69bb      	ldr	r3, [r7, #24]
 8003870:	f383 8810 	msr	PRIMASK, r3
}
 8003874:	46c0      	nop			@ (mov r8, r8)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	681a      	ldr	r2, [r3, #0]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4926      	ldr	r1, [pc, #152]	@ (800391c <UART_EndRxTransfer+0xc4>)
 8003882:	400a      	ands	r2, r1
 8003884:	601a      	str	r2, [r3, #0]
 8003886:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003888:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800388a:	69fb      	ldr	r3, [r7, #28]
 800388c:	f383 8810 	msr	PRIMASK, r3
}
 8003890:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003892:	f3ef 8310 	mrs	r3, PRIMASK
 8003896:	623b      	str	r3, [r7, #32]
  return(result);
 8003898:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800389a:	633b      	str	r3, [r7, #48]	@ 0x30
 800389c:	2301      	movs	r3, #1
 800389e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038a2:	f383 8810 	msr	PRIMASK, r3
}
 80038a6:	46c0      	nop			@ (mov r8, r8)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	689a      	ldr	r2, [r3, #8]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	491b      	ldr	r1, [pc, #108]	@ (8003920 <UART_EndRxTransfer+0xc8>)
 80038b4:	400a      	ands	r2, r1
 80038b6:	609a      	str	r2, [r3, #8]
 80038b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038be:	f383 8810 	msr	PRIMASK, r3
}
 80038c2:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	d118      	bne.n	80038fe <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038cc:	f3ef 8310 	mrs	r3, PRIMASK
 80038d0:	60bb      	str	r3, [r7, #8]
  return(result);
 80038d2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80038d6:	2301      	movs	r3, #1
 80038d8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	f383 8810 	msr	PRIMASK, r3
}
 80038e0:	46c0      	nop			@ (mov r8, r8)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	681a      	ldr	r2, [r3, #0]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	2110      	movs	r1, #16
 80038ee:	438a      	bics	r2, r1
 80038f0:	601a      	str	r2, [r3, #0]
 80038f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038f4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	f383 8810 	msr	PRIMASK, r3
}
 80038fc:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	228c      	movs	r2, #140	@ 0x8c
 8003902:	2120      	movs	r1, #32
 8003904:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2200      	movs	r2, #0
 800390a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2200      	movs	r2, #0
 8003910:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8003912:	46c0      	nop			@ (mov r8, r8)
 8003914:	46bd      	mov	sp, r7
 8003916:	b00e      	add	sp, #56	@ 0x38
 8003918:	bd80      	pop	{r7, pc}
 800391a:	46c0      	nop			@ (mov r8, r8)
 800391c:	fffffedf 	.word	0xfffffedf
 8003920:	effffffe 	.word	0xeffffffe

08003924 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b084      	sub	sp, #16
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2284      	movs	r2, #132	@ 0x84
 8003930:	5c9b      	ldrb	r3, [r3, r2]
 8003932:	2b01      	cmp	r3, #1
 8003934:	d101      	bne.n	800393a <HAL_UARTEx_DisableFifoMode+0x16>
 8003936:	2302      	movs	r3, #2
 8003938:	e027      	b.n	800398a <HAL_UARTEx_DisableFifoMode+0x66>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2284      	movs	r2, #132	@ 0x84
 800393e:	2101      	movs	r1, #1
 8003940:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2288      	movs	r2, #136	@ 0x88
 8003946:	2124      	movs	r1, #36	@ 0x24
 8003948:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	681a      	ldr	r2, [r3, #0]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	2101      	movs	r1, #1
 800395e:	438a      	bics	r2, r1
 8003960:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	4a0b      	ldr	r2, [pc, #44]	@ (8003994 <HAL_UARTEx_DisableFifoMode+0x70>)
 8003966:	4013      	ands	r3, r2
 8003968:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2200      	movs	r2, #0
 800396e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	68fa      	ldr	r2, [r7, #12]
 8003976:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2288      	movs	r2, #136	@ 0x88
 800397c:	2120      	movs	r1, #32
 800397e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2284      	movs	r2, #132	@ 0x84
 8003984:	2100      	movs	r1, #0
 8003986:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003988:	2300      	movs	r3, #0
}
 800398a:	0018      	movs	r0, r3
 800398c:	46bd      	mov	sp, r7
 800398e:	b004      	add	sp, #16
 8003990:	bd80      	pop	{r7, pc}
 8003992:	46c0      	nop			@ (mov r8, r8)
 8003994:	dfffffff 	.word	0xdfffffff

08003998 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b084      	sub	sp, #16
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
 80039a0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2284      	movs	r2, #132	@ 0x84
 80039a6:	5c9b      	ldrb	r3, [r3, r2]
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	d101      	bne.n	80039b0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80039ac:	2302      	movs	r3, #2
 80039ae:	e02e      	b.n	8003a0e <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2284      	movs	r2, #132	@ 0x84
 80039b4:	2101      	movs	r1, #1
 80039b6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2288      	movs	r2, #136	@ 0x88
 80039bc:	2124      	movs	r1, #36	@ 0x24
 80039be:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	681a      	ldr	r2, [r3, #0]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	2101      	movs	r1, #1
 80039d4:	438a      	bics	r2, r1
 80039d6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	00db      	lsls	r3, r3, #3
 80039e0:	08d9      	lsrs	r1, r3, #3
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	683a      	ldr	r2, [r7, #0]
 80039e8:	430a      	orrs	r2, r1
 80039ea:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	0018      	movs	r0, r3
 80039f0:	f000 f854 	bl	8003a9c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	68fa      	ldr	r2, [r7, #12]
 80039fa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2288      	movs	r2, #136	@ 0x88
 8003a00:	2120      	movs	r1, #32
 8003a02:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2284      	movs	r2, #132	@ 0x84
 8003a08:	2100      	movs	r1, #0
 8003a0a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003a0c:	2300      	movs	r3, #0
}
 8003a0e:	0018      	movs	r0, r3
 8003a10:	46bd      	mov	sp, r7
 8003a12:	b004      	add	sp, #16
 8003a14:	bd80      	pop	{r7, pc}
	...

08003a18 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b084      	sub	sp, #16
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
 8003a20:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2284      	movs	r2, #132	@ 0x84
 8003a26:	5c9b      	ldrb	r3, [r3, r2]
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	d101      	bne.n	8003a30 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003a2c:	2302      	movs	r3, #2
 8003a2e:	e02f      	b.n	8003a90 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2284      	movs	r2, #132	@ 0x84
 8003a34:	2101      	movs	r1, #1
 8003a36:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2288      	movs	r2, #136	@ 0x88
 8003a3c:	2124      	movs	r1, #36	@ 0x24
 8003a3e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	681a      	ldr	r2, [r3, #0]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	2101      	movs	r1, #1
 8003a54:	438a      	bics	r2, r1
 8003a56:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	689b      	ldr	r3, [r3, #8]
 8003a5e:	4a0e      	ldr	r2, [pc, #56]	@ (8003a98 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8003a60:	4013      	ands	r3, r2
 8003a62:	0019      	movs	r1, r3
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	683a      	ldr	r2, [r7, #0]
 8003a6a:	430a      	orrs	r2, r1
 8003a6c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	0018      	movs	r0, r3
 8003a72:	f000 f813 	bl	8003a9c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	68fa      	ldr	r2, [r7, #12]
 8003a7c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2288      	movs	r2, #136	@ 0x88
 8003a82:	2120      	movs	r1, #32
 8003a84:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2284      	movs	r2, #132	@ 0x84
 8003a8a:	2100      	movs	r1, #0
 8003a8c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003a8e:	2300      	movs	r3, #0
}
 8003a90:	0018      	movs	r0, r3
 8003a92:	46bd      	mov	sp, r7
 8003a94:	b004      	add	sp, #16
 8003a96:	bd80      	pop	{r7, pc}
 8003a98:	f1ffffff 	.word	0xf1ffffff

08003a9c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003a9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a9e:	b085      	sub	sp, #20
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d108      	bne.n	8003abe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	226a      	movs	r2, #106	@ 0x6a
 8003ab0:	2101      	movs	r1, #1
 8003ab2:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2268      	movs	r2, #104	@ 0x68
 8003ab8:	2101      	movs	r1, #1
 8003aba:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003abc:	e043      	b.n	8003b46 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003abe:	260f      	movs	r6, #15
 8003ac0:	19bb      	adds	r3, r7, r6
 8003ac2:	2208      	movs	r2, #8
 8003ac4:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003ac6:	200e      	movs	r0, #14
 8003ac8:	183b      	adds	r3, r7, r0
 8003aca:	2208      	movs	r2, #8
 8003acc:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	0e5b      	lsrs	r3, r3, #25
 8003ad6:	b2da      	uxtb	r2, r3
 8003ad8:	240d      	movs	r4, #13
 8003ada:	193b      	adds	r3, r7, r4
 8003adc:	2107      	movs	r1, #7
 8003ade:	400a      	ands	r2, r1
 8003ae0:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	0f5b      	lsrs	r3, r3, #29
 8003aea:	b2da      	uxtb	r2, r3
 8003aec:	250c      	movs	r5, #12
 8003aee:	197b      	adds	r3, r7, r5
 8003af0:	2107      	movs	r1, #7
 8003af2:	400a      	ands	r2, r1
 8003af4:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003af6:	183b      	adds	r3, r7, r0
 8003af8:	781b      	ldrb	r3, [r3, #0]
 8003afa:	197a      	adds	r2, r7, r5
 8003afc:	7812      	ldrb	r2, [r2, #0]
 8003afe:	4914      	ldr	r1, [pc, #80]	@ (8003b50 <UARTEx_SetNbDataToProcess+0xb4>)
 8003b00:	5c8a      	ldrb	r2, [r1, r2]
 8003b02:	435a      	muls	r2, r3
 8003b04:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8003b06:	197b      	adds	r3, r7, r5
 8003b08:	781b      	ldrb	r3, [r3, #0]
 8003b0a:	4a12      	ldr	r2, [pc, #72]	@ (8003b54 <UARTEx_SetNbDataToProcess+0xb8>)
 8003b0c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003b0e:	0019      	movs	r1, r3
 8003b10:	f7fc fb82 	bl	8000218 <__divsi3>
 8003b14:	0003      	movs	r3, r0
 8003b16:	b299      	uxth	r1, r3
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	226a      	movs	r2, #106	@ 0x6a
 8003b1c:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003b1e:	19bb      	adds	r3, r7, r6
 8003b20:	781b      	ldrb	r3, [r3, #0]
 8003b22:	193a      	adds	r2, r7, r4
 8003b24:	7812      	ldrb	r2, [r2, #0]
 8003b26:	490a      	ldr	r1, [pc, #40]	@ (8003b50 <UARTEx_SetNbDataToProcess+0xb4>)
 8003b28:	5c8a      	ldrb	r2, [r1, r2]
 8003b2a:	435a      	muls	r2, r3
 8003b2c:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8003b2e:	193b      	adds	r3, r7, r4
 8003b30:	781b      	ldrb	r3, [r3, #0]
 8003b32:	4a08      	ldr	r2, [pc, #32]	@ (8003b54 <UARTEx_SetNbDataToProcess+0xb8>)
 8003b34:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003b36:	0019      	movs	r1, r3
 8003b38:	f7fc fb6e 	bl	8000218 <__divsi3>
 8003b3c:	0003      	movs	r3, r0
 8003b3e:	b299      	uxth	r1, r3
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2268      	movs	r2, #104	@ 0x68
 8003b44:	5299      	strh	r1, [r3, r2]
}
 8003b46:	46c0      	nop			@ (mov r8, r8)
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	b005      	add	sp, #20
 8003b4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b4e:	46c0      	nop			@ (mov r8, r8)
 8003b50:	08003c40 	.word	0x08003c40
 8003b54:	08003c48 	.word	0x08003c48

08003b58 <memset>:
 8003b58:	0003      	movs	r3, r0
 8003b5a:	1882      	adds	r2, r0, r2
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d100      	bne.n	8003b62 <memset+0xa>
 8003b60:	4770      	bx	lr
 8003b62:	7019      	strb	r1, [r3, #0]
 8003b64:	3301      	adds	r3, #1
 8003b66:	e7f9      	b.n	8003b5c <memset+0x4>

08003b68 <__libc_init_array>:
 8003b68:	b570      	push	{r4, r5, r6, lr}
 8003b6a:	2600      	movs	r6, #0
 8003b6c:	4c0c      	ldr	r4, [pc, #48]	@ (8003ba0 <__libc_init_array+0x38>)
 8003b6e:	4d0d      	ldr	r5, [pc, #52]	@ (8003ba4 <__libc_init_array+0x3c>)
 8003b70:	1b64      	subs	r4, r4, r5
 8003b72:	10a4      	asrs	r4, r4, #2
 8003b74:	42a6      	cmp	r6, r4
 8003b76:	d109      	bne.n	8003b8c <__libc_init_array+0x24>
 8003b78:	2600      	movs	r6, #0
 8003b7a:	f000 f819 	bl	8003bb0 <_init>
 8003b7e:	4c0a      	ldr	r4, [pc, #40]	@ (8003ba8 <__libc_init_array+0x40>)
 8003b80:	4d0a      	ldr	r5, [pc, #40]	@ (8003bac <__libc_init_array+0x44>)
 8003b82:	1b64      	subs	r4, r4, r5
 8003b84:	10a4      	asrs	r4, r4, #2
 8003b86:	42a6      	cmp	r6, r4
 8003b88:	d105      	bne.n	8003b96 <__libc_init_array+0x2e>
 8003b8a:	bd70      	pop	{r4, r5, r6, pc}
 8003b8c:	00b3      	lsls	r3, r6, #2
 8003b8e:	58eb      	ldr	r3, [r5, r3]
 8003b90:	4798      	blx	r3
 8003b92:	3601      	adds	r6, #1
 8003b94:	e7ee      	b.n	8003b74 <__libc_init_array+0xc>
 8003b96:	00b3      	lsls	r3, r6, #2
 8003b98:	58eb      	ldr	r3, [r5, r3]
 8003b9a:	4798      	blx	r3
 8003b9c:	3601      	adds	r6, #1
 8003b9e:	e7f2      	b.n	8003b86 <__libc_init_array+0x1e>
 8003ba0:	08003c58 	.word	0x08003c58
 8003ba4:	08003c58 	.word	0x08003c58
 8003ba8:	08003c5c 	.word	0x08003c5c
 8003bac:	08003c58 	.word	0x08003c58

08003bb0 <_init>:
 8003bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bb2:	46c0      	nop			@ (mov r8, r8)
 8003bb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bb6:	bc08      	pop	{r3}
 8003bb8:	469e      	mov	lr, r3
 8003bba:	4770      	bx	lr

08003bbc <_fini>:
 8003bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bbe:	46c0      	nop			@ (mov r8, r8)
 8003bc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bc2:	bc08      	pop	{r3}
 8003bc4:	469e      	mov	lr, r3
 8003bc6:	4770      	bx	lr
