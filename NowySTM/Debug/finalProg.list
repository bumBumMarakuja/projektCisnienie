
finalProg.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000032e8  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080034ac  080034ac  000044ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080034bc  080034bc  00005064  2**0
                  CONTENTS
  4 .ARM          00000008  080034bc  080034bc  000044bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080034c4  080034c4  00005064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080034c4  080034c4  000044c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080034c8  080034c8  000044c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  080034cc  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b8  20000064  08003530  00005064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000011c  08003530  0000511c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009c5f  00000000  00000000  00005094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001869  00000000  00000000  0000ecf3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a30  00000000  00000000  00010560  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007e3  00000000  00000000  00010f90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020b29  00000000  00000000  00011773  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b9ab  00000000  00000000  0003229c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cad61  00000000  00000000  0003dc47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001089a8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a50  00000000  00000000  001089ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004c  00000000  00000000  0010b43c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000064 	.word	0x20000064
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08003494 	.word	0x08003494

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000068 	.word	0x20000068
 8000200:	08003494 	.word	0x08003494

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96a 	b.w	80004f0 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	460c      	mov	r4, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14e      	bne.n	80002de <__udivmoddi4+0xaa>
 8000240:	4694      	mov	ip, r2
 8000242:	458c      	cmp	ip, r1
 8000244:	4686      	mov	lr, r0
 8000246:	fab2 f282 	clz	r2, r2
 800024a:	d962      	bls.n	8000312 <__udivmoddi4+0xde>
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0320 	rsb	r3, r2, #32
 8000252:	4091      	lsls	r1, r2
 8000254:	fa20 f303 	lsr.w	r3, r0, r3
 8000258:	fa0c fc02 	lsl.w	ip, ip, r2
 800025c:	4319      	orrs	r1, r3
 800025e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000262:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000266:	fa1f f68c 	uxth.w	r6, ip
 800026a:	fbb1 f4f7 	udiv	r4, r1, r7
 800026e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000272:	fb07 1114 	mls	r1, r7, r4, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb04 f106 	mul.w	r1, r4, r6
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f104 30ff 	add.w	r0, r4, #4294967295
 800028a:	f080 8112 	bcs.w	80004b2 <__udivmoddi4+0x27e>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 810f 	bls.w	80004b2 <__udivmoddi4+0x27e>
 8000294:	3c02      	subs	r4, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a59      	subs	r1, r3, r1
 800029a:	fa1f f38e 	uxth.w	r3, lr
 800029e:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a2:	fb07 1110 	mls	r1, r7, r0, r1
 80002a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002aa:	fb00 f606 	mul.w	r6, r0, r6
 80002ae:	429e      	cmp	r6, r3
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x94>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ba:	f080 80fc 	bcs.w	80004b6 <__udivmoddi4+0x282>
 80002be:	429e      	cmp	r6, r3
 80002c0:	f240 80f9 	bls.w	80004b6 <__udivmoddi4+0x282>
 80002c4:	4463      	add	r3, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	1b9b      	subs	r3, r3, r6
 80002ca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11d      	cbz	r5, 80002da <__udivmoddi4+0xa6>
 80002d2:	40d3      	lsrs	r3, r2
 80002d4:	2200      	movs	r2, #0
 80002d6:	e9c5 3200 	strd	r3, r2, [r5]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d905      	bls.n	80002ee <__udivmoddi4+0xba>
 80002e2:	b10d      	cbz	r5, 80002e8 <__udivmoddi4+0xb4>
 80002e4:	e9c5 0100 	strd	r0, r1, [r5]
 80002e8:	2100      	movs	r1, #0
 80002ea:	4608      	mov	r0, r1
 80002ec:	e7f5      	b.n	80002da <__udivmoddi4+0xa6>
 80002ee:	fab3 f183 	clz	r1, r3
 80002f2:	2900      	cmp	r1, #0
 80002f4:	d146      	bne.n	8000384 <__udivmoddi4+0x150>
 80002f6:	42a3      	cmp	r3, r4
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xcc>
 80002fa:	4290      	cmp	r0, r2
 80002fc:	f0c0 80f0 	bcc.w	80004e0 <__udivmoddi4+0x2ac>
 8000300:	1a86      	subs	r6, r0, r2
 8000302:	eb64 0303 	sbc.w	r3, r4, r3
 8000306:	2001      	movs	r0, #1
 8000308:	2d00      	cmp	r5, #0
 800030a:	d0e6      	beq.n	80002da <__udivmoddi4+0xa6>
 800030c:	e9c5 6300 	strd	r6, r3, [r5]
 8000310:	e7e3      	b.n	80002da <__udivmoddi4+0xa6>
 8000312:	2a00      	cmp	r2, #0
 8000314:	f040 8090 	bne.w	8000438 <__udivmoddi4+0x204>
 8000318:	eba1 040c 	sub.w	r4, r1, ip
 800031c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000320:	fa1f f78c 	uxth.w	r7, ip
 8000324:	2101      	movs	r1, #1
 8000326:	fbb4 f6f8 	udiv	r6, r4, r8
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb08 4416 	mls	r4, r8, r6, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb07 f006 	mul.w	r0, r7, r6
 800033a:	4298      	cmp	r0, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x11c>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 34ff 	add.w	r4, r6, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x11a>
 8000348:	4298      	cmp	r0, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 800034e:	4626      	mov	r6, r4
 8000350:	1a1c      	subs	r4, r3, r0
 8000352:	fa1f f38e 	uxth.w	r3, lr
 8000356:	fbb4 f0f8 	udiv	r0, r4, r8
 800035a:	fb08 4410 	mls	r4, r8, r0, r4
 800035e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000362:	fb00 f707 	mul.w	r7, r0, r7
 8000366:	429f      	cmp	r7, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x148>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x146>
 8000374:	429f      	cmp	r7, r3
 8000376:	f200 80b0 	bhi.w	80004da <__udivmoddi4+0x2a6>
 800037a:	4620      	mov	r0, r4
 800037c:	1bdb      	subs	r3, r3, r7
 800037e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0x9c>
 8000384:	f1c1 0620 	rsb	r6, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 f706 	lsr.w	r7, r2, r6
 800038e:	431f      	orrs	r7, r3
 8000390:	fa20 fc06 	lsr.w	ip, r0, r6
 8000394:	fa04 f301 	lsl.w	r3, r4, r1
 8000398:	ea43 030c 	orr.w	r3, r3, ip
 800039c:	40f4      	lsrs	r4, r6
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	0c38      	lsrs	r0, r7, #16
 80003a4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a8:	fbb4 fef0 	udiv	lr, r4, r0
 80003ac:	fa1f fc87 	uxth.w	ip, r7
 80003b0:	fb00 441e 	mls	r4, r0, lr, r4
 80003b4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b8:	fb0e f90c 	mul.w	r9, lr, ip
 80003bc:	45a1      	cmp	r9, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	d90a      	bls.n	80003da <__udivmoddi4+0x1a6>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ca:	f080 8084 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80003ce:	45a1      	cmp	r9, r4
 80003d0:	f240 8081 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80003d4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d8:	443c      	add	r4, r7
 80003da:	eba4 0409 	sub.w	r4, r4, r9
 80003de:	fa1f f983 	uxth.w	r9, r3
 80003e2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003e6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ee:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1d2>
 80003f6:	193c      	adds	r4, r7, r4
 80003f8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003fc:	d267      	bcs.n	80004ce <__udivmoddi4+0x29a>
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d965      	bls.n	80004ce <__udivmoddi4+0x29a>
 8000402:	3b02      	subs	r3, #2
 8000404:	443c      	add	r4, r7
 8000406:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040a:	fba0 9302 	umull	r9, r3, r0, r2
 800040e:	eba4 040c 	sub.w	r4, r4, ip
 8000412:	429c      	cmp	r4, r3
 8000414:	46ce      	mov	lr, r9
 8000416:	469c      	mov	ip, r3
 8000418:	d351      	bcc.n	80004be <__udivmoddi4+0x28a>
 800041a:	d04e      	beq.n	80004ba <__udivmoddi4+0x286>
 800041c:	b155      	cbz	r5, 8000434 <__udivmoddi4+0x200>
 800041e:	ebb8 030e 	subs.w	r3, r8, lr
 8000422:	eb64 040c 	sbc.w	r4, r4, ip
 8000426:	fa04 f606 	lsl.w	r6, r4, r6
 800042a:	40cb      	lsrs	r3, r1
 800042c:	431e      	orrs	r6, r3
 800042e:	40cc      	lsrs	r4, r1
 8000430:	e9c5 6400 	strd	r6, r4, [r5]
 8000434:	2100      	movs	r1, #0
 8000436:	e750      	b.n	80002da <__udivmoddi4+0xa6>
 8000438:	f1c2 0320 	rsb	r3, r2, #32
 800043c:	fa20 f103 	lsr.w	r1, r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa24 f303 	lsr.w	r3, r4, r3
 8000448:	4094      	lsls	r4, r2
 800044a:	430c      	orrs	r4, r1
 800044c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000450:	fa00 fe02 	lsl.w	lr, r0, r2
 8000454:	fa1f f78c 	uxth.w	r7, ip
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3110 	mls	r1, r8, r0, r3
 8000460:	0c23      	lsrs	r3, r4, #16
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f107 	mul.w	r1, r0, r7
 800046a:	4299      	cmp	r1, r3
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x24c>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 36ff 	add.w	r6, r0, #4294967295
 8000476:	d22c      	bcs.n	80004d2 <__udivmoddi4+0x29e>
 8000478:	4299      	cmp	r1, r3
 800047a:	d92a      	bls.n	80004d2 <__udivmoddi4+0x29e>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1a5b      	subs	r3, r3, r1
 8000482:	b2a4      	uxth	r4, r4
 8000484:	fbb3 f1f8 	udiv	r1, r3, r8
 8000488:	fb08 3311 	mls	r3, r8, r1, r3
 800048c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000490:	fb01 f307 	mul.w	r3, r1, r7
 8000494:	42a3      	cmp	r3, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x276>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a0:	d213      	bcs.n	80004ca <__udivmoddi4+0x296>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d911      	bls.n	80004ca <__udivmoddi4+0x296>
 80004a6:	3902      	subs	r1, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	1ae4      	subs	r4, r4, r3
 80004ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b0:	e739      	b.n	8000326 <__udivmoddi4+0xf2>
 80004b2:	4604      	mov	r4, r0
 80004b4:	e6f0      	b.n	8000298 <__udivmoddi4+0x64>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e706      	b.n	80002c8 <__udivmoddi4+0x94>
 80004ba:	45c8      	cmp	r8, r9
 80004bc:	d2ae      	bcs.n	800041c <__udivmoddi4+0x1e8>
 80004be:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004c6:	3801      	subs	r0, #1
 80004c8:	e7a8      	b.n	800041c <__udivmoddi4+0x1e8>
 80004ca:	4631      	mov	r1, r6
 80004cc:	e7ed      	b.n	80004aa <__udivmoddi4+0x276>
 80004ce:	4603      	mov	r3, r0
 80004d0:	e799      	b.n	8000406 <__udivmoddi4+0x1d2>
 80004d2:	4630      	mov	r0, r6
 80004d4:	e7d4      	b.n	8000480 <__udivmoddi4+0x24c>
 80004d6:	46d6      	mov	lr, sl
 80004d8:	e77f      	b.n	80003da <__udivmoddi4+0x1a6>
 80004da:	4463      	add	r3, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e74d      	b.n	800037c <__udivmoddi4+0x148>
 80004e0:	4606      	mov	r6, r0
 80004e2:	4623      	mov	r3, r4
 80004e4:	4608      	mov	r0, r1
 80004e6:	e70f      	b.n	8000308 <__udivmoddi4+0xd4>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	e730      	b.n	8000350 <__udivmoddi4+0x11c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <SevenSegment_Update>:
		{1, 1, 1, 1, 0, 0, 0},  // 7
		{0, 0, 0, 0, 0, 0, 0},  // 8
		{0, 0, 0, 1, 0, 0, 0}   // 9
};

void SevenSegment_Update(uint8_t number){
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b082      	sub	sp, #8
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	4603      	mov	r3, r0
 80004fc:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(SevSegA_GPIO_Port, SevSegA_Pin, segmentNumber[number][6]);
 80004fe:	79fa      	ldrb	r2, [r7, #7]
 8000500:	4930      	ldr	r1, [pc, #192]	@ (80005c4 <SevenSegment_Update+0xd0>)
 8000502:	4613      	mov	r3, r2
 8000504:	00db      	lsls	r3, r3, #3
 8000506:	1a9b      	subs	r3, r3, r2
 8000508:	440b      	add	r3, r1
 800050a:	3306      	adds	r3, #6
 800050c:	781b      	ldrb	r3, [r3, #0]
 800050e:	461a      	mov	r2, r3
 8000510:	2104      	movs	r1, #4
 8000512:	482d      	ldr	r0, [pc, #180]	@ (80005c8 <SevenSegment_Update+0xd4>)
 8000514:	f001 f94a 	bl	80017ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SevSegB_GPIO_Port, SevSegB_Pin, segmentNumber[number][5]);
 8000518:	79fa      	ldrb	r2, [r7, #7]
 800051a:	492a      	ldr	r1, [pc, #168]	@ (80005c4 <SevenSegment_Update+0xd0>)
 800051c:	4613      	mov	r3, r2
 800051e:	00db      	lsls	r3, r3, #3
 8000520:	1a9b      	subs	r3, r3, r2
 8000522:	440b      	add	r3, r1
 8000524:	3305      	adds	r3, #5
 8000526:	781b      	ldrb	r3, [r3, #0]
 8000528:	461a      	mov	r2, r3
 800052a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800052e:	4826      	ldr	r0, [pc, #152]	@ (80005c8 <SevenSegment_Update+0xd4>)
 8000530:	f001 f93c 	bl	80017ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SevSegC_GPIO_Port, SevSegC_Pin, segmentNumber[number][4]);
 8000534:	79fa      	ldrb	r2, [r7, #7]
 8000536:	4923      	ldr	r1, [pc, #140]	@ (80005c4 <SevenSegment_Update+0xd0>)
 8000538:	4613      	mov	r3, r2
 800053a:	00db      	lsls	r3, r3, #3
 800053c:	1a9b      	subs	r3, r3, r2
 800053e:	440b      	add	r3, r1
 8000540:	3304      	adds	r3, #4
 8000542:	781b      	ldrb	r3, [r3, #0]
 8000544:	461a      	mov	r2, r3
 8000546:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800054a:	481f      	ldr	r0, [pc, #124]	@ (80005c8 <SevenSegment_Update+0xd4>)
 800054c:	f001 f92e 	bl	80017ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SevSegD_GPIO_Port, SevSegD_Pin, segmentNumber[number][3]);
 8000550:	79fa      	ldrb	r2, [r7, #7]
 8000552:	491c      	ldr	r1, [pc, #112]	@ (80005c4 <SevenSegment_Update+0xd0>)
 8000554:	4613      	mov	r3, r2
 8000556:	00db      	lsls	r3, r3, #3
 8000558:	1a9b      	subs	r3, r3, r2
 800055a:	440b      	add	r3, r1
 800055c:	3303      	adds	r3, #3
 800055e:	781b      	ldrb	r3, [r3, #0]
 8000560:	461a      	mov	r2, r3
 8000562:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000566:	4819      	ldr	r0, [pc, #100]	@ (80005cc <SevenSegment_Update+0xd8>)
 8000568:	f001 f920 	bl	80017ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SevSegE_GPIO_Port, SevSegE_Pin, segmentNumber[number][2]);
 800056c:	79fa      	ldrb	r2, [r7, #7]
 800056e:	4915      	ldr	r1, [pc, #84]	@ (80005c4 <SevenSegment_Update+0xd0>)
 8000570:	4613      	mov	r3, r2
 8000572:	00db      	lsls	r3, r3, #3
 8000574:	1a9b      	subs	r3, r3, r2
 8000576:	440b      	add	r3, r1
 8000578:	3302      	adds	r3, #2
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	461a      	mov	r2, r3
 800057e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000582:	4812      	ldr	r0, [pc, #72]	@ (80005cc <SevenSegment_Update+0xd8>)
 8000584:	f001 f912 	bl	80017ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SevSegF_GPIO_Port, SevSegF_Pin, segmentNumber[number][1]);
 8000588:	79fa      	ldrb	r2, [r7, #7]
 800058a:	490e      	ldr	r1, [pc, #56]	@ (80005c4 <SevenSegment_Update+0xd0>)
 800058c:	4613      	mov	r3, r2
 800058e:	00db      	lsls	r3, r3, #3
 8000590:	1a9b      	subs	r3, r3, r2
 8000592:	440b      	add	r3, r1
 8000594:	3301      	adds	r3, #1
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	461a      	mov	r2, r3
 800059a:	2102      	movs	r1, #2
 800059c:	480a      	ldr	r0, [pc, #40]	@ (80005c8 <SevenSegment_Update+0xd4>)
 800059e:	f001 f905 	bl	80017ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SevSegG_GPIO_Port, SevSegG_Pin, segmentNumber[number][0]);
 80005a2:	79fa      	ldrb	r2, [r7, #7]
 80005a4:	4907      	ldr	r1, [pc, #28]	@ (80005c4 <SevenSegment_Update+0xd0>)
 80005a6:	4613      	mov	r3, r2
 80005a8:	00db      	lsls	r3, r3, #3
 80005aa:	1a9b      	subs	r3, r3, r2
 80005ac:	440b      	add	r3, r1
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	461a      	mov	r2, r3
 80005b2:	2110      	movs	r1, #16
 80005b4:	4804      	ldr	r0, [pc, #16]	@ (80005c8 <SevenSegment_Update+0xd4>)
 80005b6:	f001 f8f9 	bl	80017ac <HAL_GPIO_WritePin>
}
 80005ba:	bf00      	nop
 80005bc:	3708      	adds	r7, #8
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	bf00      	nop
 80005c4:	20000010 	.word	0x20000010
 80005c8:	40020400 	.word	0x40020400
 80005cc:	40020000 	.word	0x40020000

080005d0 <ProgramEnd>:

void ProgramEnd(){
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LD10_GPIO_Port, LD10_Pin, 1);
 80005d4:	2201      	movs	r2, #1
 80005d6:	2110      	movs	r1, #16
 80005d8:	481a      	ldr	r0, [pc, #104]	@ (8000644 <ProgramEnd+0x74>)
 80005da:	f001 f8e7 	bl	80017ac <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 1);
 80005de:	2201      	movs	r2, #1
 80005e0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80005e4:	4818      	ldr	r0, [pc, #96]	@ (8000648 <ProgramEnd+0x78>)
 80005e6:	f001 f8e1 	bl	80017ac <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 80005ea:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80005ee:	f000 fdfb 	bl	80011e8 <HAL_Delay>
    HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 0);
 80005f2:	2200      	movs	r2, #0
 80005f4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80005f8:	4813      	ldr	r0, [pc, #76]	@ (8000648 <ProgramEnd+0x78>)
 80005fa:	f001 f8d7 	bl	80017ac <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LD10_GPIO_Port, LD10_Pin, 0);
 80005fe:	2200      	movs	r2, #0
 8000600:	2110      	movs	r1, #16
 8000602:	4810      	ldr	r0, [pc, #64]	@ (8000644 <ProgramEnd+0x74>)
 8000604:	f001 f8d2 	bl	80017ac <HAL_GPIO_WritePin>
    HAL_Delay(50);
 8000608:	2032      	movs	r0, #50	@ 0x32
 800060a:	f000 fded 	bl	80011e8 <HAL_Delay>
    state = 0;
 800060e:	4b0f      	ldr	r3, [pc, #60]	@ (800064c <ProgramEnd+0x7c>)
 8000610:	2200      	movs	r2, #0
 8000612:	701a      	strb	r2, [r3, #0]
    program = 0;
 8000614:	4b0e      	ldr	r3, [pc, #56]	@ (8000650 <ProgramEnd+0x80>)
 8000616:	2200      	movs	r2, #0
 8000618:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, 1);
 800061a:	2201      	movs	r2, #1
 800061c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000620:	4808      	ldr	r0, [pc, #32]	@ (8000644 <ProgramEnd+0x74>)
 8000622:	f001 f8c3 	bl	80017ac <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 1);
 8000626:	2201      	movs	r2, #1
 8000628:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800062c:	4809      	ldr	r0, [pc, #36]	@ (8000654 <ProgramEnd+0x84>)
 800062e:	f001 f8bd 	bl	80017ac <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8000632:	2201      	movs	r2, #1
 8000634:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000638:	4806      	ldr	r0, [pc, #24]	@ (8000654 <ProgramEnd+0x84>)
 800063a:	f001 f8b7 	bl	80017ac <HAL_GPIO_WritePin>
}
 800063e:	bf00      	nop
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	40020800 	.word	0x40020800
 8000648:	40020000 	.word	0x40020000
 800064c:	20000110 	.word	0x20000110
 8000650:	20000112 	.word	0x20000112
 8000654:	40020400 	.word	0x40020400

08000658 <First_program>:


void First_program(){
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
	if ((interruptFlag == 1) || (counter <= 0)){
 800065c:	4b0e      	ldr	r3, [pc, #56]	@ (8000698 <First_program+0x40>)
 800065e:	781b      	ldrb	r3, [r3, #0]
 8000660:	2b01      	cmp	r3, #1
 8000662:	d003      	beq.n	800066c <First_program+0x14>
 8000664:	4b0d      	ldr	r3, [pc, #52]	@ (800069c <First_program+0x44>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	2b00      	cmp	r3, #0
 800066a:	d112      	bne.n	8000692 <First_program+0x3a>
	    HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, 0);
 800066c:	2200      	movs	r2, #0
 800066e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000672:	480b      	ldr	r0, [pc, #44]	@ (80006a0 <First_program+0x48>)
 8000674:	f001 f89a 	bl	80017ac <HAL_GPIO_WritePin>
	    HAL_TIM_Base_Stop_IT(&htim3);
 8000678:	480a      	ldr	r0, [pc, #40]	@ (80006a4 <First_program+0x4c>)
 800067a:	f001 fed1 	bl	8002420 <HAL_TIM_Base_Stop_IT>
		HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 800067e:	2100      	movs	r1, #0
 8000680:	4809      	ldr	r0, [pc, #36]	@ (80006a8 <First_program+0x50>)
 8000682:	f002 f81d 	bl	80026c0 <HAL_TIM_PWM_Stop>
		HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_2);
 8000686:	2104      	movs	r1, #4
 8000688:	4807      	ldr	r0, [pc, #28]	@ (80006a8 <First_program+0x50>)
 800068a:	f002 f819 	bl	80026c0 <HAL_TIM_PWM_Stop>
	    ProgramEnd();
 800068e:	f7ff ff9f 	bl	80005d0 <ProgramEnd>
	}
}
 8000692:	bf00      	nop
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	20000111 	.word	0x20000111
 800069c:	20000000 	.word	0x20000000
 80006a0:	40020800 	.word	0x40020800
 80006a4:	200000c8 	.word	0x200000c8
 80006a8:	20000080 	.word	0x20000080

080006ac <Second_program>:

void Second_program(){
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
    if ((interruptFlag == 1) || (counter <= 0)){
 80006b0:	4b49      	ldr	r3, [pc, #292]	@ (80007d8 <Second_program+0x12c>)
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	2b01      	cmp	r3, #1
 80006b6:	d003      	beq.n	80006c0 <Second_program+0x14>
 80006b8:	4b48      	ldr	r3, [pc, #288]	@ (80007dc <Second_program+0x130>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d113      	bne.n	80006e8 <Second_program+0x3c>
	    HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 0);
 80006c0:	2200      	movs	r2, #0
 80006c2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80006c6:	4846      	ldr	r0, [pc, #280]	@ (80007e0 <Second_program+0x134>)
 80006c8:	f001 f870 	bl	80017ac <HAL_GPIO_WritePin>
	    HAL_TIM_Base_Stop_IT(&htim3);
 80006cc:	4845      	ldr	r0, [pc, #276]	@ (80007e4 <Second_program+0x138>)
 80006ce:	f001 fea7 	bl	8002420 <HAL_TIM_Base_Stop_IT>
		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 80006d2:	2100      	movs	r1, #0
 80006d4:	4843      	ldr	r0, [pc, #268]	@ (80007e4 <Second_program+0x138>)
 80006d6:	f001 fff3 	bl	80026c0 <HAL_TIM_PWM_Stop>
		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 80006da:	2104      	movs	r1, #4
 80006dc:	4841      	ldr	r0, [pc, #260]	@ (80007e4 <Second_program+0x138>)
 80006de:	f001 ffef 	bl	80026c0 <HAL_TIM_PWM_Stop>
	    ProgramEnd();
 80006e2:	f7ff ff75 	bl	80005d0 <ProgramEnd>
 80006e6:	e075      	b.n	80007d4 <Second_program+0x128>
    }
    else {
    	temp1 = counter/1000;
 80006e8:	4b3c      	ldr	r3, [pc, #240]	@ (80007dc <Second_program+0x130>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	4a3e      	ldr	r2, [pc, #248]	@ (80007e8 <Second_program+0x13c>)
 80006ee:	fba2 2303 	umull	r2, r3, r2, r3
 80006f2:	099b      	lsrs	r3, r3, #6
 80006f4:	b2da      	uxtb	r2, r3
 80006f6:	4b3d      	ldr	r3, [pc, #244]	@ (80007ec <Second_program+0x140>)
 80006f8:	701a      	strb	r2, [r3, #0]
    	temp2 = ((counter/100)%10);
 80006fa:	4b38      	ldr	r3, [pc, #224]	@ (80007dc <Second_program+0x130>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	4a3c      	ldr	r2, [pc, #240]	@ (80007f0 <Second_program+0x144>)
 8000700:	fba2 2303 	umull	r2, r3, r2, r3
 8000704:	0959      	lsrs	r1, r3, #5
 8000706:	4b3b      	ldr	r3, [pc, #236]	@ (80007f4 <Second_program+0x148>)
 8000708:	fba3 2301 	umull	r2, r3, r3, r1
 800070c:	08da      	lsrs	r2, r3, #3
 800070e:	4613      	mov	r3, r2
 8000710:	009b      	lsls	r3, r3, #2
 8000712:	4413      	add	r3, r2
 8000714:	005b      	lsls	r3, r3, #1
 8000716:	1aca      	subs	r2, r1, r3
 8000718:	b2d2      	uxtb	r2, r2
 800071a:	4b37      	ldr	r3, [pc, #220]	@ (80007f8 <Second_program+0x14c>)
 800071c:	701a      	strb	r2, [r3, #0]
    	temp3 = ((counter/10)%10);
 800071e:	4b2f      	ldr	r3, [pc, #188]	@ (80007dc <Second_program+0x130>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	4a34      	ldr	r2, [pc, #208]	@ (80007f4 <Second_program+0x148>)
 8000724:	fba2 2303 	umull	r2, r3, r2, r3
 8000728:	08d9      	lsrs	r1, r3, #3
 800072a:	4b32      	ldr	r3, [pc, #200]	@ (80007f4 <Second_program+0x148>)
 800072c:	fba3 2301 	umull	r2, r3, r3, r1
 8000730:	08da      	lsrs	r2, r3, #3
 8000732:	4613      	mov	r3, r2
 8000734:	009b      	lsls	r3, r3, #2
 8000736:	4413      	add	r3, r2
 8000738:	005b      	lsls	r3, r3, #1
 800073a:	1aca      	subs	r2, r1, r3
 800073c:	b2d2      	uxtb	r2, r2
 800073e:	4b2f      	ldr	r3, [pc, #188]	@ (80007fc <Second_program+0x150>)
 8000740:	701a      	strb	r2, [r3, #0]
    	temp4 = (counter%10);
 8000742:	4b26      	ldr	r3, [pc, #152]	@ (80007dc <Second_program+0x130>)
 8000744:	6819      	ldr	r1, [r3, #0]
 8000746:	4b2b      	ldr	r3, [pc, #172]	@ (80007f4 <Second_program+0x148>)
 8000748:	fba3 2301 	umull	r2, r3, r3, r1
 800074c:	08da      	lsrs	r2, r3, #3
 800074e:	4613      	mov	r3, r2
 8000750:	009b      	lsls	r3, r3, #2
 8000752:	4413      	add	r3, r2
 8000754:	005b      	lsls	r3, r3, #1
 8000756:	1aca      	subs	r2, r1, r3
 8000758:	b2d2      	uxtb	r2, r2
 800075a:	4b29      	ldr	r3, [pc, #164]	@ (8000800 <Second_program+0x154>)
 800075c:	701a      	strb	r2, [r3, #0]
    	SevenSegment_Update(temp2);
 800075e:	4b26      	ldr	r3, [pc, #152]	@ (80007f8 <Second_program+0x14c>)
 8000760:	781b      	ldrb	r3, [r3, #0]
 8000762:	4618      	mov	r0, r3
 8000764:	f7ff fec6 	bl	80004f4 <SevenSegment_Update>
    	HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, GPIO_PIN_SET);
 8000768:	2201      	movs	r2, #1
 800076a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800076e:	481c      	ldr	r0, [pc, #112]	@ (80007e0 <Second_program+0x134>)
 8000770:	f001 f81c 	bl	80017ac <HAL_GPIO_WritePin>
    	HAL_Delay(5);
 8000774:	2005      	movs	r0, #5
 8000776:	f000 fd37 	bl	80011e8 <HAL_Delay>
    	HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, GPIO_PIN_RESET);
 800077a:	2200      	movs	r2, #0
 800077c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000780:	4817      	ldr	r0, [pc, #92]	@ (80007e0 <Second_program+0x134>)
 8000782:	f001 f813 	bl	80017ac <HAL_GPIO_WritePin>

    	SevenSegment_Update(temp3);
 8000786:	4b1d      	ldr	r3, [pc, #116]	@ (80007fc <Second_program+0x150>)
 8000788:	781b      	ldrb	r3, [r3, #0]
 800078a:	4618      	mov	r0, r3
 800078c:	f7ff feb2 	bl	80004f4 <SevenSegment_Update>
    	HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, GPIO_PIN_SET);
 8000790:	2201      	movs	r2, #1
 8000792:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000796:	4812      	ldr	r0, [pc, #72]	@ (80007e0 <Second_program+0x134>)
 8000798:	f001 f808 	bl	80017ac <HAL_GPIO_WritePin>
    	HAL_Delay(5);
 800079c:	2005      	movs	r0, #5
 800079e:	f000 fd23 	bl	80011e8 <HAL_Delay>
    	HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, GPIO_PIN_RESET);
 80007a2:	2200      	movs	r2, #0
 80007a4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80007a8:	480d      	ldr	r0, [pc, #52]	@ (80007e0 <Second_program+0x134>)
 80007aa:	f000 ffff 	bl	80017ac <HAL_GPIO_WritePin>

    	SevenSegment_Update(temp4);
 80007ae:	4b14      	ldr	r3, [pc, #80]	@ (8000800 <Second_program+0x154>)
 80007b0:	781b      	ldrb	r3, [r3, #0]
 80007b2:	4618      	mov	r0, r3
 80007b4:	f7ff fe9e 	bl	80004f4 <SevenSegment_Update>
    	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, GPIO_PIN_SET);
 80007b8:	2201      	movs	r2, #1
 80007ba:	2120      	movs	r1, #32
 80007bc:	4808      	ldr	r0, [pc, #32]	@ (80007e0 <Second_program+0x134>)
 80007be:	f000 fff5 	bl	80017ac <HAL_GPIO_WritePin>
    	HAL_Delay(5);
 80007c2:	2005      	movs	r0, #5
 80007c4:	f000 fd10 	bl	80011e8 <HAL_Delay>
    	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, GPIO_PIN_RESET);}
 80007c8:	2200      	movs	r2, #0
 80007ca:	2120      	movs	r1, #32
 80007cc:	4804      	ldr	r0, [pc, #16]	@ (80007e0 <Second_program+0x134>)
 80007ce:	f000 ffed 	bl	80017ac <HAL_GPIO_WritePin>
}
 80007d2:	bf00      	nop
 80007d4:	bf00      	nop
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	20000111 	.word	0x20000111
 80007dc:	20000000 	.word	0x20000000
 80007e0:	40020400 	.word	0x40020400
 80007e4:	200000c8 	.word	0x200000c8
 80007e8:	10624dd3 	.word	0x10624dd3
 80007ec:	20000113 	.word	0x20000113
 80007f0:	51eb851f 	.word	0x51eb851f
 80007f4:	cccccccd 	.word	0xcccccccd
 80007f8:	20000114 	.word	0x20000114
 80007fc:	20000115 	.word	0x20000115
 8000800:	20000116 	.word	0x20000116

08000804 <Third_program>:

void Third_program(){
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
	if ((interruptFlag == 1) || (counter <= 0)){
 8000808:	4b1b      	ldr	r3, [pc, #108]	@ (8000878 <Third_program+0x74>)
 800080a:	781b      	ldrb	r3, [r3, #0]
 800080c:	2b01      	cmp	r3, #1
 800080e:	d003      	beq.n	8000818 <Third_program+0x14>
 8000810:	4b1a      	ldr	r3, [pc, #104]	@ (800087c <Third_program+0x78>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	2b00      	cmp	r3, #0
 8000816:	d113      	bne.n	8000840 <Third_program+0x3c>
	    HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8000818:	2200      	movs	r2, #0
 800081a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800081e:	4818      	ldr	r0, [pc, #96]	@ (8000880 <Third_program+0x7c>)
 8000820:	f000 ffc4 	bl	80017ac <HAL_GPIO_WritePin>
	    HAL_TIM_Base_Stop_IT(&htim3);
 8000824:	4817      	ldr	r0, [pc, #92]	@ (8000884 <Third_program+0x80>)
 8000826:	f001 fdfb 	bl	8002420 <HAL_TIM_Base_Stop_IT>
		HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 800082a:	2100      	movs	r1, #0
 800082c:	4816      	ldr	r0, [pc, #88]	@ (8000888 <Third_program+0x84>)
 800082e:	f001 ff47 	bl	80026c0 <HAL_TIM_PWM_Stop>
		HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_2);
 8000832:	2104      	movs	r1, #4
 8000834:	4814      	ldr	r0, [pc, #80]	@ (8000888 <Third_program+0x84>)
 8000836:	f001 ff43 	bl	80026c0 <HAL_TIM_PWM_Stop>
	    ProgramEnd();
 800083a:	f7ff fec9 	bl	80005d0 <ProgramEnd>
	else if (counter == 20)
	{
		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
	}
}
 800083e:	e018      	b.n	8000872 <Third_program+0x6e>
	else if (counter == 30)
 8000840:	4b0e      	ldr	r3, [pc, #56]	@ (800087c <Third_program+0x78>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	2b1e      	cmp	r3, #30
 8000846:	d108      	bne.n	800085a <Third_program+0x56>
		HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 8000848:	2100      	movs	r1, #0
 800084a:	480f      	ldr	r0, [pc, #60]	@ (8000888 <Third_program+0x84>)
 800084c:	f001 ff38 	bl	80026c0 <HAL_TIM_PWM_Stop>
		HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_2);
 8000850:	2104      	movs	r1, #4
 8000852:	480d      	ldr	r0, [pc, #52]	@ (8000888 <Third_program+0x84>)
 8000854:	f001 ff34 	bl	80026c0 <HAL_TIM_PWM_Stop>
}
 8000858:	e00b      	b.n	8000872 <Third_program+0x6e>
	else if (counter == 20)
 800085a:	4b08      	ldr	r3, [pc, #32]	@ (800087c <Third_program+0x78>)
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	2b14      	cmp	r3, #20
 8000860:	d107      	bne.n	8000872 <Third_program+0x6e>
		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000862:	2100      	movs	r1, #0
 8000864:	4808      	ldr	r0, [pc, #32]	@ (8000888 <Third_program+0x84>)
 8000866:	f001 fe63 	bl	8002530 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 800086a:	2104      	movs	r1, #4
 800086c:	4806      	ldr	r0, [pc, #24]	@ (8000888 <Third_program+0x84>)
 800086e:	f001 fe5f 	bl	8002530 <HAL_TIM_PWM_Start>
}
 8000872:	bf00      	nop
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	20000111 	.word	0x20000111
 800087c:	20000000 	.word	0x20000000
 8000880:	40020400 	.word	0x40020400
 8000884:	200000c8 	.word	0x200000c8
 8000888:	20000080 	.word	0x20000080

0800088c <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800088c:	b480      	push	{r7}
 800088e:	b083      	sub	sp, #12
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3){
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	4a06      	ldr	r2, [pc, #24]	@ (80008b4 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800089a:	4293      	cmp	r3, r2
 800089c:	d104      	bne.n	80008a8 <HAL_TIM_PeriodElapsedCallback+0x1c>
			counter--;}
 800089e:	4b06      	ldr	r3, [pc, #24]	@ (80008b8 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	3b01      	subs	r3, #1
 80008a4:	4a04      	ldr	r2, [pc, #16]	@ (80008b8 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80008a6:	6013      	str	r3, [r2, #0]
}
 80008a8:	bf00      	nop
 80008aa:	370c      	adds	r7, #12
 80008ac:	46bd      	mov	sp, r7
 80008ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b2:	4770      	bx	lr
 80008b4:	40000400 	.word	0x40000400
 80008b8:	20000000 	.word	0x20000000

080008bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008c0:	f000 fc20 	bl	8001104 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008c4:	f000 f902 	bl	8000acc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008c8:	f000 fa2e 	bl	8000d28 <MX_GPIO_Init>
  MX_TIM2_Init();
 80008cc:	f000 f95e 	bl	8000b8c <MX_TIM2_Init>
  MX_TIM3_Init();
 80008d0:	f000 f9dc 	bl	8000c8c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, 1);
 80008d4:	2201      	movs	r2, #1
 80008d6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80008da:	4872      	ldr	r0, [pc, #456]	@ (8000aa4 <main+0x1e8>)
 80008dc:	f000 ff66 	bl	80017ac <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 1);
 80008e0:	2201      	movs	r2, #1
 80008e2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80008e6:	4870      	ldr	r0, [pc, #448]	@ (8000aa8 <main+0x1ec>)
 80008e8:	f000 ff60 	bl	80017ac <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 80008ec:	2201      	movs	r2, #1
 80008ee:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80008f2:	486d      	ldr	r0, [pc, #436]	@ (8000aa8 <main+0x1ec>)
 80008f4:	f000 ff5a 	bl	80017ac <HAL_GPIO_WritePin>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
   	  // przycisk do programu 1
   	  if ((HAL_GPIO_ReadPin(USER_BUTTON_1_GPIO_Port, USER_BUTTON_1_Pin) == GPIO_PIN_RESET)&&(state == 0)) {
 80008f8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80008fc:	4869      	ldr	r0, [pc, #420]	@ (8000aa4 <main+0x1e8>)
 80008fe:	f000 ff3d 	bl	800177c <HAL_GPIO_ReadPin>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d137      	bne.n	8000978 <main+0xbc>
 8000908:	4b68      	ldr	r3, [pc, #416]	@ (8000aac <main+0x1f0>)
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	2b00      	cmp	r3, #0
 800090e:	d133      	bne.n	8000978 <main+0xbc>
   		  counter = progLength[0];
 8000910:	4b67      	ldr	r3, [pc, #412]	@ (8000ab0 <main+0x1f4>)
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	461a      	mov	r2, r3
 8000916:	4b67      	ldr	r3, [pc, #412]	@ (8000ab4 <main+0x1f8>)
 8000918:	601a      	str	r2, [r3, #0]
   		  program = 1;
 800091a:	4b67      	ldr	r3, [pc, #412]	@ (8000ab8 <main+0x1fc>)
 800091c:	2201      	movs	r2, #1
 800091e:	701a      	strb	r2, [r3, #0]
   		  state = 1;
 8000920:	4b62      	ldr	r3, [pc, #392]	@ (8000aac <main+0x1f0>)
 8000922:	2201      	movs	r2, #1
 8000924:	701a      	strb	r2, [r3, #0]
   		  interruptFlag = 0;
 8000926:	4b65      	ldr	r3, [pc, #404]	@ (8000abc <main+0x200>)
 8000928:	2200      	movs	r2, #0
 800092a:	701a      	strb	r2, [r3, #0]
   		  HAL_TIM_Base_Start_IT(&htim3);
 800092c:	4864      	ldr	r0, [pc, #400]	@ (8000ac0 <main+0x204>)
 800092e:	f001 fd07 	bl	8002340 <HAL_TIM_Base_Start_IT>
   		  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 0);
 8000932:	2200      	movs	r2, #0
 8000934:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000938:	485b      	ldr	r0, [pc, #364]	@ (8000aa8 <main+0x1ec>)
 800093a:	f000 ff37 	bl	80017ac <HAL_GPIO_WritePin>
   		  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 800093e:	2200      	movs	r2, #0
 8000940:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000944:	4858      	ldr	r0, [pc, #352]	@ (8000aa8 <main+0x1ec>)
 8000946:	f000 ff31 	bl	80017ac <HAL_GPIO_WritePin>
   		  HAL_GPIO_WritePin(LD10_GPIO_Port, LD10_Pin, 0);
 800094a:	2200      	movs	r2, #0
 800094c:	2110      	movs	r1, #16
 800094e:	4855      	ldr	r0, [pc, #340]	@ (8000aa4 <main+0x1e8>)
 8000950:	f000 ff2c 	bl	80017ac <HAL_GPIO_WritePin>
   		  TIM2->CCR1 = progPWM[0][0];
 8000954:	4b5b      	ldr	r3, [pc, #364]	@ (8000ac4 <main+0x208>)
 8000956:	781a      	ldrb	r2, [r3, #0]
 8000958:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800095c:	635a      	str	r2, [r3, #52]	@ 0x34
   		  TIM2->CCR2 = progPWM[0][1];
 800095e:	4b59      	ldr	r3, [pc, #356]	@ (8000ac4 <main+0x208>)
 8000960:	785a      	ldrb	r2, [r3, #1]
 8000962:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000966:	639a      	str	r2, [r3, #56]	@ 0x38
   		  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000968:	2100      	movs	r1, #0
 800096a:	4857      	ldr	r0, [pc, #348]	@ (8000ac8 <main+0x20c>)
 800096c:	f001 fde0 	bl	8002530 <HAL_TIM_PWM_Start>
   		  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000970:	2104      	movs	r1, #4
 8000972:	4855      	ldr	r0, [pc, #340]	@ (8000ac8 <main+0x20c>)
 8000974:	f001 fddc 	bl	8002530 <HAL_TIM_PWM_Start>
   	  }
   	  // przycisk do programu 2
   	   if ((HAL_GPIO_ReadPin(USER_BUTTON_2_GPIO_Port, USER_BUTTON_2_Pin) == GPIO_PIN_RESET)&&(state == 0)) {
 8000978:	2140      	movs	r1, #64	@ 0x40
 800097a:	484a      	ldr	r0, [pc, #296]	@ (8000aa4 <main+0x1e8>)
 800097c:	f000 fefe 	bl	800177c <HAL_GPIO_ReadPin>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d137      	bne.n	80009f6 <main+0x13a>
 8000986:	4b49      	ldr	r3, [pc, #292]	@ (8000aac <main+0x1f0>)
 8000988:	781b      	ldrb	r3, [r3, #0]
 800098a:	2b00      	cmp	r3, #0
 800098c:	d133      	bne.n	80009f6 <main+0x13a>
   		  counter = progLength[1];
 800098e:	4b48      	ldr	r3, [pc, #288]	@ (8000ab0 <main+0x1f4>)
 8000990:	785b      	ldrb	r3, [r3, #1]
 8000992:	461a      	mov	r2, r3
 8000994:	4b47      	ldr	r3, [pc, #284]	@ (8000ab4 <main+0x1f8>)
 8000996:	601a      	str	r2, [r3, #0]
   		  program = 2;
 8000998:	4b47      	ldr	r3, [pc, #284]	@ (8000ab8 <main+0x1fc>)
 800099a:	2202      	movs	r2, #2
 800099c:	701a      	strb	r2, [r3, #0]
   		  state = 1;
 800099e:	4b43      	ldr	r3, [pc, #268]	@ (8000aac <main+0x1f0>)
 80009a0:	2201      	movs	r2, #1
 80009a2:	701a      	strb	r2, [r3, #0]
   		  interruptFlag = 0;
 80009a4:	4b45      	ldr	r3, [pc, #276]	@ (8000abc <main+0x200>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	701a      	strb	r2, [r3, #0]
   		  HAL_TIM_Base_Start_IT(&htim3);
 80009aa:	4845      	ldr	r0, [pc, #276]	@ (8000ac0 <main+0x204>)
 80009ac:	f001 fcc8 	bl	8002340 <HAL_TIM_Base_Start_IT>
   		  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, 0);
 80009b0:	2200      	movs	r2, #0
 80009b2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80009b6:	483b      	ldr	r0, [pc, #236]	@ (8000aa4 <main+0x1e8>)
 80009b8:	f000 fef8 	bl	80017ac <HAL_GPIO_WritePin>
   		  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 80009bc:	2200      	movs	r2, #0
 80009be:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80009c2:	4839      	ldr	r0, [pc, #228]	@ (8000aa8 <main+0x1ec>)
 80009c4:	f000 fef2 	bl	80017ac <HAL_GPIO_WritePin>
   		  HAL_GPIO_WritePin(LD10_GPIO_Port, LD10_Pin, 0);
 80009c8:	2200      	movs	r2, #0
 80009ca:	2110      	movs	r1, #16
 80009cc:	4835      	ldr	r0, [pc, #212]	@ (8000aa4 <main+0x1e8>)
 80009ce:	f000 feed 	bl	80017ac <HAL_GPIO_WritePin>
   		  TIM2->CCR1 = progPWM[1][0];
 80009d2:	4b3c      	ldr	r3, [pc, #240]	@ (8000ac4 <main+0x208>)
 80009d4:	789a      	ldrb	r2, [r3, #2]
 80009d6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80009da:	635a      	str	r2, [r3, #52]	@ 0x34
   		  TIM2->CCR2 = progPWM[1][1];
 80009dc:	4b39      	ldr	r3, [pc, #228]	@ (8000ac4 <main+0x208>)
 80009de:	78da      	ldrb	r2, [r3, #3]
 80009e0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80009e4:	639a      	str	r2, [r3, #56]	@ 0x38
   		  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80009e6:	2100      	movs	r1, #0
 80009e8:	4835      	ldr	r0, [pc, #212]	@ (8000ac0 <main+0x204>)
 80009ea:	f001 fda1 	bl	8002530 <HAL_TIM_PWM_Start>
   		  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80009ee:	2104      	movs	r1, #4
 80009f0:	4833      	ldr	r0, [pc, #204]	@ (8000ac0 <main+0x204>)
 80009f2:	f001 fd9d 	bl	8002530 <HAL_TIM_PWM_Start>
   	  }
   	  // przycisk do programu 3
   	  if ((HAL_GPIO_ReadPin(USER_BUTTON_3_GPIO_Port, USER_BUTTON_3_Pin) == GPIO_PIN_RESET)&&(state == 0)) {
 80009f6:	2120      	movs	r1, #32
 80009f8:	482a      	ldr	r0, [pc, #168]	@ (8000aa4 <main+0x1e8>)
 80009fa:	f000 febf 	bl	800177c <HAL_GPIO_ReadPin>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d137      	bne.n	8000a74 <main+0x1b8>
 8000a04:	4b29      	ldr	r3, [pc, #164]	@ (8000aac <main+0x1f0>)
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d133      	bne.n	8000a74 <main+0x1b8>
   		  counter = progLength[2];
 8000a0c:	4b28      	ldr	r3, [pc, #160]	@ (8000ab0 <main+0x1f4>)
 8000a0e:	789b      	ldrb	r3, [r3, #2]
 8000a10:	461a      	mov	r2, r3
 8000a12:	4b28      	ldr	r3, [pc, #160]	@ (8000ab4 <main+0x1f8>)
 8000a14:	601a      	str	r2, [r3, #0]
   		  program = 3;
 8000a16:	4b28      	ldr	r3, [pc, #160]	@ (8000ab8 <main+0x1fc>)
 8000a18:	2203      	movs	r2, #3
 8000a1a:	701a      	strb	r2, [r3, #0]
   		  state = 1;
 8000a1c:	4b23      	ldr	r3, [pc, #140]	@ (8000aac <main+0x1f0>)
 8000a1e:	2201      	movs	r2, #1
 8000a20:	701a      	strb	r2, [r3, #0]
   		  interruptFlag = 0;
 8000a22:	4b26      	ldr	r3, [pc, #152]	@ (8000abc <main+0x200>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	701a      	strb	r2, [r3, #0]
   		  HAL_TIM_Base_Start_IT(&htim3);
 8000a28:	4825      	ldr	r0, [pc, #148]	@ (8000ac0 <main+0x204>)
 8000a2a:	f001 fc89 	bl	8002340 <HAL_TIM_Base_Start_IT>
   		  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 0);
 8000a2e:	2200      	movs	r2, #0
 8000a30:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000a34:	481c      	ldr	r0, [pc, #112]	@ (8000aa8 <main+0x1ec>)
 8000a36:	f000 feb9 	bl	80017ac <HAL_GPIO_WritePin>
   		  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, 0);
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000a40:	4818      	ldr	r0, [pc, #96]	@ (8000aa4 <main+0x1e8>)
 8000a42:	f000 feb3 	bl	80017ac <HAL_GPIO_WritePin>
   		  HAL_GPIO_WritePin(LD10_GPIO_Port, LD10_Pin, 0);
 8000a46:	2200      	movs	r2, #0
 8000a48:	2110      	movs	r1, #16
 8000a4a:	4816      	ldr	r0, [pc, #88]	@ (8000aa4 <main+0x1e8>)
 8000a4c:	f000 feae 	bl	80017ac <HAL_GPIO_WritePin>
   		  TIM2->CCR1 = progPWM[2][0];
 8000a50:	4b1c      	ldr	r3, [pc, #112]	@ (8000ac4 <main+0x208>)
 8000a52:	791a      	ldrb	r2, [r3, #4]
 8000a54:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000a58:	635a      	str	r2, [r3, #52]	@ 0x34
   		  TIM2->CCR2 = progPWM[2][1];
 8000a5a:	4b1a      	ldr	r3, [pc, #104]	@ (8000ac4 <main+0x208>)
 8000a5c:	795a      	ldrb	r2, [r3, #5]
 8000a5e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000a62:	639a      	str	r2, [r3, #56]	@ 0x38
   		  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000a64:	2100      	movs	r1, #0
 8000a66:	4818      	ldr	r0, [pc, #96]	@ (8000ac8 <main+0x20c>)
 8000a68:	f001 fd62 	bl	8002530 <HAL_TIM_PWM_Start>
   		  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000a6c:	2104      	movs	r1, #4
 8000a6e:	4816      	ldr	r0, [pc, #88]	@ (8000ac8 <main+0x20c>)
 8000a70:	f001 fd5e 	bl	8002530 <HAL_TIM_PWM_Start>
   	  }

   	  	/*const char message[] = "Hello world!\r\n";
   	    HAL_UART_Transmit(&huart2, (uint8_t*)message, strlen(message), HAL_MAX_DELAY);*/
   	  switch (program){
 8000a74:	4b10      	ldr	r3, [pc, #64]	@ (8000ab8 <main+0x1fc>)
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	2b03      	cmp	r3, #3
 8000a7a:	d00c      	beq.n	8000a96 <main+0x1da>
 8000a7c:	2b03      	cmp	r3, #3
 8000a7e:	dc0d      	bgt.n	8000a9c <main+0x1e0>
 8000a80:	2b01      	cmp	r3, #1
 8000a82:	d002      	beq.n	8000a8a <main+0x1ce>
 8000a84:	2b02      	cmp	r3, #2
 8000a86:	d003      	beq.n	8000a90 <main+0x1d4>
 8000a88:	e008      	b.n	8000a9c <main+0x1e0>
   	  case 1: First_program(); 		//egzekucja pierwszego programu
 8000a8a:	f7ff fde5 	bl	8000658 <First_program>
   	  break;
 8000a8e:	e008      	b.n	8000aa2 <main+0x1e6>
   	  case 2: Second_program();		//egzekucja drugiego programu
 8000a90:	f7ff fe0c 	bl	80006ac <Second_program>
   	  break;
 8000a94:	e005      	b.n	8000aa2 <main+0x1e6>
   	  case 3: Third_program();		//egzekucja trzeciego programu
 8000a96:	f7ff feb5 	bl	8000804 <Third_program>
   	  break;
 8000a9a:	e002      	b.n	8000aa2 <main+0x1e6>
   	  default:
   		  HAL_Delay(50);
 8000a9c:	2032      	movs	r0, #50	@ 0x32
 8000a9e:	f000 fba3 	bl	80011e8 <HAL_Delay>
   	  if ((HAL_GPIO_ReadPin(USER_BUTTON_1_GPIO_Port, USER_BUTTON_1_Pin) == GPIO_PIN_RESET)&&(state == 0)) {
 8000aa2:	e729      	b.n	80008f8 <main+0x3c>
 8000aa4:	40020800 	.word	0x40020800
 8000aa8:	40020400 	.word	0x40020400
 8000aac:	20000110 	.word	0x20000110
 8000ab0:	20000004 	.word	0x20000004
 8000ab4:	20000000 	.word	0x20000000
 8000ab8:	20000112 	.word	0x20000112
 8000abc:	20000111 	.word	0x20000111
 8000ac0:	200000c8 	.word	0x200000c8
 8000ac4:	20000008 	.word	0x20000008
 8000ac8:	20000080 	.word	0x20000080

08000acc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b094      	sub	sp, #80	@ 0x50
 8000ad0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ad2:	f107 031c 	add.w	r3, r7, #28
 8000ad6:	2234      	movs	r2, #52	@ 0x34
 8000ad8:	2100      	movs	r1, #0
 8000ada:	4618      	mov	r0, r3
 8000adc:	f002 fcae 	bl	800343c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ae0:	f107 0308 	add.w	r3, r7, #8
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	601a      	str	r2, [r3, #0]
 8000ae8:	605a      	str	r2, [r3, #4]
 8000aea:	609a      	str	r2, [r3, #8]
 8000aec:	60da      	str	r2, [r3, #12]
 8000aee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000af0:	2300      	movs	r3, #0
 8000af2:	607b      	str	r3, [r7, #4]
 8000af4:	4b23      	ldr	r3, [pc, #140]	@ (8000b84 <SystemClock_Config+0xb8>)
 8000af6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000af8:	4a22      	ldr	r2, [pc, #136]	@ (8000b84 <SystemClock_Config+0xb8>)
 8000afa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000afe:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b00:	4b20      	ldr	r3, [pc, #128]	@ (8000b84 <SystemClock_Config+0xb8>)
 8000b02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b04:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b08:	607b      	str	r3, [r7, #4]
 8000b0a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	603b      	str	r3, [r7, #0]
 8000b10:	4b1d      	ldr	r3, [pc, #116]	@ (8000b88 <SystemClock_Config+0xbc>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000b18:	4a1b      	ldr	r2, [pc, #108]	@ (8000b88 <SystemClock_Config+0xbc>)
 8000b1a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b1e:	6013      	str	r3, [r2, #0]
 8000b20:	4b19      	ldr	r3, [pc, #100]	@ (8000b88 <SystemClock_Config+0xbc>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000b28:	603b      	str	r3, [r7, #0]
 8000b2a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b2c:	2302      	movs	r3, #2
 8000b2e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b30:	2301      	movs	r3, #1
 8000b32:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b34:	2310      	movs	r3, #16
 8000b36:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b3c:	f107 031c 	add.w	r3, r7, #28
 8000b40:	4618      	mov	r0, r3
 8000b42:	f001 f90f 	bl	8001d64 <HAL_RCC_OscConfig>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d001      	beq.n	8000b50 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000b4c:	f000 f9a8 	bl	8000ea0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b50:	230f      	movs	r3, #15
 8000b52:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000b54:	2300      	movs	r3, #0
 8000b56:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b60:	2300      	movs	r3, #0
 8000b62:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b64:	f107 0308 	add.w	r3, r7, #8
 8000b68:	2100      	movs	r1, #0
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f000 fe6a 	bl	8001844 <HAL_RCC_ClockConfig>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000b76:	f000 f993 	bl	8000ea0 <Error_Handler>
  }
}
 8000b7a:	bf00      	nop
 8000b7c:	3750      	adds	r7, #80	@ 0x50
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	40023800 	.word	0x40023800
 8000b88:	40007000 	.word	0x40007000

08000b8c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b08e      	sub	sp, #56	@ 0x38
 8000b90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b92:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000b96:	2200      	movs	r2, #0
 8000b98:	601a      	str	r2, [r3, #0]
 8000b9a:	605a      	str	r2, [r3, #4]
 8000b9c:	609a      	str	r2, [r3, #8]
 8000b9e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ba0:	f107 0320 	add.w	r3, r7, #32
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	601a      	str	r2, [r3, #0]
 8000ba8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000baa:	1d3b      	adds	r3, r7, #4
 8000bac:	2200      	movs	r2, #0
 8000bae:	601a      	str	r2, [r3, #0]
 8000bb0:	605a      	str	r2, [r3, #4]
 8000bb2:	609a      	str	r2, [r3, #8]
 8000bb4:	60da      	str	r2, [r3, #12]
 8000bb6:	611a      	str	r2, [r3, #16]
 8000bb8:	615a      	str	r2, [r3, #20]
 8000bba:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000bbc:	4b32      	ldr	r3, [pc, #200]	@ (8000c88 <MX_TIM2_Init+0xfc>)
 8000bbe:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000bc2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16-1;
 8000bc4:	4b30      	ldr	r3, [pc, #192]	@ (8000c88 <MX_TIM2_Init+0xfc>)
 8000bc6:	220f      	movs	r2, #15
 8000bc8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bca:	4b2f      	ldr	r3, [pc, #188]	@ (8000c88 <MX_TIM2_Init+0xfc>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8000bd0:	4b2d      	ldr	r3, [pc, #180]	@ (8000c88 <MX_TIM2_Init+0xfc>)
 8000bd2:	2263      	movs	r2, #99	@ 0x63
 8000bd4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bd6:	4b2c      	ldr	r3, [pc, #176]	@ (8000c88 <MX_TIM2_Init+0xfc>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bdc:	4b2a      	ldr	r3, [pc, #168]	@ (8000c88 <MX_TIM2_Init+0xfc>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000be2:	4829      	ldr	r0, [pc, #164]	@ (8000c88 <MX_TIM2_Init+0xfc>)
 8000be4:	f001 fb5c 	bl	80022a0 <HAL_TIM_Base_Init>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8000bee:	f000 f957 	bl	8000ea0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bf2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000bf6:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000bf8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	4822      	ldr	r0, [pc, #136]	@ (8000c88 <MX_TIM2_Init+0xfc>)
 8000c00:	f001 ff80 	bl	8002b04 <HAL_TIM_ConfigClockSource>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d001      	beq.n	8000c0e <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8000c0a:	f000 f949 	bl	8000ea0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000c0e:	481e      	ldr	r0, [pc, #120]	@ (8000c88 <MX_TIM2_Init+0xfc>)
 8000c10:	f001 fc35 	bl	800247e <HAL_TIM_PWM_Init>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d001      	beq.n	8000c1e <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8000c1a:	f000 f941 	bl	8000ea0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c22:	2300      	movs	r3, #0
 8000c24:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c26:	f107 0320 	add.w	r3, r7, #32
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	4816      	ldr	r0, [pc, #88]	@ (8000c88 <MX_TIM2_Init+0xfc>)
 8000c2e:	f002 fb75 	bl	800331c <HAL_TIMEx_MasterConfigSynchronization>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8000c38:	f000 f932 	bl	8000ea0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c3c:	2360      	movs	r3, #96	@ 0x60
 8000c3e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000c40:	2300      	movs	r3, #0
 8000c42:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c44:	2300      	movs	r3, #0
 8000c46:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c4c:	1d3b      	adds	r3, r7, #4
 8000c4e:	2200      	movs	r2, #0
 8000c50:	4619      	mov	r1, r3
 8000c52:	480d      	ldr	r0, [pc, #52]	@ (8000c88 <MX_TIM2_Init+0xfc>)
 8000c54:	f001 fe94 	bl	8002980 <HAL_TIM_PWM_ConfigChannel>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d001      	beq.n	8000c62 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8000c5e:	f000 f91f 	bl	8000ea0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000c62:	1d3b      	adds	r3, r7, #4
 8000c64:	2204      	movs	r2, #4
 8000c66:	4619      	mov	r1, r3
 8000c68:	4807      	ldr	r0, [pc, #28]	@ (8000c88 <MX_TIM2_Init+0xfc>)
 8000c6a:	f001 fe89 	bl	8002980 <HAL_TIM_PWM_ConfigChannel>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d001      	beq.n	8000c78 <MX_TIM2_Init+0xec>
  {
    Error_Handler();
 8000c74:	f000 f914 	bl	8000ea0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000c78:	4803      	ldr	r0, [pc, #12]	@ (8000c88 <MX_TIM2_Init+0xfc>)
 8000c7a:	f000 f983 	bl	8000f84 <HAL_TIM_MspPostInit>

}
 8000c7e:	bf00      	nop
 8000c80:	3738      	adds	r7, #56	@ 0x38
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	20000080 	.word	0x20000080

08000c8c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b086      	sub	sp, #24
 8000c90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c92:	f107 0308 	add.w	r3, r7, #8
 8000c96:	2200      	movs	r2, #0
 8000c98:	601a      	str	r2, [r3, #0]
 8000c9a:	605a      	str	r2, [r3, #4]
 8000c9c:	609a      	str	r2, [r3, #8]
 8000c9e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ca0:	463b      	mov	r3, r7
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	601a      	str	r2, [r3, #0]
 8000ca6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000ca8:	4b1d      	ldr	r3, [pc, #116]	@ (8000d20 <MX_TIM3_Init+0x94>)
 8000caa:	4a1e      	ldr	r2, [pc, #120]	@ (8000d24 <MX_TIM3_Init+0x98>)
 8000cac:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 4000-1;
 8000cae:	4b1c      	ldr	r3, [pc, #112]	@ (8000d20 <MX_TIM3_Init+0x94>)
 8000cb0:	f640 729f 	movw	r2, #3999	@ 0xf9f
 8000cb4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cb6:	4b1a      	ldr	r3, [pc, #104]	@ (8000d20 <MX_TIM3_Init+0x94>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4000-1;
 8000cbc:	4b18      	ldr	r3, [pc, #96]	@ (8000d20 <MX_TIM3_Init+0x94>)
 8000cbe:	f640 729f 	movw	r2, #3999	@ 0xf9f
 8000cc2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cc4:	4b16      	ldr	r3, [pc, #88]	@ (8000d20 <MX_TIM3_Init+0x94>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cca:	4b15      	ldr	r3, [pc, #84]	@ (8000d20 <MX_TIM3_Init+0x94>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000cd0:	4813      	ldr	r0, [pc, #76]	@ (8000d20 <MX_TIM3_Init+0x94>)
 8000cd2:	f001 fae5 	bl	80022a0 <HAL_TIM_Base_Init>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d001      	beq.n	8000ce0 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000cdc:	f000 f8e0 	bl	8000ea0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ce0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ce4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000ce6:	f107 0308 	add.w	r3, r7, #8
 8000cea:	4619      	mov	r1, r3
 8000cec:	480c      	ldr	r0, [pc, #48]	@ (8000d20 <MX_TIM3_Init+0x94>)
 8000cee:	f001 ff09 	bl	8002b04 <HAL_TIM_ConfigClockSource>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d001      	beq.n	8000cfc <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000cf8:	f000 f8d2 	bl	8000ea0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d00:	2300      	movs	r3, #0
 8000d02:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d04:	463b      	mov	r3, r7
 8000d06:	4619      	mov	r1, r3
 8000d08:	4805      	ldr	r0, [pc, #20]	@ (8000d20 <MX_TIM3_Init+0x94>)
 8000d0a:	f002 fb07 	bl	800331c <HAL_TIMEx_MasterConfigSynchronization>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d001      	beq.n	8000d18 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000d14:	f000 f8c4 	bl	8000ea0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000d18:	bf00      	nop
 8000d1a:	3718      	adds	r7, #24
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	200000c8 	.word	0x200000c8
 8000d24:	40000400 	.word	0x40000400

08000d28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b088      	sub	sp, #32
 8000d2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d2e:	f107 030c 	add.w	r3, r7, #12
 8000d32:	2200      	movs	r2, #0
 8000d34:	601a      	str	r2, [r3, #0]
 8000d36:	605a      	str	r2, [r3, #4]
 8000d38:	609a      	str	r2, [r3, #8]
 8000d3a:	60da      	str	r2, [r3, #12]
 8000d3c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d3e:	2300      	movs	r3, #0
 8000d40:	60bb      	str	r3, [r7, #8]
 8000d42:	4b47      	ldr	r3, [pc, #284]	@ (8000e60 <MX_GPIO_Init+0x138>)
 8000d44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d46:	4a46      	ldr	r2, [pc, #280]	@ (8000e60 <MX_GPIO_Init+0x138>)
 8000d48:	f043 0304 	orr.w	r3, r3, #4
 8000d4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d4e:	4b44      	ldr	r3, [pc, #272]	@ (8000e60 <MX_GPIO_Init+0x138>)
 8000d50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d52:	f003 0304 	and.w	r3, r3, #4
 8000d56:	60bb      	str	r3, [r7, #8]
 8000d58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	607b      	str	r3, [r7, #4]
 8000d5e:	4b40      	ldr	r3, [pc, #256]	@ (8000e60 <MX_GPIO_Init+0x138>)
 8000d60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d62:	4a3f      	ldr	r2, [pc, #252]	@ (8000e60 <MX_GPIO_Init+0x138>)
 8000d64:	f043 0301 	orr.w	r3, r3, #1
 8000d68:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d6a:	4b3d      	ldr	r3, [pc, #244]	@ (8000e60 <MX_GPIO_Init+0x138>)
 8000d6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d6e:	f003 0301 	and.w	r3, r3, #1
 8000d72:	607b      	str	r3, [r7, #4]
 8000d74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d76:	2300      	movs	r3, #0
 8000d78:	603b      	str	r3, [r7, #0]
 8000d7a:	4b39      	ldr	r3, [pc, #228]	@ (8000e60 <MX_GPIO_Init+0x138>)
 8000d7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d7e:	4a38      	ldr	r2, [pc, #224]	@ (8000e60 <MX_GPIO_Init+0x138>)
 8000d80:	f043 0302 	orr.w	r3, r3, #2
 8000d84:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d86:	4b36      	ldr	r3, [pc, #216]	@ (8000e60 <MX_GPIO_Init+0x138>)
 8000d88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d8a:	f003 0302 	and.w	r3, r3, #2
 8000d8e:	603b      	str	r3, [r7, #0]
 8000d90:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|SevSegD_Pin|SevSegE_Pin|BUZZER_Pin, GPIO_PIN_RESET);
 8000d92:	2200      	movs	r2, #0
 8000d94:	f44f 6132 	mov.w	r1, #2848	@ 0xb20
 8000d98:	4832      	ldr	r0, [pc, #200]	@ (8000e64 <MX_GPIO_Init+0x13c>)
 8000d9a:	f000 fd07 	bl	80017ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LD10_Pin|LD1_Pin, GPIO_PIN_RESET);
 8000d9e:	2200      	movs	r2, #0
 8000da0:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8000da4:	4830      	ldr	r0, [pc, #192]	@ (8000e68 <MX_GPIO_Init+0x140>)
 8000da6:	f000 fd01 	bl	80017ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SevSegF_Pin|SevSegA_Pin|SevSegC_Pin|D1_Pin
 8000daa:	2200      	movs	r2, #0
 8000dac:	f24f 7136 	movw	r1, #63286	@ 0xf736
 8000db0:	482e      	ldr	r0, [pc, #184]	@ (8000e6c <MX_GPIO_Init+0x144>)
 8000db2:	f000 fcfb 	bl	80017ac <HAL_GPIO_WritePin>
                          |SevSegB_Pin|D3_Pin|D2_Pin|SevSegG_Pin
                          |D4_Pin|LD2_Pin|LD3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : STM_BUTTON_Pin USER_BUTTON_3_Pin USER_BUTTON_2_Pin USER_BUTTON_1_Pin */
  GPIO_InitStruct.Pin = STM_BUTTON_Pin|USER_BUTTON_3_Pin|USER_BUTTON_2_Pin|USER_BUTTON_1_Pin;
 8000db6:	f242 1360 	movw	r3, #8544	@ 0x2160
 8000dba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dc0:	2301      	movs	r3, #1
 8000dc2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dc4:	f107 030c 	add.w	r3, r7, #12
 8000dc8:	4619      	mov	r1, r3
 8000dca:	4827      	ldr	r0, [pc, #156]	@ (8000e68 <MX_GPIO_Init+0x140>)
 8000dcc:	f000 fb42 	bl	8001454 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 SevSegD_Pin SevSegE_Pin BUZZER_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_5|SevSegD_Pin|SevSegE_Pin|BUZZER_Pin;
 8000dd0:	f44f 6332 	mov.w	r3, #2848	@ 0xb20
 8000dd4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dde:	2300      	movs	r3, #0
 8000de0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000de2:	f107 030c 	add.w	r3, r7, #12
 8000de6:	4619      	mov	r1, r3
 8000de8:	481e      	ldr	r0, [pc, #120]	@ (8000e64 <MX_GPIO_Init+0x13c>)
 8000dea:	f000 fb33 	bl	8001454 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD10_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD10_Pin|LD1_Pin;
 8000dee:	f44f 7304 	mov.w	r3, #528	@ 0x210
 8000df2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000df4:	2301      	movs	r3, #1
 8000df6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e00:	f107 030c 	add.w	r3, r7, #12
 8000e04:	4619      	mov	r1, r3
 8000e06:	4818      	ldr	r0, [pc, #96]	@ (8000e68 <MX_GPIO_Init+0x140>)
 8000e08:	f000 fb24 	bl	8001454 <HAL_GPIO_Init>

  /*Configure GPIO pins : SevSegF_Pin SevSegA_Pin SevSegC_Pin D1_Pin
                           SevSegB_Pin D3_Pin D2_Pin SevSegG_Pin
                           D4_Pin LD2_Pin LD3_Pin */
  GPIO_InitStruct.Pin = SevSegF_Pin|SevSegA_Pin|SevSegC_Pin|D1_Pin
 8000e0c:	f24f 7336 	movw	r3, #63286	@ 0xf736
 8000e10:	60fb      	str	r3, [r7, #12]
                          |SevSegB_Pin|D3_Pin|D2_Pin|SevSegG_Pin
                          |D4_Pin|LD2_Pin|LD3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e12:	2301      	movs	r3, #1
 8000e14:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e16:	2300      	movs	r3, #0
 8000e18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e1e:	f107 030c 	add.w	r3, r7, #12
 8000e22:	4619      	mov	r1, r3
 8000e24:	4811      	ldr	r0, [pc, #68]	@ (8000e6c <MX_GPIO_Init+0x144>)
 8000e26:	f000 fb15 	bl	8001454 <HAL_GPIO_Init>

  /*Configure GPIO pin : RESET_BUTTON_Pin */
  GPIO_InitStruct.Pin = RESET_BUTTON_Pin;
 8000e2a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e2e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e30:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000e34:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e36:	2301      	movs	r3, #1
 8000e38:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(RESET_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000e3a:	f107 030c 	add.w	r3, r7, #12
 8000e3e:	4619      	mov	r1, r3
 8000e40:	4808      	ldr	r0, [pc, #32]	@ (8000e64 <MX_GPIO_Init+0x13c>)
 8000e42:	f000 fb07 	bl	8001454 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000e46:	2200      	movs	r2, #0
 8000e48:	2100      	movs	r1, #0
 8000e4a:	2028      	movs	r0, #40	@ 0x28
 8000e4c:	f000 facb 	bl	80013e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000e50:	2028      	movs	r0, #40	@ 0x28
 8000e52:	f000 fae4 	bl	800141e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e56:	bf00      	nop
 8000e58:	3720      	adds	r7, #32
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	40023800 	.word	0x40023800
 8000e64:	40020000 	.word	0x40020000
 8000e68:	40020800 	.word	0x40020800
 8000e6c:	40020400 	.word	0x40020400

08000e70 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	4603      	mov	r3, r0
 8000e78:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_12) {
 8000e7a:	88fb      	ldrh	r3, [r7, #6]
 8000e7c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000e80:	d106      	bne.n	8000e90 <HAL_GPIO_EXTI_Callback+0x20>
		interruptFlag = 1;
 8000e82:	4b05      	ldr	r3, [pc, #20]	@ (8000e98 <HAL_GPIO_EXTI_Callback+0x28>)
 8000e84:	2201      	movs	r2, #1
 8000e86:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000e88:	2120      	movs	r1, #32
 8000e8a:	4804      	ldr	r0, [pc, #16]	@ (8000e9c <HAL_GPIO_EXTI_Callback+0x2c>)
 8000e8c:	f000 fca7 	bl	80017de <HAL_GPIO_TogglePin>
	  }
}
 8000e90:	bf00      	nop
 8000e92:	3708      	adds	r7, #8
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	20000111 	.word	0x20000111
 8000e9c:	40020000 	.word	0x40020000

08000ea0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ea4:	b672      	cpsid	i
}
 8000ea6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ea8:	bf00      	nop
 8000eaa:	e7fd      	b.n	8000ea8 <Error_Handler+0x8>

08000eac <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b083      	sub	sp, #12
 8000eb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	607b      	str	r3, [r7, #4]
 8000eb6:	4b10      	ldr	r3, [pc, #64]	@ (8000ef8 <HAL_MspInit+0x4c>)
 8000eb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eba:	4a0f      	ldr	r2, [pc, #60]	@ (8000ef8 <HAL_MspInit+0x4c>)
 8000ebc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ec0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ec2:	4b0d      	ldr	r3, [pc, #52]	@ (8000ef8 <HAL_MspInit+0x4c>)
 8000ec4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ec6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000eca:	607b      	str	r3, [r7, #4]
 8000ecc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ece:	2300      	movs	r3, #0
 8000ed0:	603b      	str	r3, [r7, #0]
 8000ed2:	4b09      	ldr	r3, [pc, #36]	@ (8000ef8 <HAL_MspInit+0x4c>)
 8000ed4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ed6:	4a08      	ldr	r2, [pc, #32]	@ (8000ef8 <HAL_MspInit+0x4c>)
 8000ed8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000edc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ede:	4b06      	ldr	r3, [pc, #24]	@ (8000ef8 <HAL_MspInit+0x4c>)
 8000ee0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ee2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ee6:	603b      	str	r3, [r7, #0]
 8000ee8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eea:	bf00      	nop
 8000eec:	370c      	adds	r7, #12
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop
 8000ef8:	40023800 	.word	0x40023800

08000efc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b084      	sub	sp, #16
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000f0c:	d116      	bne.n	8000f3c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f0e:	2300      	movs	r3, #0
 8000f10:	60fb      	str	r3, [r7, #12]
 8000f12:	4b1a      	ldr	r3, [pc, #104]	@ (8000f7c <HAL_TIM_Base_MspInit+0x80>)
 8000f14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f16:	4a19      	ldr	r2, [pc, #100]	@ (8000f7c <HAL_TIM_Base_MspInit+0x80>)
 8000f18:	f043 0301 	orr.w	r3, r3, #1
 8000f1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f1e:	4b17      	ldr	r3, [pc, #92]	@ (8000f7c <HAL_TIM_Base_MspInit+0x80>)
 8000f20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f22:	f003 0301 	and.w	r3, r3, #1
 8000f26:	60fb      	str	r3, [r7, #12]
 8000f28:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	2100      	movs	r1, #0
 8000f2e:	201c      	movs	r0, #28
 8000f30:	f000 fa59 	bl	80013e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000f34:	201c      	movs	r0, #28
 8000f36:	f000 fa72 	bl	800141e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000f3a:	e01a      	b.n	8000f72 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM3)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a0f      	ldr	r2, [pc, #60]	@ (8000f80 <HAL_TIM_Base_MspInit+0x84>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d115      	bne.n	8000f72 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000f46:	2300      	movs	r3, #0
 8000f48:	60bb      	str	r3, [r7, #8]
 8000f4a:	4b0c      	ldr	r3, [pc, #48]	@ (8000f7c <HAL_TIM_Base_MspInit+0x80>)
 8000f4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f4e:	4a0b      	ldr	r2, [pc, #44]	@ (8000f7c <HAL_TIM_Base_MspInit+0x80>)
 8000f50:	f043 0302 	orr.w	r3, r3, #2
 8000f54:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f56:	4b09      	ldr	r3, [pc, #36]	@ (8000f7c <HAL_TIM_Base_MspInit+0x80>)
 8000f58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f5a:	f003 0302 	and.w	r3, r3, #2
 8000f5e:	60bb      	str	r3, [r7, #8]
 8000f60:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000f62:	2200      	movs	r2, #0
 8000f64:	2100      	movs	r1, #0
 8000f66:	201d      	movs	r0, #29
 8000f68:	f000 fa3d 	bl	80013e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000f6c:	201d      	movs	r0, #29
 8000f6e:	f000 fa56 	bl	800141e <HAL_NVIC_EnableIRQ>
}
 8000f72:	bf00      	nop
 8000f74:	3710      	adds	r7, #16
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	40023800 	.word	0x40023800
 8000f80:	40000400 	.word	0x40000400

08000f84 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b088      	sub	sp, #32
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f8c:	f107 030c 	add.w	r3, r7, #12
 8000f90:	2200      	movs	r2, #0
 8000f92:	601a      	str	r2, [r3, #0]
 8000f94:	605a      	str	r2, [r3, #4]
 8000f96:	609a      	str	r2, [r3, #8]
 8000f98:	60da      	str	r2, [r3, #12]
 8000f9a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000fa4:	d11d      	bne.n	8000fe2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	60bb      	str	r3, [r7, #8]
 8000faa:	4b10      	ldr	r3, [pc, #64]	@ (8000fec <HAL_TIM_MspPostInit+0x68>)
 8000fac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fae:	4a0f      	ldr	r2, [pc, #60]	@ (8000fec <HAL_TIM_MspPostInit+0x68>)
 8000fb0:	f043 0301 	orr.w	r3, r3, #1
 8000fb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fb6:	4b0d      	ldr	r3, [pc, #52]	@ (8000fec <HAL_TIM_MspPostInit+0x68>)
 8000fb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fba:	f003 0301 	and.w	r3, r3, #1
 8000fbe:	60bb      	str	r3, [r7, #8]
 8000fc0:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000fc2:	2303      	movs	r3, #3
 8000fc4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc6:	2302      	movs	r3, #2
 8000fc8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fd6:	f107 030c 	add.w	r3, r7, #12
 8000fda:	4619      	mov	r1, r3
 8000fdc:	4804      	ldr	r0, [pc, #16]	@ (8000ff0 <HAL_TIM_MspPostInit+0x6c>)
 8000fde:	f000 fa39 	bl	8001454 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000fe2:	bf00      	nop
 8000fe4:	3720      	adds	r7, #32
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	40023800 	.word	0x40023800
 8000ff0:	40020000 	.word	0x40020000

08000ff4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ff8:	bf00      	nop
 8000ffa:	e7fd      	b.n	8000ff8 <NMI_Handler+0x4>

08000ffc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001000:	bf00      	nop
 8001002:	e7fd      	b.n	8001000 <HardFault_Handler+0x4>

08001004 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001008:	bf00      	nop
 800100a:	e7fd      	b.n	8001008 <MemManage_Handler+0x4>

0800100c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001010:	bf00      	nop
 8001012:	e7fd      	b.n	8001010 <BusFault_Handler+0x4>

08001014 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001018:	bf00      	nop
 800101a:	e7fd      	b.n	8001018 <UsageFault_Handler+0x4>

0800101c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001020:	bf00      	nop
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr

0800102a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800102a:	b480      	push	{r7}
 800102c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800102e:	bf00      	nop
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr

08001038 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800103c:	bf00      	nop
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr

08001046 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001046:	b580      	push	{r7, lr}
 8001048:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800104a:	f000 f8ad 	bl	80011a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800104e:	bf00      	nop
 8001050:	bd80      	pop	{r7, pc}
	...

08001054 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001058:	4802      	ldr	r0, [pc, #8]	@ (8001064 <TIM2_IRQHandler+0x10>)
 800105a:	f001 fba1 	bl	80027a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800105e:	bf00      	nop
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	20000080 	.word	0x20000080

08001068 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800106c:	4802      	ldr	r0, [pc, #8]	@ (8001078 <TIM3_IRQHandler+0x10>)
 800106e:	f001 fb97 	bl	80027a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001072:	bf00      	nop
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	200000c8 	.word	0x200000c8

0800107c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RESET_BUTTON_Pin);
 8001080:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8001084:	f000 fbc6 	bl	8001814 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001088:	bf00      	nop
 800108a:	bd80      	pop	{r7, pc}

0800108c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001090:	4b06      	ldr	r3, [pc, #24]	@ (80010ac <SystemInit+0x20>)
 8001092:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001096:	4a05      	ldr	r2, [pc, #20]	@ (80010ac <SystemInit+0x20>)
 8001098:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800109c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010a0:	bf00      	nop
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	e000ed00 	.word	0xe000ed00

080010b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80010b0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80010e8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80010b4:	f7ff ffea 	bl	800108c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010b8:	480c      	ldr	r0, [pc, #48]	@ (80010ec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80010ba:	490d      	ldr	r1, [pc, #52]	@ (80010f0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80010bc:	4a0d      	ldr	r2, [pc, #52]	@ (80010f4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80010be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010c0:	e002      	b.n	80010c8 <LoopCopyDataInit>

080010c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010c6:	3304      	adds	r3, #4

080010c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010cc:	d3f9      	bcc.n	80010c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010ce:	4a0a      	ldr	r2, [pc, #40]	@ (80010f8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80010d0:	4c0a      	ldr	r4, [pc, #40]	@ (80010fc <LoopFillZerobss+0x22>)
  movs r3, #0
 80010d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010d4:	e001      	b.n	80010da <LoopFillZerobss>

080010d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010d8:	3204      	adds	r2, #4

080010da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010dc:	d3fb      	bcc.n	80010d6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80010de:	f002 f9b5 	bl	800344c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010e2:	f7ff fbeb 	bl	80008bc <main>
  bx  lr    
 80010e6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80010e8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80010ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010f0:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 80010f4:	080034cc 	.word	0x080034cc
  ldr r2, =_sbss
 80010f8:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 80010fc:	2000011c 	.word	0x2000011c

08001100 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001100:	e7fe      	b.n	8001100 <ADC_IRQHandler>
	...

08001104 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001108:	4b0e      	ldr	r3, [pc, #56]	@ (8001144 <HAL_Init+0x40>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a0d      	ldr	r2, [pc, #52]	@ (8001144 <HAL_Init+0x40>)
 800110e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001112:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001114:	4b0b      	ldr	r3, [pc, #44]	@ (8001144 <HAL_Init+0x40>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a0a      	ldr	r2, [pc, #40]	@ (8001144 <HAL_Init+0x40>)
 800111a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800111e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001120:	4b08      	ldr	r3, [pc, #32]	@ (8001144 <HAL_Init+0x40>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a07      	ldr	r2, [pc, #28]	@ (8001144 <HAL_Init+0x40>)
 8001126:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800112a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800112c:	2003      	movs	r0, #3
 800112e:	f000 f94f 	bl	80013d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001132:	200f      	movs	r0, #15
 8001134:	f000 f808 	bl	8001148 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001138:	f7ff feb8 	bl	8000eac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800113c:	2300      	movs	r3, #0
}
 800113e:	4618      	mov	r0, r3
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	40023c00 	.word	0x40023c00

08001148 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001150:	4b12      	ldr	r3, [pc, #72]	@ (800119c <HAL_InitTick+0x54>)
 8001152:	681a      	ldr	r2, [r3, #0]
 8001154:	4b12      	ldr	r3, [pc, #72]	@ (80011a0 <HAL_InitTick+0x58>)
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	4619      	mov	r1, r3
 800115a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800115e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001162:	fbb2 f3f3 	udiv	r3, r2, r3
 8001166:	4618      	mov	r0, r3
 8001168:	f000 f967 	bl	800143a <HAL_SYSTICK_Config>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001172:	2301      	movs	r3, #1
 8001174:	e00e      	b.n	8001194 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	2b0f      	cmp	r3, #15
 800117a:	d80a      	bhi.n	8001192 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800117c:	2200      	movs	r2, #0
 800117e:	6879      	ldr	r1, [r7, #4]
 8001180:	f04f 30ff 	mov.w	r0, #4294967295
 8001184:	f000 f92f 	bl	80013e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001188:	4a06      	ldr	r2, [pc, #24]	@ (80011a4 <HAL_InitTick+0x5c>)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800118e:	2300      	movs	r3, #0
 8001190:	e000      	b.n	8001194 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001192:	2301      	movs	r3, #1
}
 8001194:	4618      	mov	r0, r3
 8001196:	3708      	adds	r7, #8
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	20000058 	.word	0x20000058
 80011a0:	20000060 	.word	0x20000060
 80011a4:	2000005c 	.word	0x2000005c

080011a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011ac:	4b06      	ldr	r3, [pc, #24]	@ (80011c8 <HAL_IncTick+0x20>)
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	461a      	mov	r2, r3
 80011b2:	4b06      	ldr	r3, [pc, #24]	@ (80011cc <HAL_IncTick+0x24>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4413      	add	r3, r2
 80011b8:	4a04      	ldr	r2, [pc, #16]	@ (80011cc <HAL_IncTick+0x24>)
 80011ba:	6013      	str	r3, [r2, #0]
}
 80011bc:	bf00      	nop
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr
 80011c6:	bf00      	nop
 80011c8:	20000060 	.word	0x20000060
 80011cc:	20000118 	.word	0x20000118

080011d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  return uwTick;
 80011d4:	4b03      	ldr	r3, [pc, #12]	@ (80011e4 <HAL_GetTick+0x14>)
 80011d6:	681b      	ldr	r3, [r3, #0]
}
 80011d8:	4618      	mov	r0, r3
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop
 80011e4:	20000118 	.word	0x20000118

080011e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b084      	sub	sp, #16
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011f0:	f7ff ffee 	bl	80011d0 <HAL_GetTick>
 80011f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001200:	d005      	beq.n	800120e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001202:	4b0a      	ldr	r3, [pc, #40]	@ (800122c <HAL_Delay+0x44>)
 8001204:	781b      	ldrb	r3, [r3, #0]
 8001206:	461a      	mov	r2, r3
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	4413      	add	r3, r2
 800120c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800120e:	bf00      	nop
 8001210:	f7ff ffde 	bl	80011d0 <HAL_GetTick>
 8001214:	4602      	mov	r2, r0
 8001216:	68bb      	ldr	r3, [r7, #8]
 8001218:	1ad3      	subs	r3, r2, r3
 800121a:	68fa      	ldr	r2, [r7, #12]
 800121c:	429a      	cmp	r2, r3
 800121e:	d8f7      	bhi.n	8001210 <HAL_Delay+0x28>
  {
  }
}
 8001220:	bf00      	nop
 8001222:	bf00      	nop
 8001224:	3710      	adds	r7, #16
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	20000060 	.word	0x20000060

08001230 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001230:	b480      	push	{r7}
 8001232:	b085      	sub	sp, #20
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	f003 0307 	and.w	r3, r3, #7
 800123e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001240:	4b0c      	ldr	r3, [pc, #48]	@ (8001274 <__NVIC_SetPriorityGrouping+0x44>)
 8001242:	68db      	ldr	r3, [r3, #12]
 8001244:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001246:	68ba      	ldr	r2, [r7, #8]
 8001248:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800124c:	4013      	ands	r3, r2
 800124e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001254:	68bb      	ldr	r3, [r7, #8]
 8001256:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001258:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800125c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001260:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001262:	4a04      	ldr	r2, [pc, #16]	@ (8001274 <__NVIC_SetPriorityGrouping+0x44>)
 8001264:	68bb      	ldr	r3, [r7, #8]
 8001266:	60d3      	str	r3, [r2, #12]
}
 8001268:	bf00      	nop
 800126a:	3714      	adds	r7, #20
 800126c:	46bd      	mov	sp, r7
 800126e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001272:	4770      	bx	lr
 8001274:	e000ed00 	.word	0xe000ed00

08001278 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800127c:	4b04      	ldr	r3, [pc, #16]	@ (8001290 <__NVIC_GetPriorityGrouping+0x18>)
 800127e:	68db      	ldr	r3, [r3, #12]
 8001280:	0a1b      	lsrs	r3, r3, #8
 8001282:	f003 0307 	and.w	r3, r3, #7
}
 8001286:	4618      	mov	r0, r3
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr
 8001290:	e000ed00 	.word	0xe000ed00

08001294 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001294:	b480      	push	{r7}
 8001296:	b083      	sub	sp, #12
 8001298:	af00      	add	r7, sp, #0
 800129a:	4603      	mov	r3, r0
 800129c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800129e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	db0b      	blt.n	80012be <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012a6:	79fb      	ldrb	r3, [r7, #7]
 80012a8:	f003 021f 	and.w	r2, r3, #31
 80012ac:	4907      	ldr	r1, [pc, #28]	@ (80012cc <__NVIC_EnableIRQ+0x38>)
 80012ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b2:	095b      	lsrs	r3, r3, #5
 80012b4:	2001      	movs	r0, #1
 80012b6:	fa00 f202 	lsl.w	r2, r0, r2
 80012ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80012be:	bf00      	nop
 80012c0:	370c      	adds	r7, #12
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr
 80012ca:	bf00      	nop
 80012cc:	e000e100 	.word	0xe000e100

080012d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b083      	sub	sp, #12
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	4603      	mov	r3, r0
 80012d8:	6039      	str	r1, [r7, #0]
 80012da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	db0a      	blt.n	80012fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	b2da      	uxtb	r2, r3
 80012e8:	490c      	ldr	r1, [pc, #48]	@ (800131c <__NVIC_SetPriority+0x4c>)
 80012ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ee:	0112      	lsls	r2, r2, #4
 80012f0:	b2d2      	uxtb	r2, r2
 80012f2:	440b      	add	r3, r1
 80012f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012f8:	e00a      	b.n	8001310 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	b2da      	uxtb	r2, r3
 80012fe:	4908      	ldr	r1, [pc, #32]	@ (8001320 <__NVIC_SetPriority+0x50>)
 8001300:	79fb      	ldrb	r3, [r7, #7]
 8001302:	f003 030f 	and.w	r3, r3, #15
 8001306:	3b04      	subs	r3, #4
 8001308:	0112      	lsls	r2, r2, #4
 800130a:	b2d2      	uxtb	r2, r2
 800130c:	440b      	add	r3, r1
 800130e:	761a      	strb	r2, [r3, #24]
}
 8001310:	bf00      	nop
 8001312:	370c      	adds	r7, #12
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr
 800131c:	e000e100 	.word	0xe000e100
 8001320:	e000ed00 	.word	0xe000ed00

08001324 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001324:	b480      	push	{r7}
 8001326:	b089      	sub	sp, #36	@ 0x24
 8001328:	af00      	add	r7, sp, #0
 800132a:	60f8      	str	r0, [r7, #12]
 800132c:	60b9      	str	r1, [r7, #8]
 800132e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	f003 0307 	and.w	r3, r3, #7
 8001336:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001338:	69fb      	ldr	r3, [r7, #28]
 800133a:	f1c3 0307 	rsb	r3, r3, #7
 800133e:	2b04      	cmp	r3, #4
 8001340:	bf28      	it	cs
 8001342:	2304      	movcs	r3, #4
 8001344:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001346:	69fb      	ldr	r3, [r7, #28]
 8001348:	3304      	adds	r3, #4
 800134a:	2b06      	cmp	r3, #6
 800134c:	d902      	bls.n	8001354 <NVIC_EncodePriority+0x30>
 800134e:	69fb      	ldr	r3, [r7, #28]
 8001350:	3b03      	subs	r3, #3
 8001352:	e000      	b.n	8001356 <NVIC_EncodePriority+0x32>
 8001354:	2300      	movs	r3, #0
 8001356:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001358:	f04f 32ff 	mov.w	r2, #4294967295
 800135c:	69bb      	ldr	r3, [r7, #24]
 800135e:	fa02 f303 	lsl.w	r3, r2, r3
 8001362:	43da      	mvns	r2, r3
 8001364:	68bb      	ldr	r3, [r7, #8]
 8001366:	401a      	ands	r2, r3
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800136c:	f04f 31ff 	mov.w	r1, #4294967295
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	fa01 f303 	lsl.w	r3, r1, r3
 8001376:	43d9      	mvns	r1, r3
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800137c:	4313      	orrs	r3, r2
         );
}
 800137e:	4618      	mov	r0, r3
 8001380:	3724      	adds	r7, #36	@ 0x24
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr
	...

0800138c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b082      	sub	sp, #8
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	3b01      	subs	r3, #1
 8001398:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800139c:	d301      	bcc.n	80013a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800139e:	2301      	movs	r3, #1
 80013a0:	e00f      	b.n	80013c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013a2:	4a0a      	ldr	r2, [pc, #40]	@ (80013cc <SysTick_Config+0x40>)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	3b01      	subs	r3, #1
 80013a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013aa:	210f      	movs	r1, #15
 80013ac:	f04f 30ff 	mov.w	r0, #4294967295
 80013b0:	f7ff ff8e 	bl	80012d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013b4:	4b05      	ldr	r3, [pc, #20]	@ (80013cc <SysTick_Config+0x40>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013ba:	4b04      	ldr	r3, [pc, #16]	@ (80013cc <SysTick_Config+0x40>)
 80013bc:	2207      	movs	r2, #7
 80013be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013c0:	2300      	movs	r3, #0
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	3708      	adds	r7, #8
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	e000e010 	.word	0xe000e010

080013d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013d8:	6878      	ldr	r0, [r7, #4]
 80013da:	f7ff ff29 	bl	8001230 <__NVIC_SetPriorityGrouping>
}
 80013de:	bf00      	nop
 80013e0:	3708      	adds	r7, #8
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}

080013e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013e6:	b580      	push	{r7, lr}
 80013e8:	b086      	sub	sp, #24
 80013ea:	af00      	add	r7, sp, #0
 80013ec:	4603      	mov	r3, r0
 80013ee:	60b9      	str	r1, [r7, #8]
 80013f0:	607a      	str	r2, [r7, #4]
 80013f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013f4:	2300      	movs	r3, #0
 80013f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013f8:	f7ff ff3e 	bl	8001278 <__NVIC_GetPriorityGrouping>
 80013fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013fe:	687a      	ldr	r2, [r7, #4]
 8001400:	68b9      	ldr	r1, [r7, #8]
 8001402:	6978      	ldr	r0, [r7, #20]
 8001404:	f7ff ff8e 	bl	8001324 <NVIC_EncodePriority>
 8001408:	4602      	mov	r2, r0
 800140a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800140e:	4611      	mov	r1, r2
 8001410:	4618      	mov	r0, r3
 8001412:	f7ff ff5d 	bl	80012d0 <__NVIC_SetPriority>
}
 8001416:	bf00      	nop
 8001418:	3718      	adds	r7, #24
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}

0800141e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800141e:	b580      	push	{r7, lr}
 8001420:	b082      	sub	sp, #8
 8001422:	af00      	add	r7, sp, #0
 8001424:	4603      	mov	r3, r0
 8001426:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001428:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800142c:	4618      	mov	r0, r3
 800142e:	f7ff ff31 	bl	8001294 <__NVIC_EnableIRQ>
}
 8001432:	bf00      	nop
 8001434:	3708      	adds	r7, #8
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}

0800143a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800143a:	b580      	push	{r7, lr}
 800143c:	b082      	sub	sp, #8
 800143e:	af00      	add	r7, sp, #0
 8001440:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001442:	6878      	ldr	r0, [r7, #4]
 8001444:	f7ff ffa2 	bl	800138c <SysTick_Config>
 8001448:	4603      	mov	r3, r0
}
 800144a:	4618      	mov	r0, r3
 800144c:	3708      	adds	r7, #8
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
	...

08001454 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001454:	b480      	push	{r7}
 8001456:	b089      	sub	sp, #36	@ 0x24
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
 800145c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800145e:	2300      	movs	r3, #0
 8001460:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001462:	2300      	movs	r3, #0
 8001464:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001466:	2300      	movs	r3, #0
 8001468:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800146a:	2300      	movs	r3, #0
 800146c:	61fb      	str	r3, [r7, #28]
 800146e:	e165      	b.n	800173c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001470:	2201      	movs	r2, #1
 8001472:	69fb      	ldr	r3, [r7, #28]
 8001474:	fa02 f303 	lsl.w	r3, r2, r3
 8001478:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	697a      	ldr	r2, [r7, #20]
 8001480:	4013      	ands	r3, r2
 8001482:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001484:	693a      	ldr	r2, [r7, #16]
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	429a      	cmp	r2, r3
 800148a:	f040 8154 	bne.w	8001736 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	f003 0303 	and.w	r3, r3, #3
 8001496:	2b01      	cmp	r3, #1
 8001498:	d005      	beq.n	80014a6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014a2:	2b02      	cmp	r3, #2
 80014a4:	d130      	bne.n	8001508 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	689b      	ldr	r3, [r3, #8]
 80014aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80014ac:	69fb      	ldr	r3, [r7, #28]
 80014ae:	005b      	lsls	r3, r3, #1
 80014b0:	2203      	movs	r2, #3
 80014b2:	fa02 f303 	lsl.w	r3, r2, r3
 80014b6:	43db      	mvns	r3, r3
 80014b8:	69ba      	ldr	r2, [r7, #24]
 80014ba:	4013      	ands	r3, r2
 80014bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	68da      	ldr	r2, [r3, #12]
 80014c2:	69fb      	ldr	r3, [r7, #28]
 80014c4:	005b      	lsls	r3, r3, #1
 80014c6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ca:	69ba      	ldr	r2, [r7, #24]
 80014cc:	4313      	orrs	r3, r2
 80014ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	69ba      	ldr	r2, [r7, #24]
 80014d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014dc:	2201      	movs	r2, #1
 80014de:	69fb      	ldr	r3, [r7, #28]
 80014e0:	fa02 f303 	lsl.w	r3, r2, r3
 80014e4:	43db      	mvns	r3, r3
 80014e6:	69ba      	ldr	r2, [r7, #24]
 80014e8:	4013      	ands	r3, r2
 80014ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	091b      	lsrs	r3, r3, #4
 80014f2:	f003 0201 	and.w	r2, r3, #1
 80014f6:	69fb      	ldr	r3, [r7, #28]
 80014f8:	fa02 f303 	lsl.w	r3, r2, r3
 80014fc:	69ba      	ldr	r2, [r7, #24]
 80014fe:	4313      	orrs	r3, r2
 8001500:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	69ba      	ldr	r2, [r7, #24]
 8001506:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	f003 0303 	and.w	r3, r3, #3
 8001510:	2b03      	cmp	r3, #3
 8001512:	d017      	beq.n	8001544 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	68db      	ldr	r3, [r3, #12]
 8001518:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800151a:	69fb      	ldr	r3, [r7, #28]
 800151c:	005b      	lsls	r3, r3, #1
 800151e:	2203      	movs	r2, #3
 8001520:	fa02 f303 	lsl.w	r3, r2, r3
 8001524:	43db      	mvns	r3, r3
 8001526:	69ba      	ldr	r2, [r7, #24]
 8001528:	4013      	ands	r3, r2
 800152a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	689a      	ldr	r2, [r3, #8]
 8001530:	69fb      	ldr	r3, [r7, #28]
 8001532:	005b      	lsls	r3, r3, #1
 8001534:	fa02 f303 	lsl.w	r3, r2, r3
 8001538:	69ba      	ldr	r2, [r7, #24]
 800153a:	4313      	orrs	r3, r2
 800153c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	69ba      	ldr	r2, [r7, #24]
 8001542:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	f003 0303 	and.w	r3, r3, #3
 800154c:	2b02      	cmp	r3, #2
 800154e:	d123      	bne.n	8001598 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001550:	69fb      	ldr	r3, [r7, #28]
 8001552:	08da      	lsrs	r2, r3, #3
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	3208      	adds	r2, #8
 8001558:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800155c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800155e:	69fb      	ldr	r3, [r7, #28]
 8001560:	f003 0307 	and.w	r3, r3, #7
 8001564:	009b      	lsls	r3, r3, #2
 8001566:	220f      	movs	r2, #15
 8001568:	fa02 f303 	lsl.w	r3, r2, r3
 800156c:	43db      	mvns	r3, r3
 800156e:	69ba      	ldr	r2, [r7, #24]
 8001570:	4013      	ands	r3, r2
 8001572:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	691a      	ldr	r2, [r3, #16]
 8001578:	69fb      	ldr	r3, [r7, #28]
 800157a:	f003 0307 	and.w	r3, r3, #7
 800157e:	009b      	lsls	r3, r3, #2
 8001580:	fa02 f303 	lsl.w	r3, r2, r3
 8001584:	69ba      	ldr	r2, [r7, #24]
 8001586:	4313      	orrs	r3, r2
 8001588:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800158a:	69fb      	ldr	r3, [r7, #28]
 800158c:	08da      	lsrs	r2, r3, #3
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	3208      	adds	r2, #8
 8001592:	69b9      	ldr	r1, [r7, #24]
 8001594:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800159e:	69fb      	ldr	r3, [r7, #28]
 80015a0:	005b      	lsls	r3, r3, #1
 80015a2:	2203      	movs	r2, #3
 80015a4:	fa02 f303 	lsl.w	r3, r2, r3
 80015a8:	43db      	mvns	r3, r3
 80015aa:	69ba      	ldr	r2, [r7, #24]
 80015ac:	4013      	ands	r3, r2
 80015ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	f003 0203 	and.w	r2, r3, #3
 80015b8:	69fb      	ldr	r3, [r7, #28]
 80015ba:	005b      	lsls	r3, r3, #1
 80015bc:	fa02 f303 	lsl.w	r3, r2, r3
 80015c0:	69ba      	ldr	r2, [r7, #24]
 80015c2:	4313      	orrs	r3, r2
 80015c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	69ba      	ldr	r2, [r7, #24]
 80015ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	f000 80ae 	beq.w	8001736 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015da:	2300      	movs	r3, #0
 80015dc:	60fb      	str	r3, [r7, #12]
 80015de:	4b5d      	ldr	r3, [pc, #372]	@ (8001754 <HAL_GPIO_Init+0x300>)
 80015e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015e2:	4a5c      	ldr	r2, [pc, #368]	@ (8001754 <HAL_GPIO_Init+0x300>)
 80015e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80015ea:	4b5a      	ldr	r3, [pc, #360]	@ (8001754 <HAL_GPIO_Init+0x300>)
 80015ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80015f2:	60fb      	str	r3, [r7, #12]
 80015f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015f6:	4a58      	ldr	r2, [pc, #352]	@ (8001758 <HAL_GPIO_Init+0x304>)
 80015f8:	69fb      	ldr	r3, [r7, #28]
 80015fa:	089b      	lsrs	r3, r3, #2
 80015fc:	3302      	adds	r3, #2
 80015fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001602:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001604:	69fb      	ldr	r3, [r7, #28]
 8001606:	f003 0303 	and.w	r3, r3, #3
 800160a:	009b      	lsls	r3, r3, #2
 800160c:	220f      	movs	r2, #15
 800160e:	fa02 f303 	lsl.w	r3, r2, r3
 8001612:	43db      	mvns	r3, r3
 8001614:	69ba      	ldr	r2, [r7, #24]
 8001616:	4013      	ands	r3, r2
 8001618:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	4a4f      	ldr	r2, [pc, #316]	@ (800175c <HAL_GPIO_Init+0x308>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d025      	beq.n	800166e <HAL_GPIO_Init+0x21a>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	4a4e      	ldr	r2, [pc, #312]	@ (8001760 <HAL_GPIO_Init+0x30c>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d01f      	beq.n	800166a <HAL_GPIO_Init+0x216>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	4a4d      	ldr	r2, [pc, #308]	@ (8001764 <HAL_GPIO_Init+0x310>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d019      	beq.n	8001666 <HAL_GPIO_Init+0x212>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	4a4c      	ldr	r2, [pc, #304]	@ (8001768 <HAL_GPIO_Init+0x314>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d013      	beq.n	8001662 <HAL_GPIO_Init+0x20e>
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	4a4b      	ldr	r2, [pc, #300]	@ (800176c <HAL_GPIO_Init+0x318>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d00d      	beq.n	800165e <HAL_GPIO_Init+0x20a>
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	4a4a      	ldr	r2, [pc, #296]	@ (8001770 <HAL_GPIO_Init+0x31c>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d007      	beq.n	800165a <HAL_GPIO_Init+0x206>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	4a49      	ldr	r2, [pc, #292]	@ (8001774 <HAL_GPIO_Init+0x320>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d101      	bne.n	8001656 <HAL_GPIO_Init+0x202>
 8001652:	2306      	movs	r3, #6
 8001654:	e00c      	b.n	8001670 <HAL_GPIO_Init+0x21c>
 8001656:	2307      	movs	r3, #7
 8001658:	e00a      	b.n	8001670 <HAL_GPIO_Init+0x21c>
 800165a:	2305      	movs	r3, #5
 800165c:	e008      	b.n	8001670 <HAL_GPIO_Init+0x21c>
 800165e:	2304      	movs	r3, #4
 8001660:	e006      	b.n	8001670 <HAL_GPIO_Init+0x21c>
 8001662:	2303      	movs	r3, #3
 8001664:	e004      	b.n	8001670 <HAL_GPIO_Init+0x21c>
 8001666:	2302      	movs	r3, #2
 8001668:	e002      	b.n	8001670 <HAL_GPIO_Init+0x21c>
 800166a:	2301      	movs	r3, #1
 800166c:	e000      	b.n	8001670 <HAL_GPIO_Init+0x21c>
 800166e:	2300      	movs	r3, #0
 8001670:	69fa      	ldr	r2, [r7, #28]
 8001672:	f002 0203 	and.w	r2, r2, #3
 8001676:	0092      	lsls	r2, r2, #2
 8001678:	4093      	lsls	r3, r2
 800167a:	69ba      	ldr	r2, [r7, #24]
 800167c:	4313      	orrs	r3, r2
 800167e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001680:	4935      	ldr	r1, [pc, #212]	@ (8001758 <HAL_GPIO_Init+0x304>)
 8001682:	69fb      	ldr	r3, [r7, #28]
 8001684:	089b      	lsrs	r3, r3, #2
 8001686:	3302      	adds	r3, #2
 8001688:	69ba      	ldr	r2, [r7, #24]
 800168a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800168e:	4b3a      	ldr	r3, [pc, #232]	@ (8001778 <HAL_GPIO_Init+0x324>)
 8001690:	689b      	ldr	r3, [r3, #8]
 8001692:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001694:	693b      	ldr	r3, [r7, #16]
 8001696:	43db      	mvns	r3, r3
 8001698:	69ba      	ldr	r2, [r7, #24]
 800169a:	4013      	ands	r3, r2
 800169c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d003      	beq.n	80016b2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80016aa:	69ba      	ldr	r2, [r7, #24]
 80016ac:	693b      	ldr	r3, [r7, #16]
 80016ae:	4313      	orrs	r3, r2
 80016b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80016b2:	4a31      	ldr	r2, [pc, #196]	@ (8001778 <HAL_GPIO_Init+0x324>)
 80016b4:	69bb      	ldr	r3, [r7, #24]
 80016b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80016b8:	4b2f      	ldr	r3, [pc, #188]	@ (8001778 <HAL_GPIO_Init+0x324>)
 80016ba:	68db      	ldr	r3, [r3, #12]
 80016bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	43db      	mvns	r3, r3
 80016c2:	69ba      	ldr	r2, [r7, #24]
 80016c4:	4013      	ands	r3, r2
 80016c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d003      	beq.n	80016dc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80016d4:	69ba      	ldr	r2, [r7, #24]
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	4313      	orrs	r3, r2
 80016da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80016dc:	4a26      	ldr	r2, [pc, #152]	@ (8001778 <HAL_GPIO_Init+0x324>)
 80016de:	69bb      	ldr	r3, [r7, #24]
 80016e0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80016e2:	4b25      	ldr	r3, [pc, #148]	@ (8001778 <HAL_GPIO_Init+0x324>)
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016e8:	693b      	ldr	r3, [r7, #16]
 80016ea:	43db      	mvns	r3, r3
 80016ec:	69ba      	ldr	r2, [r7, #24]
 80016ee:	4013      	ands	r3, r2
 80016f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d003      	beq.n	8001706 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80016fe:	69ba      	ldr	r2, [r7, #24]
 8001700:	693b      	ldr	r3, [r7, #16]
 8001702:	4313      	orrs	r3, r2
 8001704:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001706:	4a1c      	ldr	r2, [pc, #112]	@ (8001778 <HAL_GPIO_Init+0x324>)
 8001708:	69bb      	ldr	r3, [r7, #24]
 800170a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800170c:	4b1a      	ldr	r3, [pc, #104]	@ (8001778 <HAL_GPIO_Init+0x324>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	43db      	mvns	r3, r3
 8001716:	69ba      	ldr	r2, [r7, #24]
 8001718:	4013      	ands	r3, r2
 800171a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001724:	2b00      	cmp	r3, #0
 8001726:	d003      	beq.n	8001730 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001728:	69ba      	ldr	r2, [r7, #24]
 800172a:	693b      	ldr	r3, [r7, #16]
 800172c:	4313      	orrs	r3, r2
 800172e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001730:	4a11      	ldr	r2, [pc, #68]	@ (8001778 <HAL_GPIO_Init+0x324>)
 8001732:	69bb      	ldr	r3, [r7, #24]
 8001734:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	3301      	adds	r3, #1
 800173a:	61fb      	str	r3, [r7, #28]
 800173c:	69fb      	ldr	r3, [r7, #28]
 800173e:	2b0f      	cmp	r3, #15
 8001740:	f67f ae96 	bls.w	8001470 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001744:	bf00      	nop
 8001746:	bf00      	nop
 8001748:	3724      	adds	r7, #36	@ 0x24
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr
 8001752:	bf00      	nop
 8001754:	40023800 	.word	0x40023800
 8001758:	40013800 	.word	0x40013800
 800175c:	40020000 	.word	0x40020000
 8001760:	40020400 	.word	0x40020400
 8001764:	40020800 	.word	0x40020800
 8001768:	40020c00 	.word	0x40020c00
 800176c:	40021000 	.word	0x40021000
 8001770:	40021400 	.word	0x40021400
 8001774:	40021800 	.word	0x40021800
 8001778:	40013c00 	.word	0x40013c00

0800177c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800177c:	b480      	push	{r7}
 800177e:	b085      	sub	sp, #20
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
 8001784:	460b      	mov	r3, r1
 8001786:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	691a      	ldr	r2, [r3, #16]
 800178c:	887b      	ldrh	r3, [r7, #2]
 800178e:	4013      	ands	r3, r2
 8001790:	2b00      	cmp	r3, #0
 8001792:	d002      	beq.n	800179a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001794:	2301      	movs	r3, #1
 8001796:	73fb      	strb	r3, [r7, #15]
 8001798:	e001      	b.n	800179e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800179a:	2300      	movs	r3, #0
 800179c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800179e:	7bfb      	ldrb	r3, [r7, #15]
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	3714      	adds	r7, #20
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr

080017ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b083      	sub	sp, #12
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
 80017b4:	460b      	mov	r3, r1
 80017b6:	807b      	strh	r3, [r7, #2]
 80017b8:	4613      	mov	r3, r2
 80017ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80017bc:	787b      	ldrb	r3, [r7, #1]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d003      	beq.n	80017ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017c2:	887a      	ldrh	r2, [r7, #2]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80017c8:	e003      	b.n	80017d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80017ca:	887b      	ldrh	r3, [r7, #2]
 80017cc:	041a      	lsls	r2, r3, #16
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	619a      	str	r2, [r3, #24]
}
 80017d2:	bf00      	nop
 80017d4:	370c      	adds	r7, #12
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr

080017de <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80017de:	b480      	push	{r7}
 80017e0:	b085      	sub	sp, #20
 80017e2:	af00      	add	r7, sp, #0
 80017e4:	6078      	str	r0, [r7, #4]
 80017e6:	460b      	mov	r3, r1
 80017e8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	695b      	ldr	r3, [r3, #20]
 80017ee:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80017f0:	887a      	ldrh	r2, [r7, #2]
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	4013      	ands	r3, r2
 80017f6:	041a      	lsls	r2, r3, #16
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	43d9      	mvns	r1, r3
 80017fc:	887b      	ldrh	r3, [r7, #2]
 80017fe:	400b      	ands	r3, r1
 8001800:	431a      	orrs	r2, r3
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	619a      	str	r2, [r3, #24]
}
 8001806:	bf00      	nop
 8001808:	3714      	adds	r7, #20
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr
	...

08001814 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af00      	add	r7, sp, #0
 800181a:	4603      	mov	r3, r0
 800181c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800181e:	4b08      	ldr	r3, [pc, #32]	@ (8001840 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001820:	695a      	ldr	r2, [r3, #20]
 8001822:	88fb      	ldrh	r3, [r7, #6]
 8001824:	4013      	ands	r3, r2
 8001826:	2b00      	cmp	r3, #0
 8001828:	d006      	beq.n	8001838 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800182a:	4a05      	ldr	r2, [pc, #20]	@ (8001840 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800182c:	88fb      	ldrh	r3, [r7, #6]
 800182e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001830:	88fb      	ldrh	r3, [r7, #6]
 8001832:	4618      	mov	r0, r3
 8001834:	f7ff fb1c 	bl	8000e70 <HAL_GPIO_EXTI_Callback>
  }
}
 8001838:	bf00      	nop
 800183a:	3708      	adds	r7, #8
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}
 8001840:	40013c00 	.word	0x40013c00

08001844 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b084      	sub	sp, #16
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
 800184c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d101      	bne.n	8001858 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001854:	2301      	movs	r3, #1
 8001856:	e0cc      	b.n	80019f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001858:	4b68      	ldr	r3, [pc, #416]	@ (80019fc <HAL_RCC_ClockConfig+0x1b8>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f003 030f 	and.w	r3, r3, #15
 8001860:	683a      	ldr	r2, [r7, #0]
 8001862:	429a      	cmp	r2, r3
 8001864:	d90c      	bls.n	8001880 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001866:	4b65      	ldr	r3, [pc, #404]	@ (80019fc <HAL_RCC_ClockConfig+0x1b8>)
 8001868:	683a      	ldr	r2, [r7, #0]
 800186a:	b2d2      	uxtb	r2, r2
 800186c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800186e:	4b63      	ldr	r3, [pc, #396]	@ (80019fc <HAL_RCC_ClockConfig+0x1b8>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f003 030f 	and.w	r3, r3, #15
 8001876:	683a      	ldr	r2, [r7, #0]
 8001878:	429a      	cmp	r2, r3
 800187a:	d001      	beq.n	8001880 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800187c:	2301      	movs	r3, #1
 800187e:	e0b8      	b.n	80019f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f003 0302 	and.w	r3, r3, #2
 8001888:	2b00      	cmp	r3, #0
 800188a:	d020      	beq.n	80018ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f003 0304 	and.w	r3, r3, #4
 8001894:	2b00      	cmp	r3, #0
 8001896:	d005      	beq.n	80018a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001898:	4b59      	ldr	r3, [pc, #356]	@ (8001a00 <HAL_RCC_ClockConfig+0x1bc>)
 800189a:	689b      	ldr	r3, [r3, #8]
 800189c:	4a58      	ldr	r2, [pc, #352]	@ (8001a00 <HAL_RCC_ClockConfig+0x1bc>)
 800189e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80018a2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f003 0308 	and.w	r3, r3, #8
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d005      	beq.n	80018bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018b0:	4b53      	ldr	r3, [pc, #332]	@ (8001a00 <HAL_RCC_ClockConfig+0x1bc>)
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	4a52      	ldr	r2, [pc, #328]	@ (8001a00 <HAL_RCC_ClockConfig+0x1bc>)
 80018b6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80018ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018bc:	4b50      	ldr	r3, [pc, #320]	@ (8001a00 <HAL_RCC_ClockConfig+0x1bc>)
 80018be:	689b      	ldr	r3, [r3, #8]
 80018c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	494d      	ldr	r1, [pc, #308]	@ (8001a00 <HAL_RCC_ClockConfig+0x1bc>)
 80018ca:	4313      	orrs	r3, r2
 80018cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f003 0301 	and.w	r3, r3, #1
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d044      	beq.n	8001964 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	2b01      	cmp	r3, #1
 80018e0:	d107      	bne.n	80018f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018e2:	4b47      	ldr	r3, [pc, #284]	@ (8001a00 <HAL_RCC_ClockConfig+0x1bc>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d119      	bne.n	8001922 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
 80018f0:	e07f      	b.n	80019f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	2b02      	cmp	r3, #2
 80018f8:	d003      	beq.n	8001902 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018fe:	2b03      	cmp	r3, #3
 8001900:	d107      	bne.n	8001912 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001902:	4b3f      	ldr	r3, [pc, #252]	@ (8001a00 <HAL_RCC_ClockConfig+0x1bc>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800190a:	2b00      	cmp	r3, #0
 800190c:	d109      	bne.n	8001922 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800190e:	2301      	movs	r3, #1
 8001910:	e06f      	b.n	80019f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001912:	4b3b      	ldr	r3, [pc, #236]	@ (8001a00 <HAL_RCC_ClockConfig+0x1bc>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f003 0302 	and.w	r3, r3, #2
 800191a:	2b00      	cmp	r3, #0
 800191c:	d101      	bne.n	8001922 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800191e:	2301      	movs	r3, #1
 8001920:	e067      	b.n	80019f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001922:	4b37      	ldr	r3, [pc, #220]	@ (8001a00 <HAL_RCC_ClockConfig+0x1bc>)
 8001924:	689b      	ldr	r3, [r3, #8]
 8001926:	f023 0203 	bic.w	r2, r3, #3
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	4934      	ldr	r1, [pc, #208]	@ (8001a00 <HAL_RCC_ClockConfig+0x1bc>)
 8001930:	4313      	orrs	r3, r2
 8001932:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001934:	f7ff fc4c 	bl	80011d0 <HAL_GetTick>
 8001938:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800193a:	e00a      	b.n	8001952 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800193c:	f7ff fc48 	bl	80011d0 <HAL_GetTick>
 8001940:	4602      	mov	r2, r0
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	1ad3      	subs	r3, r2, r3
 8001946:	f241 3288 	movw	r2, #5000	@ 0x1388
 800194a:	4293      	cmp	r3, r2
 800194c:	d901      	bls.n	8001952 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800194e:	2303      	movs	r3, #3
 8001950:	e04f      	b.n	80019f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001952:	4b2b      	ldr	r3, [pc, #172]	@ (8001a00 <HAL_RCC_ClockConfig+0x1bc>)
 8001954:	689b      	ldr	r3, [r3, #8]
 8001956:	f003 020c 	and.w	r2, r3, #12
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	009b      	lsls	r3, r3, #2
 8001960:	429a      	cmp	r2, r3
 8001962:	d1eb      	bne.n	800193c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001964:	4b25      	ldr	r3, [pc, #148]	@ (80019fc <HAL_RCC_ClockConfig+0x1b8>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f003 030f 	and.w	r3, r3, #15
 800196c:	683a      	ldr	r2, [r7, #0]
 800196e:	429a      	cmp	r2, r3
 8001970:	d20c      	bcs.n	800198c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001972:	4b22      	ldr	r3, [pc, #136]	@ (80019fc <HAL_RCC_ClockConfig+0x1b8>)
 8001974:	683a      	ldr	r2, [r7, #0]
 8001976:	b2d2      	uxtb	r2, r2
 8001978:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800197a:	4b20      	ldr	r3, [pc, #128]	@ (80019fc <HAL_RCC_ClockConfig+0x1b8>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f003 030f 	and.w	r3, r3, #15
 8001982:	683a      	ldr	r2, [r7, #0]
 8001984:	429a      	cmp	r2, r3
 8001986:	d001      	beq.n	800198c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001988:	2301      	movs	r3, #1
 800198a:	e032      	b.n	80019f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f003 0304 	and.w	r3, r3, #4
 8001994:	2b00      	cmp	r3, #0
 8001996:	d008      	beq.n	80019aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001998:	4b19      	ldr	r3, [pc, #100]	@ (8001a00 <HAL_RCC_ClockConfig+0x1bc>)
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	68db      	ldr	r3, [r3, #12]
 80019a4:	4916      	ldr	r1, [pc, #88]	@ (8001a00 <HAL_RCC_ClockConfig+0x1bc>)
 80019a6:	4313      	orrs	r3, r2
 80019a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f003 0308 	and.w	r3, r3, #8
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d009      	beq.n	80019ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80019b6:	4b12      	ldr	r3, [pc, #72]	@ (8001a00 <HAL_RCC_ClockConfig+0x1bc>)
 80019b8:	689b      	ldr	r3, [r3, #8]
 80019ba:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	691b      	ldr	r3, [r3, #16]
 80019c2:	00db      	lsls	r3, r3, #3
 80019c4:	490e      	ldr	r1, [pc, #56]	@ (8001a00 <HAL_RCC_ClockConfig+0x1bc>)
 80019c6:	4313      	orrs	r3, r2
 80019c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80019ca:	f000 f821 	bl	8001a10 <HAL_RCC_GetSysClockFreq>
 80019ce:	4602      	mov	r2, r0
 80019d0:	4b0b      	ldr	r3, [pc, #44]	@ (8001a00 <HAL_RCC_ClockConfig+0x1bc>)
 80019d2:	689b      	ldr	r3, [r3, #8]
 80019d4:	091b      	lsrs	r3, r3, #4
 80019d6:	f003 030f 	and.w	r3, r3, #15
 80019da:	490a      	ldr	r1, [pc, #40]	@ (8001a04 <HAL_RCC_ClockConfig+0x1c0>)
 80019dc:	5ccb      	ldrb	r3, [r1, r3]
 80019de:	fa22 f303 	lsr.w	r3, r2, r3
 80019e2:	4a09      	ldr	r2, [pc, #36]	@ (8001a08 <HAL_RCC_ClockConfig+0x1c4>)
 80019e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80019e6:	4b09      	ldr	r3, [pc, #36]	@ (8001a0c <HAL_RCC_ClockConfig+0x1c8>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4618      	mov	r0, r3
 80019ec:	f7ff fbac 	bl	8001148 <HAL_InitTick>

  return HAL_OK;
 80019f0:	2300      	movs	r3, #0
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	3710      	adds	r7, #16
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	40023c00 	.word	0x40023c00
 8001a00:	40023800 	.word	0x40023800
 8001a04:	080034ac 	.word	0x080034ac
 8001a08:	20000058 	.word	0x20000058
 8001a0c:	2000005c 	.word	0x2000005c

08001a10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a14:	b0a6      	sub	sp, #152	@ 0x98
 8001a16:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8001a24:	2300      	movs	r3, #0
 8001a26:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8001a30:	2300      	movs	r3, #0
 8001a32:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a36:	4bc8      	ldr	r3, [pc, #800]	@ (8001d58 <HAL_RCC_GetSysClockFreq+0x348>)
 8001a38:	689b      	ldr	r3, [r3, #8]
 8001a3a:	f003 030c 	and.w	r3, r3, #12
 8001a3e:	2b0c      	cmp	r3, #12
 8001a40:	f200 817e 	bhi.w	8001d40 <HAL_RCC_GetSysClockFreq+0x330>
 8001a44:	a201      	add	r2, pc, #4	@ (adr r2, 8001a4c <HAL_RCC_GetSysClockFreq+0x3c>)
 8001a46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a4a:	bf00      	nop
 8001a4c:	08001a81 	.word	0x08001a81
 8001a50:	08001d41 	.word	0x08001d41
 8001a54:	08001d41 	.word	0x08001d41
 8001a58:	08001d41 	.word	0x08001d41
 8001a5c:	08001a89 	.word	0x08001a89
 8001a60:	08001d41 	.word	0x08001d41
 8001a64:	08001d41 	.word	0x08001d41
 8001a68:	08001d41 	.word	0x08001d41
 8001a6c:	08001a91 	.word	0x08001a91
 8001a70:	08001d41 	.word	0x08001d41
 8001a74:	08001d41 	.word	0x08001d41
 8001a78:	08001d41 	.word	0x08001d41
 8001a7c:	08001bfb 	.word	0x08001bfb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a80:	4bb6      	ldr	r3, [pc, #728]	@ (8001d5c <HAL_RCC_GetSysClockFreq+0x34c>)
 8001a82:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001a86:	e15f      	b.n	8001d48 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a88:	4bb5      	ldr	r3, [pc, #724]	@ (8001d60 <HAL_RCC_GetSysClockFreq+0x350>)
 8001a8a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001a8e:	e15b      	b.n	8001d48 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a90:	4bb1      	ldr	r3, [pc, #708]	@ (8001d58 <HAL_RCC_GetSysClockFreq+0x348>)
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001a98:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a9c:	4bae      	ldr	r3, [pc, #696]	@ (8001d58 <HAL_RCC_GetSysClockFreq+0x348>)
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d031      	beq.n	8001b0c <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001aa8:	4bab      	ldr	r3, [pc, #684]	@ (8001d58 <HAL_RCC_GetSysClockFreq+0x348>)
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	099b      	lsrs	r3, r3, #6
 8001aae:	2200      	movs	r2, #0
 8001ab0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001ab2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001ab4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001ab6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001aba:	663b      	str	r3, [r7, #96]	@ 0x60
 8001abc:	2300      	movs	r3, #0
 8001abe:	667b      	str	r3, [r7, #100]	@ 0x64
 8001ac0:	4ba7      	ldr	r3, [pc, #668]	@ (8001d60 <HAL_RCC_GetSysClockFreq+0x350>)
 8001ac2:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001ac6:	462a      	mov	r2, r5
 8001ac8:	fb03 f202 	mul.w	r2, r3, r2
 8001acc:	2300      	movs	r3, #0
 8001ace:	4621      	mov	r1, r4
 8001ad0:	fb01 f303 	mul.w	r3, r1, r3
 8001ad4:	4413      	add	r3, r2
 8001ad6:	4aa2      	ldr	r2, [pc, #648]	@ (8001d60 <HAL_RCC_GetSysClockFreq+0x350>)
 8001ad8:	4621      	mov	r1, r4
 8001ada:	fba1 1202 	umull	r1, r2, r1, r2
 8001ade:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8001ae0:	460a      	mov	r2, r1
 8001ae2:	67ba      	str	r2, [r7, #120]	@ 0x78
 8001ae4:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8001ae6:	4413      	add	r3, r2
 8001ae8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001aea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001aee:	2200      	movs	r2, #0
 8001af0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001af2:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001af4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001af8:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8001afc:	f7fe fb82 	bl	8000204 <__aeabi_uldivmod>
 8001b00:	4602      	mov	r2, r0
 8001b02:	460b      	mov	r3, r1
 8001b04:	4613      	mov	r3, r2
 8001b06:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001b0a:	e064      	b.n	8001bd6 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b0c:	4b92      	ldr	r3, [pc, #584]	@ (8001d58 <HAL_RCC_GetSysClockFreq+0x348>)
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	099b      	lsrs	r3, r3, #6
 8001b12:	2200      	movs	r2, #0
 8001b14:	653b      	str	r3, [r7, #80]	@ 0x50
 8001b16:	657a      	str	r2, [r7, #84]	@ 0x54
 8001b18:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001b1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b1e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001b20:	2300      	movs	r3, #0
 8001b22:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001b24:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8001b28:	4622      	mov	r2, r4
 8001b2a:	462b      	mov	r3, r5
 8001b2c:	f04f 0000 	mov.w	r0, #0
 8001b30:	f04f 0100 	mov.w	r1, #0
 8001b34:	0159      	lsls	r1, r3, #5
 8001b36:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b3a:	0150      	lsls	r0, r2, #5
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	460b      	mov	r3, r1
 8001b40:	4621      	mov	r1, r4
 8001b42:	1a51      	subs	r1, r2, r1
 8001b44:	6139      	str	r1, [r7, #16]
 8001b46:	4629      	mov	r1, r5
 8001b48:	eb63 0301 	sbc.w	r3, r3, r1
 8001b4c:	617b      	str	r3, [r7, #20]
 8001b4e:	f04f 0200 	mov.w	r2, #0
 8001b52:	f04f 0300 	mov.w	r3, #0
 8001b56:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001b5a:	4659      	mov	r1, fp
 8001b5c:	018b      	lsls	r3, r1, #6
 8001b5e:	4651      	mov	r1, sl
 8001b60:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b64:	4651      	mov	r1, sl
 8001b66:	018a      	lsls	r2, r1, #6
 8001b68:	4651      	mov	r1, sl
 8001b6a:	ebb2 0801 	subs.w	r8, r2, r1
 8001b6e:	4659      	mov	r1, fp
 8001b70:	eb63 0901 	sbc.w	r9, r3, r1
 8001b74:	f04f 0200 	mov.w	r2, #0
 8001b78:	f04f 0300 	mov.w	r3, #0
 8001b7c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001b80:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001b84:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001b88:	4690      	mov	r8, r2
 8001b8a:	4699      	mov	r9, r3
 8001b8c:	4623      	mov	r3, r4
 8001b8e:	eb18 0303 	adds.w	r3, r8, r3
 8001b92:	60bb      	str	r3, [r7, #8]
 8001b94:	462b      	mov	r3, r5
 8001b96:	eb49 0303 	adc.w	r3, r9, r3
 8001b9a:	60fb      	str	r3, [r7, #12]
 8001b9c:	f04f 0200 	mov.w	r2, #0
 8001ba0:	f04f 0300 	mov.w	r3, #0
 8001ba4:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001ba8:	4629      	mov	r1, r5
 8001baa:	028b      	lsls	r3, r1, #10
 8001bac:	4621      	mov	r1, r4
 8001bae:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001bb2:	4621      	mov	r1, r4
 8001bb4:	028a      	lsls	r2, r1, #10
 8001bb6:	4610      	mov	r0, r2
 8001bb8:	4619      	mov	r1, r3
 8001bba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	643b      	str	r3, [r7, #64]	@ 0x40
 8001bc2:	647a      	str	r2, [r7, #68]	@ 0x44
 8001bc4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001bc8:	f7fe fb1c 	bl	8000204 <__aeabi_uldivmod>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	460b      	mov	r3, r1
 8001bd0:	4613      	mov	r3, r2
 8001bd2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001bd6:	4b60      	ldr	r3, [pc, #384]	@ (8001d58 <HAL_RCC_GetSysClockFreq+0x348>)
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	0c1b      	lsrs	r3, r3, #16
 8001bdc:	f003 0303 	and.w	r3, r3, #3
 8001be0:	3301      	adds	r3, #1
 8001be2:	005b      	lsls	r3, r3, #1
 8001be4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 8001be8:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8001bec:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001bf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bf4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001bf8:	e0a6      	b.n	8001d48 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001bfa:	4b57      	ldr	r3, [pc, #348]	@ (8001d58 <HAL_RCC_GetSysClockFreq+0x348>)
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001c02:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c06:	4b54      	ldr	r3, [pc, #336]	@ (8001d58 <HAL_RCC_GetSysClockFreq+0x348>)
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d02a      	beq.n	8001c68 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c12:	4b51      	ldr	r3, [pc, #324]	@ (8001d58 <HAL_RCC_GetSysClockFreq+0x348>)
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	099b      	lsrs	r3, r3, #6
 8001c18:	2200      	movs	r2, #0
 8001c1a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001c1c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001c1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001c20:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001c24:	2100      	movs	r1, #0
 8001c26:	4b4e      	ldr	r3, [pc, #312]	@ (8001d60 <HAL_RCC_GetSysClockFreq+0x350>)
 8001c28:	fb03 f201 	mul.w	r2, r3, r1
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	fb00 f303 	mul.w	r3, r0, r3
 8001c32:	4413      	add	r3, r2
 8001c34:	4a4a      	ldr	r2, [pc, #296]	@ (8001d60 <HAL_RCC_GetSysClockFreq+0x350>)
 8001c36:	fba0 1202 	umull	r1, r2, r0, r2
 8001c3a:	677a      	str	r2, [r7, #116]	@ 0x74
 8001c3c:	460a      	mov	r2, r1
 8001c3e:	673a      	str	r2, [r7, #112]	@ 0x70
 8001c40:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8001c42:	4413      	add	r3, r2
 8001c44:	677b      	str	r3, [r7, #116]	@ 0x74
 8001c46:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	633b      	str	r3, [r7, #48]	@ 0x30
 8001c4e:	637a      	str	r2, [r7, #52]	@ 0x34
 8001c50:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001c54:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8001c58:	f7fe fad4 	bl	8000204 <__aeabi_uldivmod>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	460b      	mov	r3, r1
 8001c60:	4613      	mov	r3, r2
 8001c62:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001c66:	e05b      	b.n	8001d20 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c68:	4b3b      	ldr	r3, [pc, #236]	@ (8001d58 <HAL_RCC_GetSysClockFreq+0x348>)
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	099b      	lsrs	r3, r3, #6
 8001c6e:	2200      	movs	r2, #0
 8001c70:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001c72:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001c74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c7a:	623b      	str	r3, [r7, #32]
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c80:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001c84:	4642      	mov	r2, r8
 8001c86:	464b      	mov	r3, r9
 8001c88:	f04f 0000 	mov.w	r0, #0
 8001c8c:	f04f 0100 	mov.w	r1, #0
 8001c90:	0159      	lsls	r1, r3, #5
 8001c92:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c96:	0150      	lsls	r0, r2, #5
 8001c98:	4602      	mov	r2, r0
 8001c9a:	460b      	mov	r3, r1
 8001c9c:	4641      	mov	r1, r8
 8001c9e:	ebb2 0a01 	subs.w	sl, r2, r1
 8001ca2:	4649      	mov	r1, r9
 8001ca4:	eb63 0b01 	sbc.w	fp, r3, r1
 8001ca8:	f04f 0200 	mov.w	r2, #0
 8001cac:	f04f 0300 	mov.w	r3, #0
 8001cb0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001cb4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001cb8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001cbc:	ebb2 040a 	subs.w	r4, r2, sl
 8001cc0:	eb63 050b 	sbc.w	r5, r3, fp
 8001cc4:	f04f 0200 	mov.w	r2, #0
 8001cc8:	f04f 0300 	mov.w	r3, #0
 8001ccc:	00eb      	lsls	r3, r5, #3
 8001cce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001cd2:	00e2      	lsls	r2, r4, #3
 8001cd4:	4614      	mov	r4, r2
 8001cd6:	461d      	mov	r5, r3
 8001cd8:	4643      	mov	r3, r8
 8001cda:	18e3      	adds	r3, r4, r3
 8001cdc:	603b      	str	r3, [r7, #0]
 8001cde:	464b      	mov	r3, r9
 8001ce0:	eb45 0303 	adc.w	r3, r5, r3
 8001ce4:	607b      	str	r3, [r7, #4]
 8001ce6:	f04f 0200 	mov.w	r2, #0
 8001cea:	f04f 0300 	mov.w	r3, #0
 8001cee:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001cf2:	4629      	mov	r1, r5
 8001cf4:	028b      	lsls	r3, r1, #10
 8001cf6:	4621      	mov	r1, r4
 8001cf8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001cfc:	4621      	mov	r1, r4
 8001cfe:	028a      	lsls	r2, r1, #10
 8001d00:	4610      	mov	r0, r2
 8001d02:	4619      	mov	r1, r3
 8001d04:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001d08:	2200      	movs	r2, #0
 8001d0a:	61bb      	str	r3, [r7, #24]
 8001d0c:	61fa      	str	r2, [r7, #28]
 8001d0e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d12:	f7fe fa77 	bl	8000204 <__aeabi_uldivmod>
 8001d16:	4602      	mov	r2, r0
 8001d18:	460b      	mov	r3, r1
 8001d1a:	4613      	mov	r3, r2
 8001d1c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001d20:	4b0d      	ldr	r3, [pc, #52]	@ (8001d58 <HAL_RCC_GetSysClockFreq+0x348>)
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	0f1b      	lsrs	r3, r3, #28
 8001d26:	f003 0307 	and.w	r3, r3, #7
 8001d2a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 8001d2e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8001d32:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001d36:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d3a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001d3e:	e003      	b.n	8001d48 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001d40:	4b06      	ldr	r3, [pc, #24]	@ (8001d5c <HAL_RCC_GetSysClockFreq+0x34c>)
 8001d42:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001d46:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d48:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	3798      	adds	r7, #152	@ 0x98
 8001d50:	46bd      	mov	sp, r7
 8001d52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001d56:	bf00      	nop
 8001d58:	40023800 	.word	0x40023800
 8001d5c:	00f42400 	.word	0x00f42400
 8001d60:	017d7840 	.word	0x017d7840

08001d64 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b086      	sub	sp, #24
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d101      	bne.n	8001d76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	e28d      	b.n	8002292 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f003 0301 	and.w	r3, r3, #1
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	f000 8083 	beq.w	8001e8a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001d84:	4b94      	ldr	r3, [pc, #592]	@ (8001fd8 <HAL_RCC_OscConfig+0x274>)
 8001d86:	689b      	ldr	r3, [r3, #8]
 8001d88:	f003 030c 	and.w	r3, r3, #12
 8001d8c:	2b04      	cmp	r3, #4
 8001d8e:	d019      	beq.n	8001dc4 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001d90:	4b91      	ldr	r3, [pc, #580]	@ (8001fd8 <HAL_RCC_OscConfig+0x274>)
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	f003 030c 	and.w	r3, r3, #12
        || \
 8001d98:	2b08      	cmp	r3, #8
 8001d9a:	d106      	bne.n	8001daa <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001d9c:	4b8e      	ldr	r3, [pc, #568]	@ (8001fd8 <HAL_RCC_OscConfig+0x274>)
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001da4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001da8:	d00c      	beq.n	8001dc4 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001daa:	4b8b      	ldr	r3, [pc, #556]	@ (8001fd8 <HAL_RCC_OscConfig+0x274>)
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001db2:	2b0c      	cmp	r3, #12
 8001db4:	d112      	bne.n	8001ddc <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001db6:	4b88      	ldr	r3, [pc, #544]	@ (8001fd8 <HAL_RCC_OscConfig+0x274>)
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001dbe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001dc2:	d10b      	bne.n	8001ddc <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dc4:	4b84      	ldr	r3, [pc, #528]	@ (8001fd8 <HAL_RCC_OscConfig+0x274>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d05b      	beq.n	8001e88 <HAL_RCC_OscConfig+0x124>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d157      	bne.n	8001e88 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	e25a      	b.n	8002292 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001de4:	d106      	bne.n	8001df4 <HAL_RCC_OscConfig+0x90>
 8001de6:	4b7c      	ldr	r3, [pc, #496]	@ (8001fd8 <HAL_RCC_OscConfig+0x274>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a7b      	ldr	r2, [pc, #492]	@ (8001fd8 <HAL_RCC_OscConfig+0x274>)
 8001dec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001df0:	6013      	str	r3, [r2, #0]
 8001df2:	e01d      	b.n	8001e30 <HAL_RCC_OscConfig+0xcc>
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001dfc:	d10c      	bne.n	8001e18 <HAL_RCC_OscConfig+0xb4>
 8001dfe:	4b76      	ldr	r3, [pc, #472]	@ (8001fd8 <HAL_RCC_OscConfig+0x274>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a75      	ldr	r2, [pc, #468]	@ (8001fd8 <HAL_RCC_OscConfig+0x274>)
 8001e04:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e08:	6013      	str	r3, [r2, #0]
 8001e0a:	4b73      	ldr	r3, [pc, #460]	@ (8001fd8 <HAL_RCC_OscConfig+0x274>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4a72      	ldr	r2, [pc, #456]	@ (8001fd8 <HAL_RCC_OscConfig+0x274>)
 8001e10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e14:	6013      	str	r3, [r2, #0]
 8001e16:	e00b      	b.n	8001e30 <HAL_RCC_OscConfig+0xcc>
 8001e18:	4b6f      	ldr	r3, [pc, #444]	@ (8001fd8 <HAL_RCC_OscConfig+0x274>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a6e      	ldr	r2, [pc, #440]	@ (8001fd8 <HAL_RCC_OscConfig+0x274>)
 8001e1e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e22:	6013      	str	r3, [r2, #0]
 8001e24:	4b6c      	ldr	r3, [pc, #432]	@ (8001fd8 <HAL_RCC_OscConfig+0x274>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a6b      	ldr	r2, [pc, #428]	@ (8001fd8 <HAL_RCC_OscConfig+0x274>)
 8001e2a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d013      	beq.n	8001e60 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e38:	f7ff f9ca 	bl	80011d0 <HAL_GetTick>
 8001e3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e3e:	e008      	b.n	8001e52 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e40:	f7ff f9c6 	bl	80011d0 <HAL_GetTick>
 8001e44:	4602      	mov	r2, r0
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	2b64      	cmp	r3, #100	@ 0x64
 8001e4c:	d901      	bls.n	8001e52 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001e4e:	2303      	movs	r3, #3
 8001e50:	e21f      	b.n	8002292 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e52:	4b61      	ldr	r3, [pc, #388]	@ (8001fd8 <HAL_RCC_OscConfig+0x274>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d0f0      	beq.n	8001e40 <HAL_RCC_OscConfig+0xdc>
 8001e5e:	e014      	b.n	8001e8a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e60:	f7ff f9b6 	bl	80011d0 <HAL_GetTick>
 8001e64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e66:	e008      	b.n	8001e7a <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e68:	f7ff f9b2 	bl	80011d0 <HAL_GetTick>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	1ad3      	subs	r3, r2, r3
 8001e72:	2b64      	cmp	r3, #100	@ 0x64
 8001e74:	d901      	bls.n	8001e7a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001e76:	2303      	movs	r3, #3
 8001e78:	e20b      	b.n	8002292 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e7a:	4b57      	ldr	r3, [pc, #348]	@ (8001fd8 <HAL_RCC_OscConfig+0x274>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d1f0      	bne.n	8001e68 <HAL_RCC_OscConfig+0x104>
 8001e86:	e000      	b.n	8001e8a <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f003 0302 	and.w	r3, r3, #2
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d06f      	beq.n	8001f76 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001e96:	4b50      	ldr	r3, [pc, #320]	@ (8001fd8 <HAL_RCC_OscConfig+0x274>)
 8001e98:	689b      	ldr	r3, [r3, #8]
 8001e9a:	f003 030c 	and.w	r3, r3, #12
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d017      	beq.n	8001ed2 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001ea2:	4b4d      	ldr	r3, [pc, #308]	@ (8001fd8 <HAL_RCC_OscConfig+0x274>)
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	f003 030c 	and.w	r3, r3, #12
        || \
 8001eaa:	2b08      	cmp	r3, #8
 8001eac:	d105      	bne.n	8001eba <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001eae:	4b4a      	ldr	r3, [pc, #296]	@ (8001fd8 <HAL_RCC_OscConfig+0x274>)
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d00b      	beq.n	8001ed2 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001eba:	4b47      	ldr	r3, [pc, #284]	@ (8001fd8 <HAL_RCC_OscConfig+0x274>)
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001ec2:	2b0c      	cmp	r3, #12
 8001ec4:	d11c      	bne.n	8001f00 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ec6:	4b44      	ldr	r3, [pc, #272]	@ (8001fd8 <HAL_RCC_OscConfig+0x274>)
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d116      	bne.n	8001f00 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ed2:	4b41      	ldr	r3, [pc, #260]	@ (8001fd8 <HAL_RCC_OscConfig+0x274>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f003 0302 	and.w	r3, r3, #2
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d005      	beq.n	8001eea <HAL_RCC_OscConfig+0x186>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	68db      	ldr	r3, [r3, #12]
 8001ee2:	2b01      	cmp	r3, #1
 8001ee4:	d001      	beq.n	8001eea <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e1d3      	b.n	8002292 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eea:	4b3b      	ldr	r3, [pc, #236]	@ (8001fd8 <HAL_RCC_OscConfig+0x274>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	691b      	ldr	r3, [r3, #16]
 8001ef6:	00db      	lsls	r3, r3, #3
 8001ef8:	4937      	ldr	r1, [pc, #220]	@ (8001fd8 <HAL_RCC_OscConfig+0x274>)
 8001efa:	4313      	orrs	r3, r2
 8001efc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001efe:	e03a      	b.n	8001f76 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	68db      	ldr	r3, [r3, #12]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d020      	beq.n	8001f4a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f08:	4b34      	ldr	r3, [pc, #208]	@ (8001fdc <HAL_RCC_OscConfig+0x278>)
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f0e:	f7ff f95f 	bl	80011d0 <HAL_GetTick>
 8001f12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f14:	e008      	b.n	8001f28 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f16:	f7ff f95b 	bl	80011d0 <HAL_GetTick>
 8001f1a:	4602      	mov	r2, r0
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	1ad3      	subs	r3, r2, r3
 8001f20:	2b02      	cmp	r3, #2
 8001f22:	d901      	bls.n	8001f28 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001f24:	2303      	movs	r3, #3
 8001f26:	e1b4      	b.n	8002292 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f28:	4b2b      	ldr	r3, [pc, #172]	@ (8001fd8 <HAL_RCC_OscConfig+0x274>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f003 0302 	and.w	r3, r3, #2
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d0f0      	beq.n	8001f16 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f34:	4b28      	ldr	r3, [pc, #160]	@ (8001fd8 <HAL_RCC_OscConfig+0x274>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	691b      	ldr	r3, [r3, #16]
 8001f40:	00db      	lsls	r3, r3, #3
 8001f42:	4925      	ldr	r1, [pc, #148]	@ (8001fd8 <HAL_RCC_OscConfig+0x274>)
 8001f44:	4313      	orrs	r3, r2
 8001f46:	600b      	str	r3, [r1, #0]
 8001f48:	e015      	b.n	8001f76 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f4a:	4b24      	ldr	r3, [pc, #144]	@ (8001fdc <HAL_RCC_OscConfig+0x278>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f50:	f7ff f93e 	bl	80011d0 <HAL_GetTick>
 8001f54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f56:	e008      	b.n	8001f6a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f58:	f7ff f93a 	bl	80011d0 <HAL_GetTick>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	1ad3      	subs	r3, r2, r3
 8001f62:	2b02      	cmp	r3, #2
 8001f64:	d901      	bls.n	8001f6a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001f66:	2303      	movs	r3, #3
 8001f68:	e193      	b.n	8002292 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f6a:	4b1b      	ldr	r3, [pc, #108]	@ (8001fd8 <HAL_RCC_OscConfig+0x274>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f003 0302 	and.w	r3, r3, #2
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d1f0      	bne.n	8001f58 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f003 0308 	and.w	r3, r3, #8
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d036      	beq.n	8001ff0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	695b      	ldr	r3, [r3, #20]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d016      	beq.n	8001fb8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f8a:	4b15      	ldr	r3, [pc, #84]	@ (8001fe0 <HAL_RCC_OscConfig+0x27c>)
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f90:	f7ff f91e 	bl	80011d0 <HAL_GetTick>
 8001f94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f96:	e008      	b.n	8001faa <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f98:	f7ff f91a 	bl	80011d0 <HAL_GetTick>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	1ad3      	subs	r3, r2, r3
 8001fa2:	2b02      	cmp	r3, #2
 8001fa4:	d901      	bls.n	8001faa <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001fa6:	2303      	movs	r3, #3
 8001fa8:	e173      	b.n	8002292 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001faa:	4b0b      	ldr	r3, [pc, #44]	@ (8001fd8 <HAL_RCC_OscConfig+0x274>)
 8001fac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001fae:	f003 0302 	and.w	r3, r3, #2
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d0f0      	beq.n	8001f98 <HAL_RCC_OscConfig+0x234>
 8001fb6:	e01b      	b.n	8001ff0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fb8:	4b09      	ldr	r3, [pc, #36]	@ (8001fe0 <HAL_RCC_OscConfig+0x27c>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fbe:	f7ff f907 	bl	80011d0 <HAL_GetTick>
 8001fc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fc4:	e00e      	b.n	8001fe4 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fc6:	f7ff f903 	bl	80011d0 <HAL_GetTick>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	1ad3      	subs	r3, r2, r3
 8001fd0:	2b02      	cmp	r3, #2
 8001fd2:	d907      	bls.n	8001fe4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001fd4:	2303      	movs	r3, #3
 8001fd6:	e15c      	b.n	8002292 <HAL_RCC_OscConfig+0x52e>
 8001fd8:	40023800 	.word	0x40023800
 8001fdc:	42470000 	.word	0x42470000
 8001fe0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fe4:	4b8a      	ldr	r3, [pc, #552]	@ (8002210 <HAL_RCC_OscConfig+0x4ac>)
 8001fe6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001fe8:	f003 0302 	and.w	r3, r3, #2
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d1ea      	bne.n	8001fc6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f003 0304 	and.w	r3, r3, #4
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	f000 8097 	beq.w	800212c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ffe:	2300      	movs	r3, #0
 8002000:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002002:	4b83      	ldr	r3, [pc, #524]	@ (8002210 <HAL_RCC_OscConfig+0x4ac>)
 8002004:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002006:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800200a:	2b00      	cmp	r3, #0
 800200c:	d10f      	bne.n	800202e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800200e:	2300      	movs	r3, #0
 8002010:	60bb      	str	r3, [r7, #8]
 8002012:	4b7f      	ldr	r3, [pc, #508]	@ (8002210 <HAL_RCC_OscConfig+0x4ac>)
 8002014:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002016:	4a7e      	ldr	r2, [pc, #504]	@ (8002210 <HAL_RCC_OscConfig+0x4ac>)
 8002018:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800201c:	6413      	str	r3, [r2, #64]	@ 0x40
 800201e:	4b7c      	ldr	r3, [pc, #496]	@ (8002210 <HAL_RCC_OscConfig+0x4ac>)
 8002020:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002022:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002026:	60bb      	str	r3, [r7, #8]
 8002028:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800202a:	2301      	movs	r3, #1
 800202c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800202e:	4b79      	ldr	r3, [pc, #484]	@ (8002214 <HAL_RCC_OscConfig+0x4b0>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002036:	2b00      	cmp	r3, #0
 8002038:	d118      	bne.n	800206c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800203a:	4b76      	ldr	r3, [pc, #472]	@ (8002214 <HAL_RCC_OscConfig+0x4b0>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a75      	ldr	r2, [pc, #468]	@ (8002214 <HAL_RCC_OscConfig+0x4b0>)
 8002040:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002044:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002046:	f7ff f8c3 	bl	80011d0 <HAL_GetTick>
 800204a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800204c:	e008      	b.n	8002060 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800204e:	f7ff f8bf 	bl	80011d0 <HAL_GetTick>
 8002052:	4602      	mov	r2, r0
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	1ad3      	subs	r3, r2, r3
 8002058:	2b02      	cmp	r3, #2
 800205a:	d901      	bls.n	8002060 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800205c:	2303      	movs	r3, #3
 800205e:	e118      	b.n	8002292 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002060:	4b6c      	ldr	r3, [pc, #432]	@ (8002214 <HAL_RCC_OscConfig+0x4b0>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002068:	2b00      	cmp	r3, #0
 800206a:	d0f0      	beq.n	800204e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	2b01      	cmp	r3, #1
 8002072:	d106      	bne.n	8002082 <HAL_RCC_OscConfig+0x31e>
 8002074:	4b66      	ldr	r3, [pc, #408]	@ (8002210 <HAL_RCC_OscConfig+0x4ac>)
 8002076:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002078:	4a65      	ldr	r2, [pc, #404]	@ (8002210 <HAL_RCC_OscConfig+0x4ac>)
 800207a:	f043 0301 	orr.w	r3, r3, #1
 800207e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002080:	e01c      	b.n	80020bc <HAL_RCC_OscConfig+0x358>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	689b      	ldr	r3, [r3, #8]
 8002086:	2b05      	cmp	r3, #5
 8002088:	d10c      	bne.n	80020a4 <HAL_RCC_OscConfig+0x340>
 800208a:	4b61      	ldr	r3, [pc, #388]	@ (8002210 <HAL_RCC_OscConfig+0x4ac>)
 800208c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800208e:	4a60      	ldr	r2, [pc, #384]	@ (8002210 <HAL_RCC_OscConfig+0x4ac>)
 8002090:	f043 0304 	orr.w	r3, r3, #4
 8002094:	6713      	str	r3, [r2, #112]	@ 0x70
 8002096:	4b5e      	ldr	r3, [pc, #376]	@ (8002210 <HAL_RCC_OscConfig+0x4ac>)
 8002098:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800209a:	4a5d      	ldr	r2, [pc, #372]	@ (8002210 <HAL_RCC_OscConfig+0x4ac>)
 800209c:	f043 0301 	orr.w	r3, r3, #1
 80020a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80020a2:	e00b      	b.n	80020bc <HAL_RCC_OscConfig+0x358>
 80020a4:	4b5a      	ldr	r3, [pc, #360]	@ (8002210 <HAL_RCC_OscConfig+0x4ac>)
 80020a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020a8:	4a59      	ldr	r2, [pc, #356]	@ (8002210 <HAL_RCC_OscConfig+0x4ac>)
 80020aa:	f023 0301 	bic.w	r3, r3, #1
 80020ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80020b0:	4b57      	ldr	r3, [pc, #348]	@ (8002210 <HAL_RCC_OscConfig+0x4ac>)
 80020b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020b4:	4a56      	ldr	r2, [pc, #344]	@ (8002210 <HAL_RCC_OscConfig+0x4ac>)
 80020b6:	f023 0304 	bic.w	r3, r3, #4
 80020ba:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	689b      	ldr	r3, [r3, #8]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d015      	beq.n	80020f0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020c4:	f7ff f884 	bl	80011d0 <HAL_GetTick>
 80020c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020ca:	e00a      	b.n	80020e2 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020cc:	f7ff f880 	bl	80011d0 <HAL_GetTick>
 80020d0:	4602      	mov	r2, r0
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	1ad3      	subs	r3, r2, r3
 80020d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020da:	4293      	cmp	r3, r2
 80020dc:	d901      	bls.n	80020e2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80020de:	2303      	movs	r3, #3
 80020e0:	e0d7      	b.n	8002292 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020e2:	4b4b      	ldr	r3, [pc, #300]	@ (8002210 <HAL_RCC_OscConfig+0x4ac>)
 80020e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020e6:	f003 0302 	and.w	r3, r3, #2
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d0ee      	beq.n	80020cc <HAL_RCC_OscConfig+0x368>
 80020ee:	e014      	b.n	800211a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020f0:	f7ff f86e 	bl	80011d0 <HAL_GetTick>
 80020f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020f6:	e00a      	b.n	800210e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020f8:	f7ff f86a 	bl	80011d0 <HAL_GetTick>
 80020fc:	4602      	mov	r2, r0
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	1ad3      	subs	r3, r2, r3
 8002102:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002106:	4293      	cmp	r3, r2
 8002108:	d901      	bls.n	800210e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800210a:	2303      	movs	r3, #3
 800210c:	e0c1      	b.n	8002292 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800210e:	4b40      	ldr	r3, [pc, #256]	@ (8002210 <HAL_RCC_OscConfig+0x4ac>)
 8002110:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002112:	f003 0302 	and.w	r3, r3, #2
 8002116:	2b00      	cmp	r3, #0
 8002118:	d1ee      	bne.n	80020f8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800211a:	7dfb      	ldrb	r3, [r7, #23]
 800211c:	2b01      	cmp	r3, #1
 800211e:	d105      	bne.n	800212c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002120:	4b3b      	ldr	r3, [pc, #236]	@ (8002210 <HAL_RCC_OscConfig+0x4ac>)
 8002122:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002124:	4a3a      	ldr	r2, [pc, #232]	@ (8002210 <HAL_RCC_OscConfig+0x4ac>)
 8002126:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800212a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	699b      	ldr	r3, [r3, #24]
 8002130:	2b00      	cmp	r3, #0
 8002132:	f000 80ad 	beq.w	8002290 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002136:	4b36      	ldr	r3, [pc, #216]	@ (8002210 <HAL_RCC_OscConfig+0x4ac>)
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	f003 030c 	and.w	r3, r3, #12
 800213e:	2b08      	cmp	r3, #8
 8002140:	d060      	beq.n	8002204 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	699b      	ldr	r3, [r3, #24]
 8002146:	2b02      	cmp	r3, #2
 8002148:	d145      	bne.n	80021d6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800214a:	4b33      	ldr	r3, [pc, #204]	@ (8002218 <HAL_RCC_OscConfig+0x4b4>)
 800214c:	2200      	movs	r2, #0
 800214e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002150:	f7ff f83e 	bl	80011d0 <HAL_GetTick>
 8002154:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002156:	e008      	b.n	800216a <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002158:	f7ff f83a 	bl	80011d0 <HAL_GetTick>
 800215c:	4602      	mov	r2, r0
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	1ad3      	subs	r3, r2, r3
 8002162:	2b02      	cmp	r3, #2
 8002164:	d901      	bls.n	800216a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002166:	2303      	movs	r3, #3
 8002168:	e093      	b.n	8002292 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800216a:	4b29      	ldr	r3, [pc, #164]	@ (8002210 <HAL_RCC_OscConfig+0x4ac>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002172:	2b00      	cmp	r3, #0
 8002174:	d1f0      	bne.n	8002158 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	69da      	ldr	r2, [r3, #28]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6a1b      	ldr	r3, [r3, #32]
 800217e:	431a      	orrs	r2, r3
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002184:	019b      	lsls	r3, r3, #6
 8002186:	431a      	orrs	r2, r3
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800218c:	085b      	lsrs	r3, r3, #1
 800218e:	3b01      	subs	r3, #1
 8002190:	041b      	lsls	r3, r3, #16
 8002192:	431a      	orrs	r2, r3
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002198:	061b      	lsls	r3, r3, #24
 800219a:	431a      	orrs	r2, r3
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021a0:	071b      	lsls	r3, r3, #28
 80021a2:	491b      	ldr	r1, [pc, #108]	@ (8002210 <HAL_RCC_OscConfig+0x4ac>)
 80021a4:	4313      	orrs	r3, r2
 80021a6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021a8:	4b1b      	ldr	r3, [pc, #108]	@ (8002218 <HAL_RCC_OscConfig+0x4b4>)
 80021aa:	2201      	movs	r2, #1
 80021ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021ae:	f7ff f80f 	bl	80011d0 <HAL_GetTick>
 80021b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021b4:	e008      	b.n	80021c8 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021b6:	f7ff f80b 	bl	80011d0 <HAL_GetTick>
 80021ba:	4602      	mov	r2, r0
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	1ad3      	subs	r3, r2, r3
 80021c0:	2b02      	cmp	r3, #2
 80021c2:	d901      	bls.n	80021c8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80021c4:	2303      	movs	r3, #3
 80021c6:	e064      	b.n	8002292 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021c8:	4b11      	ldr	r3, [pc, #68]	@ (8002210 <HAL_RCC_OscConfig+0x4ac>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d0f0      	beq.n	80021b6 <HAL_RCC_OscConfig+0x452>
 80021d4:	e05c      	b.n	8002290 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021d6:	4b10      	ldr	r3, [pc, #64]	@ (8002218 <HAL_RCC_OscConfig+0x4b4>)
 80021d8:	2200      	movs	r2, #0
 80021da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021dc:	f7fe fff8 	bl	80011d0 <HAL_GetTick>
 80021e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021e2:	e008      	b.n	80021f6 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021e4:	f7fe fff4 	bl	80011d0 <HAL_GetTick>
 80021e8:	4602      	mov	r2, r0
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	1ad3      	subs	r3, r2, r3
 80021ee:	2b02      	cmp	r3, #2
 80021f0:	d901      	bls.n	80021f6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80021f2:	2303      	movs	r3, #3
 80021f4:	e04d      	b.n	8002292 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021f6:	4b06      	ldr	r3, [pc, #24]	@ (8002210 <HAL_RCC_OscConfig+0x4ac>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d1f0      	bne.n	80021e4 <HAL_RCC_OscConfig+0x480>
 8002202:	e045      	b.n	8002290 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	699b      	ldr	r3, [r3, #24]
 8002208:	2b01      	cmp	r3, #1
 800220a:	d107      	bne.n	800221c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800220c:	2301      	movs	r3, #1
 800220e:	e040      	b.n	8002292 <HAL_RCC_OscConfig+0x52e>
 8002210:	40023800 	.word	0x40023800
 8002214:	40007000 	.word	0x40007000
 8002218:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800221c:	4b1f      	ldr	r3, [pc, #124]	@ (800229c <HAL_RCC_OscConfig+0x538>)
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	699b      	ldr	r3, [r3, #24]
 8002226:	2b01      	cmp	r3, #1
 8002228:	d030      	beq.n	800228c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002234:	429a      	cmp	r2, r3
 8002236:	d129      	bne.n	800228c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002242:	429a      	cmp	r2, r3
 8002244:	d122      	bne.n	800228c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002246:	68fa      	ldr	r2, [r7, #12]
 8002248:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800224c:	4013      	ands	r3, r2
 800224e:	687a      	ldr	r2, [r7, #4]
 8002250:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002252:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002254:	4293      	cmp	r3, r2
 8002256:	d119      	bne.n	800228c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002262:	085b      	lsrs	r3, r3, #1
 8002264:	3b01      	subs	r3, #1
 8002266:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002268:	429a      	cmp	r2, r3
 800226a:	d10f      	bne.n	800228c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002276:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002278:	429a      	cmp	r2, r3
 800227a:	d107      	bne.n	800228c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002286:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002288:	429a      	cmp	r2, r3
 800228a:	d001      	beq.n	8002290 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800228c:	2301      	movs	r3, #1
 800228e:	e000      	b.n	8002292 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002290:	2300      	movs	r3, #0
}
 8002292:	4618      	mov	r0, r3
 8002294:	3718      	adds	r7, #24
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	40023800 	.word	0x40023800

080022a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b082      	sub	sp, #8
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d101      	bne.n	80022b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e041      	b.n	8002336 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80022b8:	b2db      	uxtb	r3, r3
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d106      	bne.n	80022cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2200      	movs	r2, #0
 80022c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80022c6:	6878      	ldr	r0, [r7, #4]
 80022c8:	f7fe fe18 	bl	8000efc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2202      	movs	r2, #2
 80022d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681a      	ldr	r2, [r3, #0]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	3304      	adds	r3, #4
 80022dc:	4619      	mov	r1, r3
 80022de:	4610      	mov	r0, r2
 80022e0:	f000 fd00 	bl	8002ce4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2201      	movs	r2, #1
 80022e8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2201      	movs	r2, #1
 80022f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2201      	movs	r2, #1
 80022f8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2201      	movs	r2, #1
 8002300:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2201      	movs	r2, #1
 8002308:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2201      	movs	r2, #1
 8002310:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2201      	movs	r2, #1
 8002318:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2201      	movs	r2, #1
 8002320:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2201      	movs	r2, #1
 8002328:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2201      	movs	r2, #1
 8002330:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002334:	2300      	movs	r3, #0
}
 8002336:	4618      	mov	r0, r3
 8002338:	3708      	adds	r7, #8
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
	...

08002340 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002340:	b480      	push	{r7}
 8002342:	b085      	sub	sp, #20
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800234e:	b2db      	uxtb	r3, r3
 8002350:	2b01      	cmp	r3, #1
 8002352:	d001      	beq.n	8002358 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002354:	2301      	movs	r3, #1
 8002356:	e04e      	b.n	80023f6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2202      	movs	r2, #2
 800235c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	68da      	ldr	r2, [r3, #12]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f042 0201 	orr.w	r2, r2, #1
 800236e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a23      	ldr	r2, [pc, #140]	@ (8002404 <HAL_TIM_Base_Start_IT+0xc4>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d022      	beq.n	80023c0 <HAL_TIM_Base_Start_IT+0x80>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002382:	d01d      	beq.n	80023c0 <HAL_TIM_Base_Start_IT+0x80>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a1f      	ldr	r2, [pc, #124]	@ (8002408 <HAL_TIM_Base_Start_IT+0xc8>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d018      	beq.n	80023c0 <HAL_TIM_Base_Start_IT+0x80>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a1e      	ldr	r2, [pc, #120]	@ (800240c <HAL_TIM_Base_Start_IT+0xcc>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d013      	beq.n	80023c0 <HAL_TIM_Base_Start_IT+0x80>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a1c      	ldr	r2, [pc, #112]	@ (8002410 <HAL_TIM_Base_Start_IT+0xd0>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d00e      	beq.n	80023c0 <HAL_TIM_Base_Start_IT+0x80>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a1b      	ldr	r2, [pc, #108]	@ (8002414 <HAL_TIM_Base_Start_IT+0xd4>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d009      	beq.n	80023c0 <HAL_TIM_Base_Start_IT+0x80>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a19      	ldr	r2, [pc, #100]	@ (8002418 <HAL_TIM_Base_Start_IT+0xd8>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d004      	beq.n	80023c0 <HAL_TIM_Base_Start_IT+0x80>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a18      	ldr	r2, [pc, #96]	@ (800241c <HAL_TIM_Base_Start_IT+0xdc>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d111      	bne.n	80023e4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	f003 0307 	and.w	r3, r3, #7
 80023ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	2b06      	cmp	r3, #6
 80023d0:	d010      	beq.n	80023f4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f042 0201 	orr.w	r2, r2, #1
 80023e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023e2:	e007      	b.n	80023f4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	681a      	ldr	r2, [r3, #0]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f042 0201 	orr.w	r2, r2, #1
 80023f2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80023f4:	2300      	movs	r3, #0
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3714      	adds	r7, #20
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr
 8002402:	bf00      	nop
 8002404:	40010000 	.word	0x40010000
 8002408:	40000400 	.word	0x40000400
 800240c:	40000800 	.word	0x40000800
 8002410:	40000c00 	.word	0x40000c00
 8002414:	40010400 	.word	0x40010400
 8002418:	40014000 	.word	0x40014000
 800241c:	40001800 	.word	0x40001800

08002420 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002420:	b480      	push	{r7}
 8002422:	b083      	sub	sp, #12
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	68da      	ldr	r2, [r3, #12]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f022 0201 	bic.w	r2, r2, #1
 8002436:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	6a1a      	ldr	r2, [r3, #32]
 800243e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8002442:	4013      	ands	r3, r2
 8002444:	2b00      	cmp	r3, #0
 8002446:	d10f      	bne.n	8002468 <HAL_TIM_Base_Stop_IT+0x48>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	6a1a      	ldr	r2, [r3, #32]
 800244e:	f240 4344 	movw	r3, #1092	@ 0x444
 8002452:	4013      	ands	r3, r2
 8002454:	2b00      	cmp	r3, #0
 8002456:	d107      	bne.n	8002468 <HAL_TIM_Base_Stop_IT+0x48>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f022 0201 	bic.w	r2, r2, #1
 8002466:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2201      	movs	r2, #1
 800246c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8002470:	2300      	movs	r3, #0
}
 8002472:	4618      	mov	r0, r3
 8002474:	370c      	adds	r7, #12
 8002476:	46bd      	mov	sp, r7
 8002478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247c:	4770      	bx	lr

0800247e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800247e:	b580      	push	{r7, lr}
 8002480:	b082      	sub	sp, #8
 8002482:	af00      	add	r7, sp, #0
 8002484:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d101      	bne.n	8002490 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800248c:	2301      	movs	r3, #1
 800248e:	e041      	b.n	8002514 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002496:	b2db      	uxtb	r3, r3
 8002498:	2b00      	cmp	r3, #0
 800249a:	d106      	bne.n	80024aa <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2200      	movs	r2, #0
 80024a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80024a4:	6878      	ldr	r0, [r7, #4]
 80024a6:	f000 f839 	bl	800251c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2202      	movs	r2, #2
 80024ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	3304      	adds	r3, #4
 80024ba:	4619      	mov	r1, r3
 80024bc:	4610      	mov	r0, r2
 80024be:	f000 fc11 	bl	8002ce4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2201      	movs	r2, #1
 80024c6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2201      	movs	r2, #1
 80024ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2201      	movs	r2, #1
 80024d6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2201      	movs	r2, #1
 80024de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2201      	movs	r2, #1
 80024e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2201      	movs	r2, #1
 80024ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2201      	movs	r2, #1
 80024f6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2201      	movs	r2, #1
 80024fe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2201      	movs	r2, #1
 8002506:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2201      	movs	r2, #1
 800250e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002512:	2300      	movs	r3, #0
}
 8002514:	4618      	mov	r0, r3
 8002516:	3708      	adds	r7, #8
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}

0800251c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800251c:	b480      	push	{r7}
 800251e:	b083      	sub	sp, #12
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002524:	bf00      	nop
 8002526:	370c      	adds	r7, #12
 8002528:	46bd      	mov	sp, r7
 800252a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252e:	4770      	bx	lr

08002530 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b084      	sub	sp, #16
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
 8002538:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d109      	bne.n	8002554 <HAL_TIM_PWM_Start+0x24>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002546:	b2db      	uxtb	r3, r3
 8002548:	2b01      	cmp	r3, #1
 800254a:	bf14      	ite	ne
 800254c:	2301      	movne	r3, #1
 800254e:	2300      	moveq	r3, #0
 8002550:	b2db      	uxtb	r3, r3
 8002552:	e022      	b.n	800259a <HAL_TIM_PWM_Start+0x6a>
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	2b04      	cmp	r3, #4
 8002558:	d109      	bne.n	800256e <HAL_TIM_PWM_Start+0x3e>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002560:	b2db      	uxtb	r3, r3
 8002562:	2b01      	cmp	r3, #1
 8002564:	bf14      	ite	ne
 8002566:	2301      	movne	r3, #1
 8002568:	2300      	moveq	r3, #0
 800256a:	b2db      	uxtb	r3, r3
 800256c:	e015      	b.n	800259a <HAL_TIM_PWM_Start+0x6a>
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	2b08      	cmp	r3, #8
 8002572:	d109      	bne.n	8002588 <HAL_TIM_PWM_Start+0x58>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800257a:	b2db      	uxtb	r3, r3
 800257c:	2b01      	cmp	r3, #1
 800257e:	bf14      	ite	ne
 8002580:	2301      	movne	r3, #1
 8002582:	2300      	moveq	r3, #0
 8002584:	b2db      	uxtb	r3, r3
 8002586:	e008      	b.n	800259a <HAL_TIM_PWM_Start+0x6a>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800258e:	b2db      	uxtb	r3, r3
 8002590:	2b01      	cmp	r3, #1
 8002592:	bf14      	ite	ne
 8002594:	2301      	movne	r3, #1
 8002596:	2300      	moveq	r3, #0
 8002598:	b2db      	uxtb	r3, r3
 800259a:	2b00      	cmp	r3, #0
 800259c:	d001      	beq.n	80025a2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	e07c      	b.n	800269c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d104      	bne.n	80025b2 <HAL_TIM_PWM_Start+0x82>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2202      	movs	r2, #2
 80025ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80025b0:	e013      	b.n	80025da <HAL_TIM_PWM_Start+0xaa>
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	2b04      	cmp	r3, #4
 80025b6:	d104      	bne.n	80025c2 <HAL_TIM_PWM_Start+0x92>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2202      	movs	r2, #2
 80025bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80025c0:	e00b      	b.n	80025da <HAL_TIM_PWM_Start+0xaa>
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	2b08      	cmp	r3, #8
 80025c6:	d104      	bne.n	80025d2 <HAL_TIM_PWM_Start+0xa2>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2202      	movs	r2, #2
 80025cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80025d0:	e003      	b.n	80025da <HAL_TIM_PWM_Start+0xaa>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2202      	movs	r2, #2
 80025d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	2201      	movs	r2, #1
 80025e0:	6839      	ldr	r1, [r7, #0]
 80025e2:	4618      	mov	r0, r3
 80025e4:	f000 fe74 	bl	80032d0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a2d      	ldr	r2, [pc, #180]	@ (80026a4 <HAL_TIM_PWM_Start+0x174>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d004      	beq.n	80025fc <HAL_TIM_PWM_Start+0xcc>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a2c      	ldr	r2, [pc, #176]	@ (80026a8 <HAL_TIM_PWM_Start+0x178>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d101      	bne.n	8002600 <HAL_TIM_PWM_Start+0xd0>
 80025fc:	2301      	movs	r3, #1
 80025fe:	e000      	b.n	8002602 <HAL_TIM_PWM_Start+0xd2>
 8002600:	2300      	movs	r3, #0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d007      	beq.n	8002616 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002614:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a22      	ldr	r2, [pc, #136]	@ (80026a4 <HAL_TIM_PWM_Start+0x174>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d022      	beq.n	8002666 <HAL_TIM_PWM_Start+0x136>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002628:	d01d      	beq.n	8002666 <HAL_TIM_PWM_Start+0x136>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a1f      	ldr	r2, [pc, #124]	@ (80026ac <HAL_TIM_PWM_Start+0x17c>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d018      	beq.n	8002666 <HAL_TIM_PWM_Start+0x136>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a1d      	ldr	r2, [pc, #116]	@ (80026b0 <HAL_TIM_PWM_Start+0x180>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d013      	beq.n	8002666 <HAL_TIM_PWM_Start+0x136>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a1c      	ldr	r2, [pc, #112]	@ (80026b4 <HAL_TIM_PWM_Start+0x184>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d00e      	beq.n	8002666 <HAL_TIM_PWM_Start+0x136>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a16      	ldr	r2, [pc, #88]	@ (80026a8 <HAL_TIM_PWM_Start+0x178>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d009      	beq.n	8002666 <HAL_TIM_PWM_Start+0x136>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a18      	ldr	r2, [pc, #96]	@ (80026b8 <HAL_TIM_PWM_Start+0x188>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d004      	beq.n	8002666 <HAL_TIM_PWM_Start+0x136>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a16      	ldr	r2, [pc, #88]	@ (80026bc <HAL_TIM_PWM_Start+0x18c>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d111      	bne.n	800268a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	f003 0307 	and.w	r3, r3, #7
 8002670:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	2b06      	cmp	r3, #6
 8002676:	d010      	beq.n	800269a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f042 0201 	orr.w	r2, r2, #1
 8002686:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002688:	e007      	b.n	800269a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f042 0201 	orr.w	r2, r2, #1
 8002698:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800269a:	2300      	movs	r3, #0
}
 800269c:	4618      	mov	r0, r3
 800269e:	3710      	adds	r7, #16
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}
 80026a4:	40010000 	.word	0x40010000
 80026a8:	40010400 	.word	0x40010400
 80026ac:	40000400 	.word	0x40000400
 80026b0:	40000800 	.word	0x40000800
 80026b4:	40000c00 	.word	0x40000c00
 80026b8:	40014000 	.word	0x40014000
 80026bc:	40001800 	.word	0x40001800

080026c0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b082      	sub	sp, #8
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
 80026c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	2200      	movs	r2, #0
 80026d0:	6839      	ldr	r1, [r7, #0]
 80026d2:	4618      	mov	r0, r3
 80026d4:	f000 fdfc 	bl	80032d0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a2e      	ldr	r2, [pc, #184]	@ (8002798 <HAL_TIM_PWM_Stop+0xd8>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d004      	beq.n	80026ec <HAL_TIM_PWM_Stop+0x2c>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4a2d      	ldr	r2, [pc, #180]	@ (800279c <HAL_TIM_PWM_Stop+0xdc>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d101      	bne.n	80026f0 <HAL_TIM_PWM_Stop+0x30>
 80026ec:	2301      	movs	r3, #1
 80026ee:	e000      	b.n	80026f2 <HAL_TIM_PWM_Stop+0x32>
 80026f0:	2300      	movs	r3, #0
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d017      	beq.n	8002726 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	6a1a      	ldr	r2, [r3, #32]
 80026fc:	f241 1311 	movw	r3, #4369	@ 0x1111
 8002700:	4013      	ands	r3, r2
 8002702:	2b00      	cmp	r3, #0
 8002704:	d10f      	bne.n	8002726 <HAL_TIM_PWM_Stop+0x66>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	6a1a      	ldr	r2, [r3, #32]
 800270c:	f240 4344 	movw	r3, #1092	@ 0x444
 8002710:	4013      	ands	r3, r2
 8002712:	2b00      	cmp	r3, #0
 8002714:	d107      	bne.n	8002726 <HAL_TIM_PWM_Stop+0x66>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002724:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	6a1a      	ldr	r2, [r3, #32]
 800272c:	f241 1311 	movw	r3, #4369	@ 0x1111
 8002730:	4013      	ands	r3, r2
 8002732:	2b00      	cmp	r3, #0
 8002734:	d10f      	bne.n	8002756 <HAL_TIM_PWM_Stop+0x96>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	6a1a      	ldr	r2, [r3, #32]
 800273c:	f240 4344 	movw	r3, #1092	@ 0x444
 8002740:	4013      	ands	r3, r2
 8002742:	2b00      	cmp	r3, #0
 8002744:	d107      	bne.n	8002756 <HAL_TIM_PWM_Stop+0x96>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	681a      	ldr	r2, [r3, #0]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f022 0201 	bic.w	r2, r2, #1
 8002754:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d104      	bne.n	8002766 <HAL_TIM_PWM_Stop+0xa6>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2201      	movs	r2, #1
 8002760:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002764:	e013      	b.n	800278e <HAL_TIM_PWM_Stop+0xce>
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	2b04      	cmp	r3, #4
 800276a:	d104      	bne.n	8002776 <HAL_TIM_PWM_Stop+0xb6>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2201      	movs	r2, #1
 8002770:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002774:	e00b      	b.n	800278e <HAL_TIM_PWM_Stop+0xce>
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	2b08      	cmp	r3, #8
 800277a:	d104      	bne.n	8002786 <HAL_TIM_PWM_Stop+0xc6>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2201      	movs	r2, #1
 8002780:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002784:	e003      	b.n	800278e <HAL_TIM_PWM_Stop+0xce>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2201      	movs	r2, #1
 800278a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 800278e:	2300      	movs	r3, #0
}
 8002790:	4618      	mov	r0, r3
 8002792:	3708      	adds	r7, #8
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}
 8002798:	40010000 	.word	0x40010000
 800279c:	40010400 	.word	0x40010400

080027a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b084      	sub	sp, #16
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	68db      	ldr	r3, [r3, #12]
 80027ae:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	691b      	ldr	r3, [r3, #16]
 80027b6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	f003 0302 	and.w	r3, r3, #2
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d020      	beq.n	8002804 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	f003 0302 	and.w	r3, r3, #2
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d01b      	beq.n	8002804 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f06f 0202 	mvn.w	r2, #2
 80027d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2201      	movs	r2, #1
 80027da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	699b      	ldr	r3, [r3, #24]
 80027e2:	f003 0303 	and.w	r3, r3, #3
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d003      	beq.n	80027f2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80027ea:	6878      	ldr	r0, [r7, #4]
 80027ec:	f000 fa5b 	bl	8002ca6 <HAL_TIM_IC_CaptureCallback>
 80027f0:	e005      	b.n	80027fe <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80027f2:	6878      	ldr	r0, [r7, #4]
 80027f4:	f000 fa4d 	bl	8002c92 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027f8:	6878      	ldr	r0, [r7, #4]
 80027fa:	f000 fa5e 	bl	8002cba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2200      	movs	r2, #0
 8002802:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	f003 0304 	and.w	r3, r3, #4
 800280a:	2b00      	cmp	r3, #0
 800280c:	d020      	beq.n	8002850 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	f003 0304 	and.w	r3, r3, #4
 8002814:	2b00      	cmp	r3, #0
 8002816:	d01b      	beq.n	8002850 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f06f 0204 	mvn.w	r2, #4
 8002820:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2202      	movs	r2, #2
 8002826:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	699b      	ldr	r3, [r3, #24]
 800282e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002832:	2b00      	cmp	r3, #0
 8002834:	d003      	beq.n	800283e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002836:	6878      	ldr	r0, [r7, #4]
 8002838:	f000 fa35 	bl	8002ca6 <HAL_TIM_IC_CaptureCallback>
 800283c:	e005      	b.n	800284a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800283e:	6878      	ldr	r0, [r7, #4]
 8002840:	f000 fa27 	bl	8002c92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002844:	6878      	ldr	r0, [r7, #4]
 8002846:	f000 fa38 	bl	8002cba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2200      	movs	r2, #0
 800284e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	f003 0308 	and.w	r3, r3, #8
 8002856:	2b00      	cmp	r3, #0
 8002858:	d020      	beq.n	800289c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	f003 0308 	and.w	r3, r3, #8
 8002860:	2b00      	cmp	r3, #0
 8002862:	d01b      	beq.n	800289c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f06f 0208 	mvn.w	r2, #8
 800286c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2204      	movs	r2, #4
 8002872:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	69db      	ldr	r3, [r3, #28]
 800287a:	f003 0303 	and.w	r3, r3, #3
 800287e:	2b00      	cmp	r3, #0
 8002880:	d003      	beq.n	800288a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002882:	6878      	ldr	r0, [r7, #4]
 8002884:	f000 fa0f 	bl	8002ca6 <HAL_TIM_IC_CaptureCallback>
 8002888:	e005      	b.n	8002896 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800288a:	6878      	ldr	r0, [r7, #4]
 800288c:	f000 fa01 	bl	8002c92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002890:	6878      	ldr	r0, [r7, #4]
 8002892:	f000 fa12 	bl	8002cba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2200      	movs	r2, #0
 800289a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	f003 0310 	and.w	r3, r3, #16
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d020      	beq.n	80028e8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	f003 0310 	and.w	r3, r3, #16
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d01b      	beq.n	80028e8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f06f 0210 	mvn.w	r2, #16
 80028b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2208      	movs	r2, #8
 80028be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	69db      	ldr	r3, [r3, #28]
 80028c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d003      	beq.n	80028d6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028ce:	6878      	ldr	r0, [r7, #4]
 80028d0:	f000 f9e9 	bl	8002ca6 <HAL_TIM_IC_CaptureCallback>
 80028d4:	e005      	b.n	80028e2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028d6:	6878      	ldr	r0, [r7, #4]
 80028d8:	f000 f9db 	bl	8002c92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028dc:	6878      	ldr	r0, [r7, #4]
 80028de:	f000 f9ec 	bl	8002cba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2200      	movs	r2, #0
 80028e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	f003 0301 	and.w	r3, r3, #1
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d00c      	beq.n	800290c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	f003 0301 	and.w	r3, r3, #1
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d007      	beq.n	800290c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f06f 0201 	mvn.w	r2, #1
 8002904:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	f7fd ffc0 	bl	800088c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002912:	2b00      	cmp	r3, #0
 8002914:	d00c      	beq.n	8002930 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800291c:	2b00      	cmp	r3, #0
 800291e:	d007      	beq.n	8002930 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002928:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	f000 fd7c 	bl	8003428 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002936:	2b00      	cmp	r3, #0
 8002938:	d00c      	beq.n	8002954 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002940:	2b00      	cmp	r3, #0
 8002942:	d007      	beq.n	8002954 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800294c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800294e:	6878      	ldr	r0, [r7, #4]
 8002950:	f000 f9bd 	bl	8002cce <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	f003 0320 	and.w	r3, r3, #32
 800295a:	2b00      	cmp	r3, #0
 800295c:	d00c      	beq.n	8002978 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	f003 0320 	and.w	r3, r3, #32
 8002964:	2b00      	cmp	r3, #0
 8002966:	d007      	beq.n	8002978 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f06f 0220 	mvn.w	r2, #32
 8002970:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002972:	6878      	ldr	r0, [r7, #4]
 8002974:	f000 fd4e 	bl	8003414 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002978:	bf00      	nop
 800297a:	3710      	adds	r7, #16
 800297c:	46bd      	mov	sp, r7
 800297e:	bd80      	pop	{r7, pc}

08002980 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b086      	sub	sp, #24
 8002984:	af00      	add	r7, sp, #0
 8002986:	60f8      	str	r0, [r7, #12]
 8002988:	60b9      	str	r1, [r7, #8]
 800298a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800298c:	2300      	movs	r3, #0
 800298e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002996:	2b01      	cmp	r3, #1
 8002998:	d101      	bne.n	800299e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800299a:	2302      	movs	r3, #2
 800299c:	e0ae      	b.n	8002afc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	2201      	movs	r2, #1
 80029a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2b0c      	cmp	r3, #12
 80029aa:	f200 809f 	bhi.w	8002aec <HAL_TIM_PWM_ConfigChannel+0x16c>
 80029ae:	a201      	add	r2, pc, #4	@ (adr r2, 80029b4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80029b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029b4:	080029e9 	.word	0x080029e9
 80029b8:	08002aed 	.word	0x08002aed
 80029bc:	08002aed 	.word	0x08002aed
 80029c0:	08002aed 	.word	0x08002aed
 80029c4:	08002a29 	.word	0x08002a29
 80029c8:	08002aed 	.word	0x08002aed
 80029cc:	08002aed 	.word	0x08002aed
 80029d0:	08002aed 	.word	0x08002aed
 80029d4:	08002a6b 	.word	0x08002a6b
 80029d8:	08002aed 	.word	0x08002aed
 80029dc:	08002aed 	.word	0x08002aed
 80029e0:	08002aed 	.word	0x08002aed
 80029e4:	08002aab 	.word	0x08002aab
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	68b9      	ldr	r1, [r7, #8]
 80029ee:	4618      	mov	r0, r3
 80029f0:	f000 fa24 	bl	8002e3c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	699a      	ldr	r2, [r3, #24]
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f042 0208 	orr.w	r2, r2, #8
 8002a02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	699a      	ldr	r2, [r3, #24]
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f022 0204 	bic.w	r2, r2, #4
 8002a12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	6999      	ldr	r1, [r3, #24]
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	691a      	ldr	r2, [r3, #16]
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	430a      	orrs	r2, r1
 8002a24:	619a      	str	r2, [r3, #24]
      break;
 8002a26:	e064      	b.n	8002af2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	68b9      	ldr	r1, [r7, #8]
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f000 fa74 	bl	8002f1c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	699a      	ldr	r2, [r3, #24]
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002a42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	699a      	ldr	r2, [r3, #24]
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	6999      	ldr	r1, [r3, #24]
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	691b      	ldr	r3, [r3, #16]
 8002a5e:	021a      	lsls	r2, r3, #8
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	430a      	orrs	r2, r1
 8002a66:	619a      	str	r2, [r3, #24]
      break;
 8002a68:	e043      	b.n	8002af2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	68b9      	ldr	r1, [r7, #8]
 8002a70:	4618      	mov	r0, r3
 8002a72:	f000 fac9 	bl	8003008 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	69da      	ldr	r2, [r3, #28]
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f042 0208 	orr.w	r2, r2, #8
 8002a84:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	69da      	ldr	r2, [r3, #28]
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f022 0204 	bic.w	r2, r2, #4
 8002a94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	69d9      	ldr	r1, [r3, #28]
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	691a      	ldr	r2, [r3, #16]
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	430a      	orrs	r2, r1
 8002aa6:	61da      	str	r2, [r3, #28]
      break;
 8002aa8:	e023      	b.n	8002af2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	68b9      	ldr	r1, [r7, #8]
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f000 fb1d 	bl	80030f0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	69da      	ldr	r2, [r3, #28]
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002ac4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	69da      	ldr	r2, [r3, #28]
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ad4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	69d9      	ldr	r1, [r3, #28]
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	691b      	ldr	r3, [r3, #16]
 8002ae0:	021a      	lsls	r2, r3, #8
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	430a      	orrs	r2, r1
 8002ae8:	61da      	str	r2, [r3, #28]
      break;
 8002aea:	e002      	b.n	8002af2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	75fb      	strb	r3, [r7, #23]
      break;
 8002af0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	2200      	movs	r2, #0
 8002af6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002afa:	7dfb      	ldrb	r3, [r7, #23]
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	3718      	adds	r7, #24
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}

08002b04 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b084      	sub	sp, #16
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
 8002b0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	d101      	bne.n	8002b20 <HAL_TIM_ConfigClockSource+0x1c>
 8002b1c:	2302      	movs	r3, #2
 8002b1e:	e0b4      	b.n	8002c8a <HAL_TIM_ConfigClockSource+0x186>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2201      	movs	r2, #1
 8002b24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2202      	movs	r2, #2
 8002b2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002b3e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002b46:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	68ba      	ldr	r2, [r7, #8]
 8002b4e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002b58:	d03e      	beq.n	8002bd8 <HAL_TIM_ConfigClockSource+0xd4>
 8002b5a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002b5e:	f200 8087 	bhi.w	8002c70 <HAL_TIM_ConfigClockSource+0x16c>
 8002b62:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b66:	f000 8086 	beq.w	8002c76 <HAL_TIM_ConfigClockSource+0x172>
 8002b6a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b6e:	d87f      	bhi.n	8002c70 <HAL_TIM_ConfigClockSource+0x16c>
 8002b70:	2b70      	cmp	r3, #112	@ 0x70
 8002b72:	d01a      	beq.n	8002baa <HAL_TIM_ConfigClockSource+0xa6>
 8002b74:	2b70      	cmp	r3, #112	@ 0x70
 8002b76:	d87b      	bhi.n	8002c70 <HAL_TIM_ConfigClockSource+0x16c>
 8002b78:	2b60      	cmp	r3, #96	@ 0x60
 8002b7a:	d050      	beq.n	8002c1e <HAL_TIM_ConfigClockSource+0x11a>
 8002b7c:	2b60      	cmp	r3, #96	@ 0x60
 8002b7e:	d877      	bhi.n	8002c70 <HAL_TIM_ConfigClockSource+0x16c>
 8002b80:	2b50      	cmp	r3, #80	@ 0x50
 8002b82:	d03c      	beq.n	8002bfe <HAL_TIM_ConfigClockSource+0xfa>
 8002b84:	2b50      	cmp	r3, #80	@ 0x50
 8002b86:	d873      	bhi.n	8002c70 <HAL_TIM_ConfigClockSource+0x16c>
 8002b88:	2b40      	cmp	r3, #64	@ 0x40
 8002b8a:	d058      	beq.n	8002c3e <HAL_TIM_ConfigClockSource+0x13a>
 8002b8c:	2b40      	cmp	r3, #64	@ 0x40
 8002b8e:	d86f      	bhi.n	8002c70 <HAL_TIM_ConfigClockSource+0x16c>
 8002b90:	2b30      	cmp	r3, #48	@ 0x30
 8002b92:	d064      	beq.n	8002c5e <HAL_TIM_ConfigClockSource+0x15a>
 8002b94:	2b30      	cmp	r3, #48	@ 0x30
 8002b96:	d86b      	bhi.n	8002c70 <HAL_TIM_ConfigClockSource+0x16c>
 8002b98:	2b20      	cmp	r3, #32
 8002b9a:	d060      	beq.n	8002c5e <HAL_TIM_ConfigClockSource+0x15a>
 8002b9c:	2b20      	cmp	r3, #32
 8002b9e:	d867      	bhi.n	8002c70 <HAL_TIM_ConfigClockSource+0x16c>
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d05c      	beq.n	8002c5e <HAL_TIM_ConfigClockSource+0x15a>
 8002ba4:	2b10      	cmp	r3, #16
 8002ba6:	d05a      	beq.n	8002c5e <HAL_TIM_ConfigClockSource+0x15a>
 8002ba8:	e062      	b.n	8002c70 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002bba:	f000 fb69 	bl	8003290 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002bcc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	68ba      	ldr	r2, [r7, #8]
 8002bd4:	609a      	str	r2, [r3, #8]
      break;
 8002bd6:	e04f      	b.n	8002c78 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002be8:	f000 fb52 	bl	8003290 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	689a      	ldr	r2, [r3, #8]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002bfa:	609a      	str	r2, [r3, #8]
      break;
 8002bfc:	e03c      	b.n	8002c78 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c0a:	461a      	mov	r2, r3
 8002c0c:	f000 fac6 	bl	800319c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	2150      	movs	r1, #80	@ 0x50
 8002c16:	4618      	mov	r0, r3
 8002c18:	f000 fb1f 	bl	800325a <TIM_ITRx_SetConfig>
      break;
 8002c1c:	e02c      	b.n	8002c78 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c2a:	461a      	mov	r2, r3
 8002c2c:	f000 fae5 	bl	80031fa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	2160      	movs	r1, #96	@ 0x60
 8002c36:	4618      	mov	r0, r3
 8002c38:	f000 fb0f 	bl	800325a <TIM_ITRx_SetConfig>
      break;
 8002c3c:	e01c      	b.n	8002c78 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c4a:	461a      	mov	r2, r3
 8002c4c:	f000 faa6 	bl	800319c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	2140      	movs	r1, #64	@ 0x40
 8002c56:	4618      	mov	r0, r3
 8002c58:	f000 faff 	bl	800325a <TIM_ITRx_SetConfig>
      break;
 8002c5c:	e00c      	b.n	8002c78 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681a      	ldr	r2, [r3, #0]
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4619      	mov	r1, r3
 8002c68:	4610      	mov	r0, r2
 8002c6a:	f000 faf6 	bl	800325a <TIM_ITRx_SetConfig>
      break;
 8002c6e:	e003      	b.n	8002c78 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002c70:	2301      	movs	r3, #1
 8002c72:	73fb      	strb	r3, [r7, #15]
      break;
 8002c74:	e000      	b.n	8002c78 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002c76:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2200      	movs	r2, #0
 8002c84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002c88:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	3710      	adds	r7, #16
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}

08002c92 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c92:	b480      	push	{r7}
 8002c94:	b083      	sub	sp, #12
 8002c96:	af00      	add	r7, sp, #0
 8002c98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002c9a:	bf00      	nop
 8002c9c:	370c      	adds	r7, #12
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca4:	4770      	bx	lr

08002ca6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002ca6:	b480      	push	{r7}
 8002ca8:	b083      	sub	sp, #12
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002cae:	bf00      	nop
 8002cb0:	370c      	adds	r7, #12
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr

08002cba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002cba:	b480      	push	{r7}
 8002cbc:	b083      	sub	sp, #12
 8002cbe:	af00      	add	r7, sp, #0
 8002cc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002cc2:	bf00      	nop
 8002cc4:	370c      	adds	r7, #12
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ccc:	4770      	bx	lr

08002cce <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002cce:	b480      	push	{r7}
 8002cd0:	b083      	sub	sp, #12
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002cd6:	bf00      	nop
 8002cd8:	370c      	adds	r7, #12
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce0:	4770      	bx	lr
	...

08002ce4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b085      	sub	sp, #20
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
 8002cec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	4a46      	ldr	r2, [pc, #280]	@ (8002e10 <TIM_Base_SetConfig+0x12c>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d013      	beq.n	8002d24 <TIM_Base_SetConfig+0x40>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d02:	d00f      	beq.n	8002d24 <TIM_Base_SetConfig+0x40>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	4a43      	ldr	r2, [pc, #268]	@ (8002e14 <TIM_Base_SetConfig+0x130>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d00b      	beq.n	8002d24 <TIM_Base_SetConfig+0x40>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	4a42      	ldr	r2, [pc, #264]	@ (8002e18 <TIM_Base_SetConfig+0x134>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d007      	beq.n	8002d24 <TIM_Base_SetConfig+0x40>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	4a41      	ldr	r2, [pc, #260]	@ (8002e1c <TIM_Base_SetConfig+0x138>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d003      	beq.n	8002d24 <TIM_Base_SetConfig+0x40>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	4a40      	ldr	r2, [pc, #256]	@ (8002e20 <TIM_Base_SetConfig+0x13c>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d108      	bne.n	8002d36 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	68fa      	ldr	r2, [r7, #12]
 8002d32:	4313      	orrs	r3, r2
 8002d34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	4a35      	ldr	r2, [pc, #212]	@ (8002e10 <TIM_Base_SetConfig+0x12c>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d02b      	beq.n	8002d96 <TIM_Base_SetConfig+0xb2>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d44:	d027      	beq.n	8002d96 <TIM_Base_SetConfig+0xb2>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	4a32      	ldr	r2, [pc, #200]	@ (8002e14 <TIM_Base_SetConfig+0x130>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d023      	beq.n	8002d96 <TIM_Base_SetConfig+0xb2>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	4a31      	ldr	r2, [pc, #196]	@ (8002e18 <TIM_Base_SetConfig+0x134>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d01f      	beq.n	8002d96 <TIM_Base_SetConfig+0xb2>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	4a30      	ldr	r2, [pc, #192]	@ (8002e1c <TIM_Base_SetConfig+0x138>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d01b      	beq.n	8002d96 <TIM_Base_SetConfig+0xb2>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	4a2f      	ldr	r2, [pc, #188]	@ (8002e20 <TIM_Base_SetConfig+0x13c>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d017      	beq.n	8002d96 <TIM_Base_SetConfig+0xb2>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	4a2e      	ldr	r2, [pc, #184]	@ (8002e24 <TIM_Base_SetConfig+0x140>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d013      	beq.n	8002d96 <TIM_Base_SetConfig+0xb2>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	4a2d      	ldr	r2, [pc, #180]	@ (8002e28 <TIM_Base_SetConfig+0x144>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d00f      	beq.n	8002d96 <TIM_Base_SetConfig+0xb2>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	4a2c      	ldr	r2, [pc, #176]	@ (8002e2c <TIM_Base_SetConfig+0x148>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d00b      	beq.n	8002d96 <TIM_Base_SetConfig+0xb2>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	4a2b      	ldr	r2, [pc, #172]	@ (8002e30 <TIM_Base_SetConfig+0x14c>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d007      	beq.n	8002d96 <TIM_Base_SetConfig+0xb2>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	4a2a      	ldr	r2, [pc, #168]	@ (8002e34 <TIM_Base_SetConfig+0x150>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d003      	beq.n	8002d96 <TIM_Base_SetConfig+0xb2>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	4a29      	ldr	r2, [pc, #164]	@ (8002e38 <TIM_Base_SetConfig+0x154>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d108      	bne.n	8002da8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	68db      	ldr	r3, [r3, #12]
 8002da2:	68fa      	ldr	r2, [r7, #12]
 8002da4:	4313      	orrs	r3, r2
 8002da6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	695b      	ldr	r3, [r3, #20]
 8002db2:	4313      	orrs	r3, r2
 8002db4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	68fa      	ldr	r2, [r7, #12]
 8002dba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	689a      	ldr	r2, [r3, #8]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	681a      	ldr	r2, [r3, #0]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	4a10      	ldr	r2, [pc, #64]	@ (8002e10 <TIM_Base_SetConfig+0x12c>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d003      	beq.n	8002ddc <TIM_Base_SetConfig+0xf8>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	4a12      	ldr	r2, [pc, #72]	@ (8002e20 <TIM_Base_SetConfig+0x13c>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d103      	bne.n	8002de4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	691a      	ldr	r2, [r3, #16]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2201      	movs	r2, #1
 8002de8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	691b      	ldr	r3, [r3, #16]
 8002dee:	f003 0301 	and.w	r3, r3, #1
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	d105      	bne.n	8002e02 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	691b      	ldr	r3, [r3, #16]
 8002dfa:	f023 0201 	bic.w	r2, r3, #1
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	611a      	str	r2, [r3, #16]
  }
}
 8002e02:	bf00      	nop
 8002e04:	3714      	adds	r7, #20
 8002e06:	46bd      	mov	sp, r7
 8002e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0c:	4770      	bx	lr
 8002e0e:	bf00      	nop
 8002e10:	40010000 	.word	0x40010000
 8002e14:	40000400 	.word	0x40000400
 8002e18:	40000800 	.word	0x40000800
 8002e1c:	40000c00 	.word	0x40000c00
 8002e20:	40010400 	.word	0x40010400
 8002e24:	40014000 	.word	0x40014000
 8002e28:	40014400 	.word	0x40014400
 8002e2c:	40014800 	.word	0x40014800
 8002e30:	40001800 	.word	0x40001800
 8002e34:	40001c00 	.word	0x40001c00
 8002e38:	40002000 	.word	0x40002000

08002e3c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b087      	sub	sp, #28
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
 8002e44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6a1b      	ldr	r3, [r3, #32]
 8002e4a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6a1b      	ldr	r3, [r3, #32]
 8002e50:	f023 0201 	bic.w	r2, r3, #1
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	699b      	ldr	r3, [r3, #24]
 8002e62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	f023 0303 	bic.w	r3, r3, #3
 8002e72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	68fa      	ldr	r2, [r7, #12]
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	f023 0302 	bic.w	r3, r3, #2
 8002e84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	697a      	ldr	r2, [r7, #20]
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	4a20      	ldr	r2, [pc, #128]	@ (8002f14 <TIM_OC1_SetConfig+0xd8>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d003      	beq.n	8002ea0 <TIM_OC1_SetConfig+0x64>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	4a1f      	ldr	r2, [pc, #124]	@ (8002f18 <TIM_OC1_SetConfig+0xdc>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d10c      	bne.n	8002eba <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	f023 0308 	bic.w	r3, r3, #8
 8002ea6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	68db      	ldr	r3, [r3, #12]
 8002eac:	697a      	ldr	r2, [r7, #20]
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	f023 0304 	bic.w	r3, r3, #4
 8002eb8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	4a15      	ldr	r2, [pc, #84]	@ (8002f14 <TIM_OC1_SetConfig+0xd8>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d003      	beq.n	8002eca <TIM_OC1_SetConfig+0x8e>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	4a14      	ldr	r2, [pc, #80]	@ (8002f18 <TIM_OC1_SetConfig+0xdc>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d111      	bne.n	8002eee <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002ed0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002ed8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	695b      	ldr	r3, [r3, #20]
 8002ede:	693a      	ldr	r2, [r7, #16]
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	699b      	ldr	r3, [r3, #24]
 8002ee8:	693a      	ldr	r2, [r7, #16]
 8002eea:	4313      	orrs	r3, r2
 8002eec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	693a      	ldr	r2, [r7, #16]
 8002ef2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	68fa      	ldr	r2, [r7, #12]
 8002ef8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	685a      	ldr	r2, [r3, #4]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	697a      	ldr	r2, [r7, #20]
 8002f06:	621a      	str	r2, [r3, #32]
}
 8002f08:	bf00      	nop
 8002f0a:	371c      	adds	r7, #28
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f12:	4770      	bx	lr
 8002f14:	40010000 	.word	0x40010000
 8002f18:	40010400 	.word	0x40010400

08002f1c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b087      	sub	sp, #28
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
 8002f24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6a1b      	ldr	r3, [r3, #32]
 8002f2a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6a1b      	ldr	r3, [r3, #32]
 8002f30:	f023 0210 	bic.w	r2, r3, #16
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	699b      	ldr	r3, [r3, #24]
 8002f42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002f4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002f52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	021b      	lsls	r3, r3, #8
 8002f5a:	68fa      	ldr	r2, [r7, #12]
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	f023 0320 	bic.w	r3, r3, #32
 8002f66:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	011b      	lsls	r3, r3, #4
 8002f6e:	697a      	ldr	r2, [r7, #20]
 8002f70:	4313      	orrs	r3, r2
 8002f72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	4a22      	ldr	r2, [pc, #136]	@ (8003000 <TIM_OC2_SetConfig+0xe4>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d003      	beq.n	8002f84 <TIM_OC2_SetConfig+0x68>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	4a21      	ldr	r2, [pc, #132]	@ (8003004 <TIM_OC2_SetConfig+0xe8>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d10d      	bne.n	8002fa0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002f8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	68db      	ldr	r3, [r3, #12]
 8002f90:	011b      	lsls	r3, r3, #4
 8002f92:	697a      	ldr	r2, [r7, #20]
 8002f94:	4313      	orrs	r3, r2
 8002f96:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002f9e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	4a17      	ldr	r2, [pc, #92]	@ (8003000 <TIM_OC2_SetConfig+0xe4>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d003      	beq.n	8002fb0 <TIM_OC2_SetConfig+0x94>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	4a16      	ldr	r2, [pc, #88]	@ (8003004 <TIM_OC2_SetConfig+0xe8>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d113      	bne.n	8002fd8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002fb0:	693b      	ldr	r3, [r7, #16]
 8002fb2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002fb6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002fbe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	695b      	ldr	r3, [r3, #20]
 8002fc4:	009b      	lsls	r3, r3, #2
 8002fc6:	693a      	ldr	r2, [r7, #16]
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	699b      	ldr	r3, [r3, #24]
 8002fd0:	009b      	lsls	r3, r3, #2
 8002fd2:	693a      	ldr	r2, [r7, #16]
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	693a      	ldr	r2, [r7, #16]
 8002fdc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	68fa      	ldr	r2, [r7, #12]
 8002fe2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	685a      	ldr	r2, [r3, #4]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	697a      	ldr	r2, [r7, #20]
 8002ff0:	621a      	str	r2, [r3, #32]
}
 8002ff2:	bf00      	nop
 8002ff4:	371c      	adds	r7, #28
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffc:	4770      	bx	lr
 8002ffe:	bf00      	nop
 8003000:	40010000 	.word	0x40010000
 8003004:	40010400 	.word	0x40010400

08003008 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003008:	b480      	push	{r7}
 800300a:	b087      	sub	sp, #28
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
 8003010:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6a1b      	ldr	r3, [r3, #32]
 8003016:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6a1b      	ldr	r3, [r3, #32]
 800301c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	69db      	ldr	r3, [r3, #28]
 800302e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003036:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	f023 0303 	bic.w	r3, r3, #3
 800303e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	68fa      	ldr	r2, [r7, #12]
 8003046:	4313      	orrs	r3, r2
 8003048:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003050:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	021b      	lsls	r3, r3, #8
 8003058:	697a      	ldr	r2, [r7, #20]
 800305a:	4313      	orrs	r3, r2
 800305c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	4a21      	ldr	r2, [pc, #132]	@ (80030e8 <TIM_OC3_SetConfig+0xe0>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d003      	beq.n	800306e <TIM_OC3_SetConfig+0x66>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	4a20      	ldr	r2, [pc, #128]	@ (80030ec <TIM_OC3_SetConfig+0xe4>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d10d      	bne.n	800308a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003074:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	68db      	ldr	r3, [r3, #12]
 800307a:	021b      	lsls	r3, r3, #8
 800307c:	697a      	ldr	r2, [r7, #20]
 800307e:	4313      	orrs	r3, r2
 8003080:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003082:	697b      	ldr	r3, [r7, #20]
 8003084:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003088:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	4a16      	ldr	r2, [pc, #88]	@ (80030e8 <TIM_OC3_SetConfig+0xe0>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d003      	beq.n	800309a <TIM_OC3_SetConfig+0x92>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	4a15      	ldr	r2, [pc, #84]	@ (80030ec <TIM_OC3_SetConfig+0xe4>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d113      	bne.n	80030c2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80030a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80030a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	695b      	ldr	r3, [r3, #20]
 80030ae:	011b      	lsls	r3, r3, #4
 80030b0:	693a      	ldr	r2, [r7, #16]
 80030b2:	4313      	orrs	r3, r2
 80030b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	699b      	ldr	r3, [r3, #24]
 80030ba:	011b      	lsls	r3, r3, #4
 80030bc:	693a      	ldr	r2, [r7, #16]
 80030be:	4313      	orrs	r3, r2
 80030c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	693a      	ldr	r2, [r7, #16]
 80030c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	68fa      	ldr	r2, [r7, #12]
 80030cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	685a      	ldr	r2, [r3, #4]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	697a      	ldr	r2, [r7, #20]
 80030da:	621a      	str	r2, [r3, #32]
}
 80030dc:	bf00      	nop
 80030de:	371c      	adds	r7, #28
 80030e0:	46bd      	mov	sp, r7
 80030e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e6:	4770      	bx	lr
 80030e8:	40010000 	.word	0x40010000
 80030ec:	40010400 	.word	0x40010400

080030f0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b087      	sub	sp, #28
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
 80030f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6a1b      	ldr	r3, [r3, #32]
 80030fe:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6a1b      	ldr	r3, [r3, #32]
 8003104:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	69db      	ldr	r3, [r3, #28]
 8003116:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800311e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003126:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	021b      	lsls	r3, r3, #8
 800312e:	68fa      	ldr	r2, [r7, #12]
 8003130:	4313      	orrs	r3, r2
 8003132:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800313a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	031b      	lsls	r3, r3, #12
 8003142:	693a      	ldr	r2, [r7, #16]
 8003144:	4313      	orrs	r3, r2
 8003146:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	4a12      	ldr	r2, [pc, #72]	@ (8003194 <TIM_OC4_SetConfig+0xa4>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d003      	beq.n	8003158 <TIM_OC4_SetConfig+0x68>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	4a11      	ldr	r2, [pc, #68]	@ (8003198 <TIM_OC4_SetConfig+0xa8>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d109      	bne.n	800316c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800315e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	695b      	ldr	r3, [r3, #20]
 8003164:	019b      	lsls	r3, r3, #6
 8003166:	697a      	ldr	r2, [r7, #20]
 8003168:	4313      	orrs	r3, r2
 800316a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	697a      	ldr	r2, [r7, #20]
 8003170:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	68fa      	ldr	r2, [r7, #12]
 8003176:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	685a      	ldr	r2, [r3, #4]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	693a      	ldr	r2, [r7, #16]
 8003184:	621a      	str	r2, [r3, #32]
}
 8003186:	bf00      	nop
 8003188:	371c      	adds	r7, #28
 800318a:	46bd      	mov	sp, r7
 800318c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003190:	4770      	bx	lr
 8003192:	bf00      	nop
 8003194:	40010000 	.word	0x40010000
 8003198:	40010400 	.word	0x40010400

0800319c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800319c:	b480      	push	{r7}
 800319e:	b087      	sub	sp, #28
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	60f8      	str	r0, [r7, #12]
 80031a4:	60b9      	str	r1, [r7, #8]
 80031a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	6a1b      	ldr	r3, [r3, #32]
 80031ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	6a1b      	ldr	r3, [r3, #32]
 80031b2:	f023 0201 	bic.w	r2, r3, #1
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	699b      	ldr	r3, [r3, #24]
 80031be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80031c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	011b      	lsls	r3, r3, #4
 80031cc:	693a      	ldr	r2, [r7, #16]
 80031ce:	4313      	orrs	r3, r2
 80031d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	f023 030a 	bic.w	r3, r3, #10
 80031d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80031da:	697a      	ldr	r2, [r7, #20]
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	4313      	orrs	r3, r2
 80031e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	693a      	ldr	r2, [r7, #16]
 80031e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	697a      	ldr	r2, [r7, #20]
 80031ec:	621a      	str	r2, [r3, #32]
}
 80031ee:	bf00      	nop
 80031f0:	371c      	adds	r7, #28
 80031f2:	46bd      	mov	sp, r7
 80031f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f8:	4770      	bx	lr

080031fa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80031fa:	b480      	push	{r7}
 80031fc:	b087      	sub	sp, #28
 80031fe:	af00      	add	r7, sp, #0
 8003200:	60f8      	str	r0, [r7, #12]
 8003202:	60b9      	str	r1, [r7, #8]
 8003204:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	6a1b      	ldr	r3, [r3, #32]
 800320a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	6a1b      	ldr	r3, [r3, #32]
 8003210:	f023 0210 	bic.w	r2, r3, #16
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	699b      	ldr	r3, [r3, #24]
 800321c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003224:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	031b      	lsls	r3, r3, #12
 800322a:	693a      	ldr	r2, [r7, #16]
 800322c:	4313      	orrs	r3, r2
 800322e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003236:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	011b      	lsls	r3, r3, #4
 800323c:	697a      	ldr	r2, [r7, #20]
 800323e:	4313      	orrs	r3, r2
 8003240:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	693a      	ldr	r2, [r7, #16]
 8003246:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	697a      	ldr	r2, [r7, #20]
 800324c:	621a      	str	r2, [r3, #32]
}
 800324e:	bf00      	nop
 8003250:	371c      	adds	r7, #28
 8003252:	46bd      	mov	sp, r7
 8003254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003258:	4770      	bx	lr

0800325a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800325a:	b480      	push	{r7}
 800325c:	b085      	sub	sp, #20
 800325e:	af00      	add	r7, sp, #0
 8003260:	6078      	str	r0, [r7, #4]
 8003262:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	689b      	ldr	r3, [r3, #8]
 8003268:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003270:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003272:	683a      	ldr	r2, [r7, #0]
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	4313      	orrs	r3, r2
 8003278:	f043 0307 	orr.w	r3, r3, #7
 800327c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	68fa      	ldr	r2, [r7, #12]
 8003282:	609a      	str	r2, [r3, #8]
}
 8003284:	bf00      	nop
 8003286:	3714      	adds	r7, #20
 8003288:	46bd      	mov	sp, r7
 800328a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328e:	4770      	bx	lr

08003290 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003290:	b480      	push	{r7}
 8003292:	b087      	sub	sp, #28
 8003294:	af00      	add	r7, sp, #0
 8003296:	60f8      	str	r0, [r7, #12]
 8003298:	60b9      	str	r1, [r7, #8]
 800329a:	607a      	str	r2, [r7, #4]
 800329c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80032aa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	021a      	lsls	r2, r3, #8
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	431a      	orrs	r2, r3
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	4313      	orrs	r3, r2
 80032b8:	697a      	ldr	r2, [r7, #20]
 80032ba:	4313      	orrs	r3, r2
 80032bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	697a      	ldr	r2, [r7, #20]
 80032c2:	609a      	str	r2, [r3, #8]
}
 80032c4:	bf00      	nop
 80032c6:	371c      	adds	r7, #28
 80032c8:	46bd      	mov	sp, r7
 80032ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ce:	4770      	bx	lr

080032d0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b087      	sub	sp, #28
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	60f8      	str	r0, [r7, #12]
 80032d8:	60b9      	str	r1, [r7, #8]
 80032da:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	f003 031f 	and.w	r3, r3, #31
 80032e2:	2201      	movs	r2, #1
 80032e4:	fa02 f303 	lsl.w	r3, r2, r3
 80032e8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	6a1a      	ldr	r2, [r3, #32]
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	43db      	mvns	r3, r3
 80032f2:	401a      	ands	r2, r3
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	6a1a      	ldr	r2, [r3, #32]
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	f003 031f 	and.w	r3, r3, #31
 8003302:	6879      	ldr	r1, [r7, #4]
 8003304:	fa01 f303 	lsl.w	r3, r1, r3
 8003308:	431a      	orrs	r2, r3
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	621a      	str	r2, [r3, #32]
}
 800330e:	bf00      	nop
 8003310:	371c      	adds	r7, #28
 8003312:	46bd      	mov	sp, r7
 8003314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003318:	4770      	bx	lr
	...

0800331c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800331c:	b480      	push	{r7}
 800331e:	b085      	sub	sp, #20
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
 8003324:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800332c:	2b01      	cmp	r3, #1
 800332e:	d101      	bne.n	8003334 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003330:	2302      	movs	r3, #2
 8003332:	e05a      	b.n	80033ea <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2201      	movs	r2, #1
 8003338:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2202      	movs	r2, #2
 8003340:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800335a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	68fa      	ldr	r2, [r7, #12]
 8003362:	4313      	orrs	r3, r2
 8003364:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	68fa      	ldr	r2, [r7, #12]
 800336c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a21      	ldr	r2, [pc, #132]	@ (80033f8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d022      	beq.n	80033be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003380:	d01d      	beq.n	80033be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a1d      	ldr	r2, [pc, #116]	@ (80033fc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d018      	beq.n	80033be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a1b      	ldr	r2, [pc, #108]	@ (8003400 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d013      	beq.n	80033be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a1a      	ldr	r2, [pc, #104]	@ (8003404 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d00e      	beq.n	80033be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a18      	ldr	r2, [pc, #96]	@ (8003408 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d009      	beq.n	80033be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a17      	ldr	r2, [pc, #92]	@ (800340c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d004      	beq.n	80033be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a15      	ldr	r2, [pc, #84]	@ (8003410 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d10c      	bne.n	80033d8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80033c4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	68ba      	ldr	r2, [r7, #8]
 80033cc:	4313      	orrs	r3, r2
 80033ce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	68ba      	ldr	r2, [r7, #8]
 80033d6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2201      	movs	r2, #1
 80033dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2200      	movs	r2, #0
 80033e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80033e8:	2300      	movs	r3, #0
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	3714      	adds	r7, #20
 80033ee:	46bd      	mov	sp, r7
 80033f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f4:	4770      	bx	lr
 80033f6:	bf00      	nop
 80033f8:	40010000 	.word	0x40010000
 80033fc:	40000400 	.word	0x40000400
 8003400:	40000800 	.word	0x40000800
 8003404:	40000c00 	.word	0x40000c00
 8003408:	40010400 	.word	0x40010400
 800340c:	40014000 	.word	0x40014000
 8003410:	40001800 	.word	0x40001800

08003414 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003414:	b480      	push	{r7}
 8003416:	b083      	sub	sp, #12
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800341c:	bf00      	nop
 800341e:	370c      	adds	r7, #12
 8003420:	46bd      	mov	sp, r7
 8003422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003426:	4770      	bx	lr

08003428 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003428:	b480      	push	{r7}
 800342a:	b083      	sub	sp, #12
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003430:	bf00      	nop
 8003432:	370c      	adds	r7, #12
 8003434:	46bd      	mov	sp, r7
 8003436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343a:	4770      	bx	lr

0800343c <memset>:
 800343c:	4402      	add	r2, r0
 800343e:	4603      	mov	r3, r0
 8003440:	4293      	cmp	r3, r2
 8003442:	d100      	bne.n	8003446 <memset+0xa>
 8003444:	4770      	bx	lr
 8003446:	f803 1b01 	strb.w	r1, [r3], #1
 800344a:	e7f9      	b.n	8003440 <memset+0x4>

0800344c <__libc_init_array>:
 800344c:	b570      	push	{r4, r5, r6, lr}
 800344e:	4d0d      	ldr	r5, [pc, #52]	@ (8003484 <__libc_init_array+0x38>)
 8003450:	4c0d      	ldr	r4, [pc, #52]	@ (8003488 <__libc_init_array+0x3c>)
 8003452:	1b64      	subs	r4, r4, r5
 8003454:	10a4      	asrs	r4, r4, #2
 8003456:	2600      	movs	r6, #0
 8003458:	42a6      	cmp	r6, r4
 800345a:	d109      	bne.n	8003470 <__libc_init_array+0x24>
 800345c:	4d0b      	ldr	r5, [pc, #44]	@ (800348c <__libc_init_array+0x40>)
 800345e:	4c0c      	ldr	r4, [pc, #48]	@ (8003490 <__libc_init_array+0x44>)
 8003460:	f000 f818 	bl	8003494 <_init>
 8003464:	1b64      	subs	r4, r4, r5
 8003466:	10a4      	asrs	r4, r4, #2
 8003468:	2600      	movs	r6, #0
 800346a:	42a6      	cmp	r6, r4
 800346c:	d105      	bne.n	800347a <__libc_init_array+0x2e>
 800346e:	bd70      	pop	{r4, r5, r6, pc}
 8003470:	f855 3b04 	ldr.w	r3, [r5], #4
 8003474:	4798      	blx	r3
 8003476:	3601      	adds	r6, #1
 8003478:	e7ee      	b.n	8003458 <__libc_init_array+0xc>
 800347a:	f855 3b04 	ldr.w	r3, [r5], #4
 800347e:	4798      	blx	r3
 8003480:	3601      	adds	r6, #1
 8003482:	e7f2      	b.n	800346a <__libc_init_array+0x1e>
 8003484:	080034c4 	.word	0x080034c4
 8003488:	080034c4 	.word	0x080034c4
 800348c:	080034c4 	.word	0x080034c4
 8003490:	080034c8 	.word	0x080034c8

08003494 <_init>:
 8003494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003496:	bf00      	nop
 8003498:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800349a:	bc08      	pop	{r3}
 800349c:	469e      	mov	lr, r3
 800349e:	4770      	bx	lr

080034a0 <_fini>:
 80034a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034a2:	bf00      	nop
 80034a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034a6:	bc08      	pop	{r3}
 80034a8:	469e      	mov	lr, r3
 80034aa:	4770      	bx	lr
